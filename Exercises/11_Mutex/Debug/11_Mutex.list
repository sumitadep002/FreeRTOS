
11_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800578c  0800578c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800578c  0800578c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800578c  0800578c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00001224  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001284  20001284  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012cc1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b4e  00000000  00000000  00032d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c5c  00000000  00000000  000368c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021adc  00000000  00000000  0003751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013885  00000000  00000000  00058ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca9b1  00000000  00000000  0006c87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004468  00000000  00000000  00137230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  0013b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005670 	.word	0x08005670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005670 	.word	0x08005670

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000007c 	.word	0x2000007c
 8000210:	2000011c 	.word	0x2000011c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fb25 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f873 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f8fb 	bl	800041c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000226:	f000 f8c9 	bl	80003bc <MX_USART1_UART_Init>
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Mutex = xSemaphoreCreateMutex();
 800022a:	2001      	movs	r0, #1
 800022c:	f003 f9ed 	bl	800360a <xQueueCreateMutex>
 8000230:	4603      	mov	r3, r0
 8000232:	4a26      	ldr	r2, [pc, #152]	; (80002cc <main+0xb8>)
 8000234:	6013      	str	r3, [r2, #0]

  if (Mutex != NULL)
 8000236:	4b25      	ldr	r3, [pc, #148]	; (80002cc <main+0xb8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d006      	beq.n	800024c <main+0x38>
  {
   HAL_UART_Transmit(&huart1, (uint8_t*)"Mutex Created\r\n", strlen("Mutex Created\r\n"), HAL_MAX_DELAY);
 800023e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000242:	220f      	movs	r2, #15
 8000244:	4922      	ldr	r1, [pc, #136]	; (80002d0 <main+0xbc>)
 8000246:	4823      	ldr	r0, [pc, #140]	; (80002d4 <main+0xc0>)
 8000248:	f002 fc76 	bl	8002b38 <HAL_UART_Transmit>
  }

  /// create tasks

  xTaskCreate(Task1_Handler, "Task1", 60, NULL, 2, NULL);
 800024c:	2300      	movs	r3, #0
 800024e:	9301      	str	r3, [sp, #4]
 8000250:	2302      	movs	r3, #2
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	2300      	movs	r3, #0
 8000256:	223c      	movs	r2, #60	; 0x3c
 8000258:	491f      	ldr	r1, [pc, #124]	; (80002d8 <main+0xc4>)
 800025a:	4820      	ldr	r0, [pc, #128]	; (80002dc <main+0xc8>)
 800025c:	f003 fd56 	bl	8003d0c <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task2", 60, NULL, 2, NULL);
 8000260:	2300      	movs	r3, #0
 8000262:	9301      	str	r3, [sp, #4]
 8000264:	2302      	movs	r3, #2
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2300      	movs	r3, #0
 800026a:	223c      	movs	r2, #60	; 0x3c
 800026c:	491c      	ldr	r1, [pc, #112]	; (80002e0 <main+0xcc>)
 800026e:	481d      	ldr	r0, [pc, #116]	; (80002e4 <main+0xd0>)
 8000270:	f003 fd4c 	bl	8003d0c <xTaskCreate>
  xTaskCreate(Task3_Handler, "Task3", 60, NULL, 2, NULL);
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2302      	movs	r3, #2
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2300      	movs	r3, #0
 800027e:	223c      	movs	r2, #60	; 0x3c
 8000280:	4919      	ldr	r1, [pc, #100]	; (80002e8 <main+0xd4>)
 8000282:	481a      	ldr	r0, [pc, #104]	; (80002ec <main+0xd8>)
 8000284:	f003 fd42 	bl	8003d0c <xTaskCreate>
  xTaskCreate(Task4_Handler, "Task4", 60, NULL, 2, NULL);
 8000288:	2300      	movs	r3, #0
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2302      	movs	r3, #2
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2300      	movs	r3, #0
 8000292:	223c      	movs	r2, #60	; 0x3c
 8000294:	4916      	ldr	r1, [pc, #88]	; (80002f0 <main+0xdc>)
 8000296:	4817      	ldr	r0, [pc, #92]	; (80002f4 <main+0xe0>)
 8000298:	f003 fd38 	bl	8003d0c <xTaskCreate>
  xTaskCreate(Task5_Handler, "Task5", 60, NULL, 2, NULL);
 800029c:	2300      	movs	r3, #0
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2302      	movs	r3, #2
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2300      	movs	r3, #0
 80002a6:	223c      	movs	r2, #60	; 0x3c
 80002a8:	4913      	ldr	r1, [pc, #76]	; (80002f8 <main+0xe4>)
 80002aa:	4814      	ldr	r0, [pc, #80]	; (80002fc <main+0xe8>)
 80002ac:	f003 fd2e 	bl	8003d0c <xTaskCreate>
  xTaskCreate(Task6_Handler, "Task6", 60, NULL, 2, NULL);
 80002b0:	2300      	movs	r3, #0
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2302      	movs	r3, #2
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2300      	movs	r3, #0
 80002ba:	223c      	movs	r2, #60	; 0x3c
 80002bc:	4910      	ldr	r1, [pc, #64]	; (8000300 <main+0xec>)
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <main+0xf0>)
 80002c0:	f003 fd24 	bl	8003d0c <xTaskCreate>

  vTaskStartScheduler();
 80002c4:	f003 fe9c 	bl	8004000 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xb4>
 80002ca:	bf00      	nop
 80002cc:	200003a4 	.word	0x200003a4
 80002d0:	08005688 	.word	0x08005688
 80002d4:	2000031c 	.word	0x2000031c
 80002d8:	08005698 	.word	0x08005698
 80002dc:	08000525 	.word	0x08000525
 80002e0:	080056a0 	.word	0x080056a0
 80002e4:	0800053d 	.word	0x0800053d
 80002e8:	080056a8 	.word	0x080056a8
 80002ec:	08000555 	.word	0x08000555
 80002f0:	080056b0 	.word	0x080056b0
 80002f4:	0800056d 	.word	0x0800056d
 80002f8:	080056b8 	.word	0x080056b8
 80002fc:	08000585 	.word	0x08000585
 8000300:	080056c0 	.word	0x080056c0
 8000304:	0800059d 	.word	0x0800059d

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b096      	sub	sp, #88	; 0x58
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f005 f8c0 	bl	800549c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034e:	2300      	movs	r3, #0
 8000350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fd25 	bl	8000dac <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000368:	f000 f936 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000382:	f107 031c 	add.w	r3, r7, #28
 8000386:	2101      	movs	r1, #1
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fd4d 	bl	8001e28 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000394:	f000 f920 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000398:	2301      	movs	r3, #1
 800039a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 ffa8 	bl	80022f8 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003ae:	f000 f913 	bl	80005d8 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3758      	adds	r7, #88	; 0x58
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <MX_USART1_UART_Init+0x5c>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_USART1_UART_Init+0x58>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_USART1_UART_Init+0x58>)
 8000400:	f002 fb4c 	bl	8002a9c <HAL_UART_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800040a:	f000 f8e5 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000031c 	.word	0x2000031c
 8000418:	40013800 	.word	0x40013800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_GPIO_Init+0x5c>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a10      	ldr	r2, [pc, #64]	; (8000478 <MX_GPIO_Init+0x5c>)
 8000436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_GPIO_Init+0x5c>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <MX_GPIO_Init+0x60>)
 8000450:	f000 fc94 	bl	8000d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4619      	mov	r1, r3
 800046a:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_GPIO_Init+0x60>)
 800046c:	f000 fb14 	bl	8000a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	48000400 	.word	0x48000400

08000480 <Send_Uart>:

/* USER CODE BEGIN 4 */

void Send_Uart (char *str)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(Mutex, portMAX_DELAY);
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <Send_Uart+0x90>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000490:	4618      	mov	r0, r3
 8000492:	f003 f9d1 	bl	8003838 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f7ff fe9a 	bl	80001d0 <strlen>
 800049c:	4603      	mov	r3, r0
 800049e:	b29a      	uxth	r2, r3
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004a4:	6879      	ldr	r1, [r7, #4]
 80004a6:	481b      	ldr	r0, [pc, #108]	; (8000514 <Send_Uart+0x94>)
 80004a8:	f002 fb46 	bl	8002b38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Aquired Mutex\r\n", strlen("Aquired Mutex\r\n"), HAL_MAX_DELAY);
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b0:	220f      	movs	r2, #15
 80004b2:	4919      	ldr	r1, [pc, #100]	; (8000518 <Send_Uart+0x98>)
 80004b4:	4817      	ldr	r0, [pc, #92]	; (8000514 <Send_Uart+0x94>)
 80004b6:	f002 fb3f 	bl	8002b38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Any Critical Task...\r\n", strlen("Any Critical Task...\r\n"), HAL_MAX_DELAY);
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004be:	2216      	movs	r2, #22
 80004c0:	4916      	ldr	r1, [pc, #88]	; (800051c <Send_Uart+0x9c>)
 80004c2:	4814      	ldr	r0, [pc, #80]	; (8000514 <Send_Uart+0x94>)
 80004c4:	f002 fb38 	bl	8002b38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Any Critical Task...\r\n", strlen("Any Critical Task...\r\n"), HAL_MAX_DELAY);
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004cc:	2216      	movs	r2, #22
 80004ce:	4913      	ldr	r1, [pc, #76]	; (800051c <Send_Uart+0x9c>)
 80004d0:	4810      	ldr	r0, [pc, #64]	; (8000514 <Send_Uart+0x94>)
 80004d2:	f002 fb31 	bl	8002b38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Any Critical Task...\r\n", strlen("Any Critical Task...\r\n"), HAL_MAX_DELAY);
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004da:	2216      	movs	r2, #22
 80004dc:	490f      	ldr	r1, [pc, #60]	; (800051c <Send_Uart+0x9c>)
 80004de:	480d      	ldr	r0, [pc, #52]	; (8000514 <Send_Uart+0x94>)
 80004e0:	f002 fb2a 	bl	8002b38 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"Releasing Mutex\r\n", strlen("Releasing Mutex\r\n"), HAL_MAX_DELAY);
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004e8:	2211      	movs	r2, #17
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <Send_Uart+0xa0>)
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <Send_Uart+0x94>)
 80004ee:	f002 fb23 	bl	8002b38 <HAL_UART_Transmit>
	xSemaphoreGive(Mutex);
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <Send_Uart+0x90>)
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	f003 f89e 	bl	800363c <xQueueGenericSend>
	vTaskDelay(10);
 8000500:	200a      	movs	r0, #10
 8000502:	f003 fd49 	bl	8003f98 <vTaskDelay>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200003a4 	.word	0x200003a4
 8000514:	2000031c 	.word	0x2000031c
 8000518:	080056c8 	.word	0x080056c8
 800051c:	080056d8 	.word	0x080056d8
 8000520:	080056f0 	.word	0x080056f0

08000524 <Task1_Handler>:

void Task1_Handler (void *argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task1:\r\n";
 800052c:	4b02      	ldr	r3, [pc, #8]	; (8000538 <Task1_Handler+0x14>)
 800052e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f7ff ffa5 	bl	8000480 <Send_Uart>
 8000536:	e7fb      	b.n	8000530 <Task1_Handler+0xc>
 8000538:	08005704 	.word	0x08005704

0800053c <Task2_Handler>:

	}
}

void Task2_Handler (void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task2: \r\n";
 8000544:	4b02      	ldr	r3, [pc, #8]	; (8000550 <Task2_Handler+0x14>)
 8000546:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f7ff ff99 	bl	8000480 <Send_Uart>
 800054e:	e7fb      	b.n	8000548 <Task2_Handler+0xc>
 8000550:	08005710 	.word	0x08005710

08000554 <Task3_Handler>:
	}
}

void Task3_Handler (void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task3: \r\n";
 800055c:	4b02      	ldr	r3, [pc, #8]	; (8000568 <Task3_Handler+0x14>)
 800055e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f7ff ff8d 	bl	8000480 <Send_Uart>
 8000566:	e7fb      	b.n	8000560 <Task3_Handler+0xc>
 8000568:	0800571c 	.word	0x0800571c

0800056c <Task4_Handler>:
	}
}

void Task4_Handler (void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task4: \r\n";
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <Task4_Handler+0x14>)
 8000576:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	f7ff ff81 	bl	8000480 <Send_Uart>
 800057e:	e7fb      	b.n	8000578 <Task4_Handler+0xc>
 8000580:	08005728 	.word	0x08005728

08000584 <Task5_Handler>:

	}
}

void Task5_Handler (void *argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task5: \r\n";
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <Task5_Handler+0x14>)
 800058e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f7ff ff75 	bl	8000480 <Send_Uart>
 8000596:	e7fb      	b.n	8000590 <Task5_Handler+0xc>
 8000598:	08005734 	.word	0x08005734

0800059c <Task6_Handler>:
	}
}

void Task6_Handler (void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	char *strtosend = "Task6: \r\n";
 80005a4:	4b02      	ldr	r3, [pc, #8]	; (80005b0 <Task6_Handler+0x14>)
 80005a6:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		Send_Uart(strtosend);
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff ff69 	bl	8000480 <Send_Uart>
 80005ae:	e7fb      	b.n	80005a8 <Task6_Handler+0xc>
 80005b0:	08005740 	.word	0x08005740

080005b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d101      	bne.n	80005ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005c6:	f000 f965 	bl	8000894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40001000 	.word	0x40001000

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_MspInit+0x4c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <HAL_MspInit+0x4c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_MspInit+0x4c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_MspInit+0x4c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <HAL_MspInit+0x4c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_MspInit+0x4c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	210f      	movs	r1, #15
 800061e:	f06f 0001 	mvn.w	r0, #1
 8000622:	f000 fa0f 	bl	8000a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_UART_MspInit+0x7c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d127      	bne.n	80006a6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <HAL_UART_MspInit+0x80>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <HAL_UART_MspInit+0x80>)
 8000674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_UART_MspInit+0x80>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000686:	23c0      	movs	r3, #192	; 0xc0
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000696:	2307      	movs	r3, #7
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <HAL_UART_MspInit+0x84>)
 80006a2:	f000 f9f9 	bl	8000a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40013800 	.word	0x40013800
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000400 	.word	0x48000400

080006bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <HAL_InitTick+0xe0>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4a32      	ldr	r2, [pc, #200]	; (800079c <HAL_InitTick+0xe0>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	61d3      	str	r3, [r2, #28]
 80006d8:	4b30      	ldr	r3, [pc, #192]	; (800079c <HAL_InitTick+0xe0>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006e4:	f107 0210 	add.w	r2, r7, #16
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fdd0 	bl	8002294 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d103      	bne.n	8000706 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006fe:	f001 fd85 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8000702:	6378      	str	r0, [r7, #52]	; 0x34
 8000704:	e004      	b.n	8000710 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000706:	f001 fd81 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 800070a:	4603      	mov	r3, r0
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000712:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <HAL_InitTick+0xe4>)
 8000714:	fba2 2303 	umull	r2, r3, r2, r3
 8000718:	0c9b      	lsrs	r3, r3, #18
 800071a:	3b01      	subs	r3, #1
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <HAL_InitTick+0xe8>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <HAL_InitTick+0xec>)
 8000722:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <HAL_InitTick+0xe8>)
 8000726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072c:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <HAL_InitTick+0xe8>)
 800072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000730:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_InitTick+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <HAL_InitTick+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_InitTick+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <HAL_InitTick+0xe8>)
 8000746:	f001 ff0d 	bl	8002564 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11b      	bne.n	8000790 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <HAL_InitTick+0xe8>)
 800075a:	f001 ff65 	bl	8002628 <HAL_TIM_Base_Start_IT>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000768:	2b00      	cmp	r3, #0
 800076a:	d111      	bne.n	8000790 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800076c:	2036      	movs	r0, #54	; 0x36
 800076e:	f000 f985 	bl	8000a7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d808      	bhi.n	800078a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	2036      	movs	r0, #54	; 0x36
 800077e:	f000 f961 	bl	8000a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_InitTick+0xf0>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	e002      	b.n	8000790 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000794:	4618      	mov	r0, r3
 8000796:	3738      	adds	r7, #56	; 0x38
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	431bde83 	.word	0x431bde83
 80007a4:	200003a8 	.word	0x200003a8
 80007a8:	40001000 	.word	0x40001000
 80007ac:	20000004 	.word	0x20000004

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <TIM6_DAC1_IRQHandler+0x10>)
 80007e2:	f001 ff7d 	bl	80026e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200003a8 	.word	0x200003a8

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000818:	f7ff ffea 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000842:	f004 fe89 	bl	8005558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000846:	f7ff fce5 	bl	8000214 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800084c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000858:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 800085c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000860:	20001284 	.word	0x20001284

08000864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_2_IRQHandler>
	...

08000868 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x28>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x28>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f8d8 	bl	8000a2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f7ff ff1c 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff feae 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008
 80008b8:	200003f4 	.word	0x200003f4

080008bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;  
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200003f4 	.word	0x200003f4

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4907      	ldr	r1, [pc, #28]	; (8000970 <__NVIC_EnableIRQ+0x38>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff4c 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a56:	f7ff ff61 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	6978      	ldr	r0, [r7, #20]
 8000a62:	f7ff ffb1 	bl	80009c8 <NVIC_EncodePriority>
 8000a66:	4602      	mov	r2, r0
 8000a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff80 	bl	8000974 <__NVIC_SetPriority>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff54 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	e14e      	b.n	8000d46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 8140 	beq.w	8000d40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d005      	beq.n	8000ad8 <HAL_GPIO_Init+0x40>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d130      	bne.n	8000b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b0e:	2201      	movs	r2, #1
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	f003 0201 	and.w	r2, r3, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d017      	beq.n	8000b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d123      	bne.n	8000bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	08da      	lsrs	r2, r3, #3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3208      	adds	r2, #8
 8000b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	6939      	ldr	r1, [r7, #16]
 8000bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0203 	and.w	r2, r3, #3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 809a 	beq.w	8000d40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b55      	ldr	r3, [pc, #340]	; (8000d64 <HAL_GPIO_Init+0x2cc>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a54      	ldr	r2, [pc, #336]	; (8000d64 <HAL_GPIO_Init+0x2cc>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b52      	ldr	r3, [pc, #328]	; (8000d64 <HAL_GPIO_Init+0x2cc>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c24:	4a50      	ldr	r2, [pc, #320]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1e0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a46      	ldr	r2, [pc, #280]	; (8000d6c <HAL_GPIO_Init+0x2d4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1dc>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <HAL_GPIO_Init+0x2d8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1d8>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x2dc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1d4>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1e2>
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1e2>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1e2>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1e2>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c8a:	4937      	ldr	r1, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ce6:	4a24      	ldr	r2, [pc, #144]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f aea9 	bne.w	8000aa8 <HAL_GPIO_Init+0x10>
  }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d92:	887a      	ldrh	r2, [r7, #2]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f001 b823 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 817d 	beq.w	80010e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000de8:	4bbc      	ldr	r3, [pc, #752]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d00c      	beq.n	8000e0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df4:	4bb9      	ldr	r3, [pc, #740]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d15c      	bne.n	8000eba <HAL_RCC_OscConfig+0x10e>
 8000e00:	4bb6      	ldr	r3, [pc, #728]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d155      	bne.n	8000eba <HAL_RCC_OscConfig+0x10e>
 8000e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e12:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e1a:	fa93 f3a3 	rbit	r3, r3
 8000e1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	095b      	lsrs	r3, r3, #5
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d102      	bne.n	8000e40 <HAL_RCC_OscConfig+0x94>
 8000e3a:	4ba8      	ldr	r3, [pc, #672]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	e015      	b.n	8000e6c <HAL_RCC_OscConfig+0xc0>
 8000e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e4c:	fa93 f3a3 	rbit	r3, r3
 8000e50:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e60:	fa93 f3a3 	rbit	r3, r3
 8000e64:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e68:	4b9c      	ldr	r3, [pc, #624]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e70:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e74:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e78:	fa92 f2a2 	rbit	r2, r2
 8000e7c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e80:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e84:	fab2 f282 	clz	r2, r2
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	f042 0220 	orr.w	r2, r2, #32
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	f002 021f 	and.w	r2, r2, #31
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 811f 	beq.w	80010e0 <HAL_RCC_OscConfig+0x334>
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8116 	bne.w	80010e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f000 bfaf 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eca:	d106      	bne.n	8000eda <HAL_RCC_OscConfig+0x12e>
 8000ecc:	4b83      	ldr	r3, [pc, #524]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a82      	ldr	r2, [pc, #520]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e036      	b.n	8000f48 <HAL_RCC_OscConfig+0x19c>
 8000eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x158>
 8000eea:	4b7c      	ldr	r3, [pc, #496]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a7b      	ldr	r2, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b79      	ldr	r3, [pc, #484]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a78      	ldr	r2, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e021      	b.n	8000f48 <HAL_RCC_OscConfig+0x19c>
 8000f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x184>
 8000f16:	4b71      	ldr	r3, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a70      	ldr	r2, [pc, #448]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b6e      	ldr	r3, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a6d      	ldr	r2, [pc, #436]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0x19c>
 8000f30:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a69      	ldr	r2, [pc, #420]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b67      	ldr	r3, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a66      	ldr	r2, [pc, #408]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f46:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f48:	4b64      	ldr	r3, [pc, #400]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	f023 020f 	bic.w	r2, r3, #15
 8000f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	495f      	ldr	r1, [pc, #380]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d059      	beq.n	8001026 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fca3 	bl	80008bc <HAL_GetTick>
 8000f76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e00a      	b.n	8000f92 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fc9e 	bl	80008bc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d902      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f000 bf43 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 8000f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f96:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	095b      	lsrs	r3, r3, #5
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x218>
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	e015      	b.n	8000ff0 <HAL_RCC_OscConfig+0x244>
 8000fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fdc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fe0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fec:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ff8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ffc:	fa92 f2a2 	rbit	r2, r2
 8001000:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001004:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001008:	fab2 f282 	clz	r2, r2
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	f042 0220 	orr.w	r2, r2, #32
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f002 021f 	and.w	r2, r2, #31
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	4013      	ands	r3, r2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ab      	beq.n	8000f7c <HAL_RCC_OscConfig+0x1d0>
 8001024:	e05d      	b.n	80010e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc49 	bl	80008bc <HAL_GetTick>
 800102a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	e00a      	b.n	8001046 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fc44 	bl	80008bc <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d902      	bls.n	8001046 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	f000 bee9 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800105a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d102      	bne.n	8001078 <HAL_RCC_OscConfig+0x2cc>
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	e015      	b.n	80010a4 <HAL_RCC_OscConfig+0x2f8>
 8001078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800108c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001090:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001094:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_RCC_OscConfig+0x330>)
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010b0:	fa92 f2a2 	rbit	r2, r2
 80010b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010bc:	fab2 f282 	clz	r2, r2
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	f002 021f 	and.w	r2, r2, #31
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ab      	bne.n	8001030 <HAL_RCC_OscConfig+0x284>
 80010d8:	e003      	b.n	80010e2 <HAL_RCC_OscConfig+0x336>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 817d 	beq.w	80013f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010f8:	4ba6      	ldr	r3, [pc, #664]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001104:	4ba3      	ldr	r3, [pc, #652]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d172      	bne.n	80011f6 <HAL_RCC_OscConfig+0x44a>
 8001110:	4ba0      	ldr	r3, [pc, #640]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d16c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x44a>
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800112e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <HAL_RCC_OscConfig+0x3a0>
 8001146:	4b93      	ldr	r3, [pc, #588]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	e013      	b.n	8001174 <HAL_RCC_OscConfig+0x3c8>
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001164:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001170:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	2202      	movs	r2, #2
 8001176:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800117a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800117e:	fa92 f2a2 	rbit	r2, r2
 8001182:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001186:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800118a:	fab2 f282 	clz	r2, r2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f042 0220 	orr.w	r2, r2, #32
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	f002 021f 	and.w	r2, r2, #31
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f202 	lsl.w	r2, r1, r2
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00a      	beq.n	80011bc <HAL_RCC_OscConfig+0x410>
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d002      	beq.n	80011bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f000 be2e 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4b75      	ldr	r3, [pc, #468]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	21f8      	movs	r1, #248	; 0xf8
 80011d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011da:	fa91 f1a1 	rbit	r1, r1
 80011de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011e6:	fab1 f181 	clz	r1, r1
 80011ea:	b2c9      	uxtb	r1, r1
 80011ec:	408b      	lsls	r3, r1
 80011ee:	4969      	ldr	r1, [pc, #420]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f4:	e0fd      	b.n	80013f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8088 	beq.w	8001318 <HAL_RCC_OscConfig+0x56c>
 8001208:	2301      	movs	r3, #1
 800120a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800121a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001228:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	461a      	mov	r2, r3
 8001230:	2301      	movs	r3, #1
 8001232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fb42 	bl	80008bc <HAL_GetTick>
 8001238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fb3d 	bl	80008bc <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d902      	bls.n	8001254 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	f000 bde2 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001266:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0x4d8>
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	e013      	b.n	80012ac <HAL_RCC_OscConfig+0x500>
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800129c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	2202      	movs	r2, #2
 80012ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012b6:	fa92 f2a2 	rbit	r2, r2
 80012ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012c2:	fab2 f282 	clz	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	f002 021f 	and.w	r2, r2, #31
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0af      	beq.n	800123e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	21f8      	movs	r1, #248	; 0xf8
 80012f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012fc:	fa91 f1a1 	rbit	r1, r1
 8001300:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001304:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001308:	fab1 f181 	clz	r1, r1
 800130c:	b2c9      	uxtb	r1, r1
 800130e:	408b      	lsls	r3, r1
 8001310:	4920      	ldr	r1, [pc, #128]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
 8001316:	e06c      	b.n	80013f2 <HAL_RCC_OscConfig+0x646>
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800132a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001338:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	461a      	mov	r2, r3
 8001340:	2300      	movs	r3, #0
 8001342:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff faba 	bl	80008bc <HAL_GetTick>
 8001348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134c:	e00a      	b.n	8001364 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fab5 	bl	80008bc <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d902      	bls.n	8001364 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	f000 bd5a 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	095b      	lsrs	r3, r3, #5
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d104      	bne.n	8001398 <HAL_RCC_OscConfig+0x5ec>
 800138e:	4b01      	ldr	r3, [pc, #4]	; (8001394 <HAL_RCC_OscConfig+0x5e8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	e015      	b.n	80013c0 <HAL_RCC_OscConfig+0x614>
 8001394:	40021000 	.word	0x40021000
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80013b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013bc:	4bc8      	ldr	r3, [pc, #800]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2202      	movs	r2, #2
 80013c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013ca:	fa92 f2a2 	rbit	r2, r2
 80013ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013d6:	fab2 f282 	clz	r2, r2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f042 0220 	orr.w	r2, r2, #32
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	f002 021f 	and.w	r2, r2, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ad      	bne.n	800134e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8110 	beq.w	8001628 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d079      	beq.n	800150c <HAL_RCC_OscConfig+0x760>
 8001418:	2301      	movs	r3, #1
 800141a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800142a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <HAL_RCC_OscConfig+0x938>)
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	461a      	mov	r2, r3
 800143e:	2301      	movs	r3, #1
 8001440:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fa3b 	bl	80008bc <HAL_GetTick>
 8001446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fa36 	bl	80008bc <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d902      	bls.n	8001462 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	f000 bcdb 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001462:	2302      	movs	r3, #2
 8001464:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001478:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800147c:	2202      	movs	r2, #2
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fa93 f2a3 	rbit	r2, r3
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014bc:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80014be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014c8:	2102      	movs	r1, #2
 80014ca:	6019      	str	r1, [r3, #0]
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f1a3 	rbit	r1, r3
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014e2:	6019      	str	r1, [r3, #0]
  return result;
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0a0      	beq.n	800144c <HAL_RCC_OscConfig+0x6a0>
 800150a:	e08d      	b.n	8001628 <HAL_RCC_OscConfig+0x87c>
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800152e:	601a      	str	r2, [r3, #0]
  return result;
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001538:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x938>)
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff f9b5 	bl	80008bc <HAL_GetTick>
 8001552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff f9b0 	bl	80008bc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d902      	bls.n	800156e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	f000 bc55 	b.w	8001e18 <HAL_RCC_OscConfig+0x106c>
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f2a3 	rbit	r2, r3
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015be:	2202      	movs	r2, #2
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80015dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015e6:	2102      	movs	r1, #2
 80015e8:	6019      	str	r1, [r3, #0]
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f1a3 	rbit	r1, r3
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001600:	6019      	str	r1, [r3, #0]
  return result;
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d197      	bne.n	8001558 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 81a1 	beq.w	8001980 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d116      	bne.n	800167e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165a:	61d3      	str	r3, [r2, #28]
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001676:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_RCC_OscConfig+0x93c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d11a      	bne.n	80016c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_RCC_OscConfig+0x93c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_RCC_OscConfig+0x93c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff f911 	bl	80008bc <HAL_GetTick>
 800169a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	e009      	b.n	80016b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7ff f90c 	bl	80008bc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e3b1      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_OscConfig+0x93c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0ef      	beq.n	80016a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10d      	bne.n	80016ec <HAL_RCC_OscConfig+0x940>
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a02      	ldr	r2, [pc, #8]	; (80016e0 <HAL_RCC_OscConfig+0x934>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e03c      	b.n	8001758 <HAL_RCC_OscConfig+0x9ac>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	10908120 	.word	0x10908120
 80016e8:	40007000 	.word	0x40007000
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x96a>
 80016fc:	4bc1      	ldr	r3, [pc, #772]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4ac0      	ldr	r2, [pc, #768]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	4bbe      	ldr	r3, [pc, #760]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4abd      	ldr	r2, [pc, #756]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e020      	b.n	8001758 <HAL_RCC_OscConfig+0x9ac>
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x994>
 8001726:	4bb7      	ldr	r3, [pc, #732]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4ab6      	ldr	r2, [pc, #728]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	4bb4      	ldr	r3, [pc, #720]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4ab3      	ldr	r2, [pc, #716]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x9ac>
 8001740:	4bb0      	ldr	r3, [pc, #704]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4aaf      	ldr	r2, [pc, #700]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	4bad      	ldr	r3, [pc, #692]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4aac      	ldr	r2, [pc, #688]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8081 	beq.w	800186c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f8a7 	bl	80008bc <HAL_GetTick>
 800176e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f8a2 	bl	80008bc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e345      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017d2:	601a      	str	r2, [r3, #0]
  return result;
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0xa4c>
 80017f2:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	e013      	b.n	8001820 <HAL_RCC_OscConfig+0xa74>
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001824:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001828:	2102      	movs	r1, #2
 800182a:	6011      	str	r1, [r2, #0]
 800182c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001830:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fa92 f1a2 	rbit	r1, r2
 800183a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001842:	6011      	str	r1, [r2, #0]
  return result;
 8001844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001848:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	fab2 f282 	clz	r2, r2
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	f002 021f 	and.w	r2, r2, #31
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d084      	beq.n	8001774 <HAL_RCC_OscConfig+0x9c8>
 800186a:	e07f      	b.n	800196c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff f826 	bl	80008bc <HAL_GetTick>
 8001870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f821 	bl	80008bc <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e2c4      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018d4:	601a      	str	r2, [r3, #0]
  return result;
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_OscConfig+0xb4e>
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	e013      	b.n	8001922 <HAL_RCC_OscConfig+0xb76>
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001926:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800192a:	2102      	movs	r1, #2
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001932:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fa92 f1a2 	rbit	r1, r2
 800193c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001940:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001944:	6011      	str	r1, [r2, #0]
  return result;
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f002 021f 	and.w	r2, r2, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d184      	bne.n	8001876 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800196c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8242 	beq.w	8001e16 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0xc58>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	f000 8213 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f040 8162 	bne.w	8001c76 <HAL_RCC_OscConfig+0xeca>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	fa93 f2a3 	rbit	r2, r3
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019d6:	601a      	str	r2, [r3, #0]
  return result;
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	461a      	mov	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7fe ff60 	bl	80008bc <HAL_GetTick>
 80019fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e00c      	b.n	8001a1c <HAL_RCC_OscConfig+0xc70>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7fe ff58 	bl	80008bc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1fd      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a40:	601a      	str	r2, [r3, #0]
  return result;
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0xcba>
 8001a60:	4bb0      	ldr	r3, [pc, #704]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e027      	b.n	8001ab6 <HAL_RCC_OscConfig+0xd0a>
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b9c      	ldr	r3, [pc, #624]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001abe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac2:	6011      	str	r1, [r2, #0]
 8001ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	fa92 f1a2 	rbit	r1, r2
 8001ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ada:	6011      	str	r1, [r2, #0]
  return result;
 8001adc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fab2 f282 	clz	r2, r2
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f042 0220 	orr.w	r2, r2, #32
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	f002 021f 	and.w	r2, r2, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d182      	bne.n	8001a08 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	497f      	ldr	r1, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b4e:	601a      	str	r2, [r3, #0]
  return result;
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b58:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7fe fea4 	bl	80008bc <HAL_GetTick>
 8001b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7fe fe9f 	bl	80008bc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e144      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bb2:	601a      	str	r2, [r3, #0]
  return result;
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe2c>
 8001bd2:	4b54      	ldr	r3, [pc, #336]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	e027      	b.n	8001c28 <HAL_RCC_OscConfig+0xe7c>
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c2c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c34:	6011      	str	r1, [r2, #0]
 8001c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c3a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fa92 f1a2 	rbit	r1, r2
 8001c44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c4c:	6011      	str	r1, [r2, #0]
  return result;
 8001c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d082      	beq.n	8001b7a <HAL_RCC_OscConfig+0xdce>
 8001c74:	e0cf      	b.n	8001e16 <HAL_RCC_OscConfig+0x106a>
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ca4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fdfe 	bl	80008bc <HAL_GetTick>
 8001cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe fdf9 	bl	80008bc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e09e      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d104      	bne.n	8001d28 <HAL_RCC_OscConfig+0xf7c>
 8001d1e:	4b01      	ldr	r3, [pc, #4]	; (8001d24 <HAL_RCC_OscConfig+0xf78>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	e029      	b.n	8001d78 <HAL_RCC_OscConfig+0xfcc>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x1078>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d84:	6011      	str	r1, [r2, #0]
 8001d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	fa92 f1a2 	rbit	r1, r2
 8001d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d9c:	6011      	str	r1, [r2, #0]
  return result;
 8001d9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	f002 021f 	and.w	r2, r2, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d180      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xf1a>
 8001dc4:	e027      	b.n	8001e16 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e01e      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x1078>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001de6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09e      	sub	sp, #120	; 0x78
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e162      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b90      	ldr	r3, [pc, #576]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	498b      	ldr	r1, [pc, #556]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e14a      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	497f      	ldr	r1, [pc, #508]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80dc 	beq.w	8002054 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d13c      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xf6>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_ClockConfig+0xa6>
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e00f      	b.n	8001eee <HAL_RCC_ClockConfig+0xc6>
 8001ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	667b      	str	r3, [r7, #100]	; 0x64
 8001edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ef2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ef6:	fa92 f2a2 	rbit	r2, r2
 8001efa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001efc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f002 021f 	and.w	r2, r2, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d17b      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0f3      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d13c      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x178>
 8001f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x128>
 8001f4a:	4b4f      	ldr	r3, [pc, #316]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_ClockConfig+0x148>
 8001f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
 8001f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f74:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d13a      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b2      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x1a0>
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e00d      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x1bc>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	61ba      	str	r2, [r7, #24]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	fa92 f2a2 	rbit	r2, r2
 8001fee:	617a      	str	r2, [r7, #20]
  return result;
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e079      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	491a      	ldr	r1, [pc, #104]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7fe fc4a 	bl	80008bc <HAL_GetTick>
 8002028:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fc46 	bl	80008bc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e061      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_ClockConfig+0x260>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d214      	bcs.n	800208c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4906      	ldr	r1, [pc, #24]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e040      	b.n	8002106 <HAL_RCC_ClockConfig+0x2de>
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_ClockConfig+0x2e8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	491a      	ldr	r1, [pc, #104]	; (8002110 <HAL_RCC_ClockConfig+0x2e8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_RCC_ClockConfig+0x2e8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4912      	ldr	r1, [pc, #72]	; (8002110 <HAL_RCC_ClockConfig+0x2e8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ca:	f000 f829 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_ClockConfig+0x2e8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	22f0      	movs	r2, #240	; 0xf0
 80020da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	60fa      	str	r2, [r7, #12]
  return result;
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	40d3      	lsrs	r3, r2
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x2ec>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	fa21 f303 	lsr.w	r3, r1, r3
 80020f6:	4a08      	ldr	r2, [pc, #32]	; (8002118 <HAL_RCC_ClockConfig+0x2f0>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCC_ClockConfig+0x2f4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fadc 	bl	80006bc <HAL_InitTick>
  
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3778      	adds	r7, #120	; 0x78
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	08005754 	.word	0x08005754
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x30>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x36>
 800214e:	e03c      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002152:	623b      	str	r3, [r7, #32]
      break;
 8002154:	e03c      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800215c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002160:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	607a      	str	r2, [r7, #4]
  return result;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	40d3      	lsrs	r3, r2
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	220f      	movs	r2, #15
 8002184:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	fa92 f2a2 	rbit	r2, r2
 800218c:	60fa      	str	r2, [r7, #12]
  return result;
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	40d3      	lsrs	r3, r2
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e004      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	623b      	str	r3, [r7, #32]
      break;
 80021c8:	e002      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021cc:	623b      	str	r3, [r7, #32]
      break;
 80021ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	372c      	adds	r7, #44	; 0x2c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	0800576c 	.word	0x0800576c
 80021ec:	0800577c 	.word	0x0800577c
 80021f0:	003d0900 	.word	0x003d0900

080021f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_GetHCLKFreq+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002212:	f7ff ffef 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002216:	4601      	mov	r1, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002220:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002224:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fa92 f2a2 	rbit	r2, r2
 800222c:	603a      	str	r2, [r7, #0]
  return result;
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	40d3      	lsrs	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x40>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	08005764 	.word	0x08005764

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002256:	f7ff ffcd 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 800225a:	4601      	mov	r1, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002264:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002268:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	603a      	str	r2, [r7, #0]
  return result;
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	40d3      	lsrs	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x40>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08005764 	.word	0x08005764

08002294 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	220f      	movs	r2, #15
 80022a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_GetClockConfig+0x5c>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_RCC_GetClockConfig+0x60>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0207 	and.w	r2, r3, #7
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022000 	.word	0x40022000

080022f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b092      	sub	sp, #72	; 0x48
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80cd 	beq.w	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b85      	ldr	r3, [pc, #532]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b82      	ldr	r3, [pc, #520]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a81      	ldr	r2, [pc, #516]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe faad 	bl	80008bc <HAL_GetTick>
 8002362:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe faa9 	bl	80008bc <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0ea      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b78      	ldr	r3, [pc, #480]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d07d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800239e:	429a      	cmp	r2, r3
 80023a0:	d076      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b66      	ldr	r3, [pc, #408]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	461a      	mov	r2, r3
 80023cc:	2301      	movs	r3, #1
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	461a      	mov	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d045      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fa5a 	bl	80008bc <HAL_GetTick>
 8002408:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fa56 	bl	80008bc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e095      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	61fb      	str	r3, [r7, #28]
  return result;
 800243a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d102      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	e007      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2202      	movs	r2, #2
 8002468:	613a      	str	r2, [r7, #16]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	60fa      	str	r2, [r7, #12]
  return result;
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0bd      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4922      	ldr	r1, [pc, #136]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f023 0210 	bic.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	491a      	ldr	r1, [pc, #104]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	4913      	ldr	r1, [pc, #76]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	4313      	orrs	r3, r2
 800250e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	490b      	ldr	r1, [pc, #44]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4904      	ldr	r1, [pc, #16]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	4313      	orrs	r3, r2
 800254a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3748      	adds	r7, #72	; 0x48
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	10908100 	.word	0x10908100

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e049      	b.n	800260a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f841 	bl	8002612 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 f9e4 	bl	8002970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e040      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d009      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIM_Base_Start_IT+0xac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x58>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d115      	bne.n	80026ac <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_TIM_Base_Start_IT+0xb4>)
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d015      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x96>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d011      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	e008      	b.n	80026be <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40014000 	.word	0x40014000
 80026dc:	00010007 	.word	0x00010007

080026e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0202 	mvn.w	r2, #2
 800270c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f905 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8f7 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f908 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0204 	mvn.w	r2, #4
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8db 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8cd 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f8de 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b08      	cmp	r3, #8
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0208 	mvn.w	r2, #8
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2204      	movs	r2, #4
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8b1 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8a3 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8b4 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0210 	mvn.w	r2, #16
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2208      	movs	r2, #8
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f887 	bl	8002932 <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f879 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f88a 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0201 	mvn.w	r2, #1
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fd fea8 	bl	80005b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8f2 	bl	8002a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d10e      	bne.n	80028be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d107      	bne.n	80028be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8e5 	bl	8002a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d10e      	bne.n	80028ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d107      	bne.n	80028ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f838 	bl	800295a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d10e      	bne.n	8002916 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d107      	bne.n	8002916 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0220 	mvn.w	r2, #32
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8a5 	bl	8002a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a32      	ldr	r2, [pc, #200]	; (8002a4c <TIM_Base_SetConfig+0xdc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <TIM_Base_SetConfig+0x28>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298e:	d003      	beq.n	8002998 <TIM_Base_SetConfig+0x28>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <TIM_Base_SetConfig+0xe0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d108      	bne.n	80029aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <TIM_Base_SetConfig+0xdc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <TIM_Base_SetConfig+0x6a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b8:	d00f      	beq.n	80029da <TIM_Base_SetConfig+0x6a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <TIM_Base_SetConfig+0xe0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <TIM_Base_SetConfig+0x6a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <TIM_Base_SetConfig+0xe4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0x6a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <TIM_Base_SetConfig+0xe8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x6a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <TIM_Base_SetConfig+0xec>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <TIM_Base_SetConfig+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_Base_SetConfig+0xc0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <TIM_Base_SetConfig+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0xc0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <TIM_Base_SetConfig+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0xc0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <TIM_Base_SetConfig+0xec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40014000 	.word	0x40014000
 8002a58:	40014400 	.word	0x40014400
 8002a5c:	40014800 	.word	0x40014800

08002a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e040      	b.n	8002b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fdb8 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8b6 	bl	8002c4c <UART_SetConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e022      	b.n	8002b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9e0 	bl	8002eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fa67 	bl	8002ffc <UART_CheckIdleState>
 8002b2e:	4603      	mov	r3, r0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d178      	bne.n	8002c42 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_UART_Transmit+0x24>
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e071      	b.n	8002c44 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2221      	movs	r2, #33	; 0x21
 8002b6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6e:	f7fd fea5 	bl	80008bc <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x68>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba8:	e030      	b.n	8002c0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	; 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fac9 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e03c      	b.n	8002c44 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3302      	adds	r3, #2
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e008      	b.n	8002bfa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1c8      	bne.n	8002baa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa92 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e005      	b.n	8002c44 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <UART_SetConfig+0x254>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a78      	ldr	r2, [pc, #480]	; (8002ea4 <UART_SetConfig+0x258>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d120      	bne.n	8002d0a <UART_SetConfig+0xbe>
 8002cc8:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <UART_SetConfig+0x25c>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d817      	bhi.n	8002d04 <UART_SetConfig+0xb8>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <UART_SetConfig+0x90>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf9 	.word	0x08002cf9
 8002ce4:	08002cff 	.word	0x08002cff
 8002ce8:	08002cf3 	.word	0x08002cf3
 8002cec:	2300      	movs	r3, #0
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e01d      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e01a      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e017      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002cfe:	2308      	movs	r3, #8
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e014      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002d04:	2310      	movs	r3, #16
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e011      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a67      	ldr	r2, [pc, #412]	; (8002eac <UART_SetConfig+0x260>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <UART_SetConfig+0xce>
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e009      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a64      	ldr	r2, [pc, #400]	; (8002eb0 <UART_SetConfig+0x264>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d102      	bne.n	8002d2a <UART_SetConfig+0xde>
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e001      	b.n	8002d2e <UART_SetConfig+0xe2>
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d36:	d15a      	bne.n	8002dee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d827      	bhi.n	8002d8e <UART_SetConfig+0x142>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <UART_SetConfig+0xf8>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d79 	.word	0x08002d79
 8002d50:	08002d8f 	.word	0x08002d8f
 8002d54:	08002d7f 	.word	0x08002d7f
 8002d58:	08002d8f 	.word	0x08002d8f
 8002d5c:	08002d8f 	.word	0x08002d8f
 8002d60:	08002d8f 	.word	0x08002d8f
 8002d64:	08002d87 	.word	0x08002d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d68:	f7ff fa50 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8002d6c:	61b8      	str	r0, [r7, #24]
        break;
 8002d6e:	e013      	b.n	8002d98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fa6e 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002d74:	61b8      	str	r0, [r7, #24]
        break;
 8002d76:	e00f      	b.n	8002d98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d78:	4b4e      	ldr	r3, [pc, #312]	; (8002eb4 <UART_SetConfig+0x268>)
 8002d7a:	61bb      	str	r3, [r7, #24]
        break;
 8002d7c:	e00c      	b.n	8002d98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7e:	f7ff f9cf 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002d82:	61b8      	str	r0, [r7, #24]
        break;
 8002d84:	e008      	b.n	8002d98 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8a:	61bb      	str	r3, [r7, #24]
        break;
 8002d8c:	e004      	b.n	8002d98 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	77bb      	strb	r3, [r7, #30]
        break;
 8002d96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d074      	beq.n	8002e88 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	441a      	add	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d916      	bls.n	8002de8 <UART_SetConfig+0x19c>
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d212      	bcs.n	8002de8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f023 030f 	bic.w	r3, r3, #15
 8002dca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	89fa      	ldrh	r2, [r7, #14]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	e04f      	b.n	8002e88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	77bb      	strb	r3, [r7, #30]
 8002dec:	e04c      	b.n	8002e88 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d828      	bhi.n	8002e46 <UART_SetConfig+0x1fa>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <UART_SetConfig+0x1b0>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e21 	.word	0x08002e21
 8002e00:	08002e29 	.word	0x08002e29
 8002e04:	08002e31 	.word	0x08002e31
 8002e08:	08002e47 	.word	0x08002e47
 8002e0c:	08002e37 	.word	0x08002e37
 8002e10:	08002e47 	.word	0x08002e47
 8002e14:	08002e47 	.word	0x08002e47
 8002e18:	08002e47 	.word	0x08002e47
 8002e1c:	08002e3f 	.word	0x08002e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e20:	f7ff f9f4 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8002e24:	61b8      	str	r0, [r7, #24]
        break;
 8002e26:	e013      	b.n	8002e50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e28:	f7ff fa12 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002e2c:	61b8      	str	r0, [r7, #24]
        break;
 8002e2e:	e00f      	b.n	8002e50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <UART_SetConfig+0x268>)
 8002e32:	61bb      	str	r3, [r7, #24]
        break;
 8002e34:	e00c      	b.n	8002e50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e36:	f7ff f973 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002e3a:	61b8      	str	r0, [r7, #24]
        break;
 8002e3c:	e008      	b.n	8002e50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e42:	61bb      	str	r3, [r7, #24]
        break;
 8002e44:	e004      	b.n	8002e50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	77bb      	strb	r3, [r7, #30]
        break;
 8002e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d018      	beq.n	8002e88 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085a      	lsrs	r2, r3, #1
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d909      	bls.n	8002e84 <UART_SetConfig+0x238>
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e76:	d205      	bcs.n	8002e84 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	e001      	b.n	8002e88 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e94:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	efff69f3 	.word	0xefff69f3
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40004400 	.word	0x40004400
 8002eb0:	40004800 	.word	0x40004800
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01a      	beq.n	8002fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d10a      	bne.n	8002fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b098      	sub	sp, #96	; 0x60
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800300c:	f7fd fc56 	bl	80008bc <HAL_GetTick>
 8003010:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d12e      	bne.n	800307e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f88c 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d021      	beq.n	800307e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304e:	653b      	str	r3, [r7, #80]	; 0x50
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003058:	647b      	str	r3, [r7, #68]	; 0x44
 800305a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800305e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e6      	bne.n	800303a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e062      	b.n	8003144 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d149      	bne.n	8003120 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f856 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03c      	beq.n	8003120 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	623b      	str	r3, [r7, #32]
   return(result);
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c4:	633b      	str	r3, [r7, #48]	; 0x30
 80030c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e6      	bne.n	80030a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3308      	adds	r3, #8
 80030de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3308      	adds	r3, #8
 80030f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f8:	61fa      	str	r2, [r7, #28]
 80030fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	69b9      	ldr	r1, [r7, #24]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	617b      	str	r3, [r7, #20]
   return(result);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e011      	b.n	8003144 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3758      	adds	r7, #88	; 0x58
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e049      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d045      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fd fba9 	bl	80008bc <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <UART_WaitOnFlagUntilTimeout+0x30>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e048      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d031      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d110      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2208      	movs	r2, #8
 80031a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f838 	bl	800321a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2208      	movs	r2, #8
 80031ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e029      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d111      	bne.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f81e 	bl	800321a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0a6      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800321a:	b480      	push	{r7}
 800321c:	b095      	sub	sp, #84	; 0x54
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
 8003242:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e6      	bne.n	8003222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	61fb      	str	r3, [r7, #28]
   return(result);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	2b01      	cmp	r3, #1
 800328e:	d118      	bne.n	80032c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	60bb      	str	r3, [r7, #8]
   return(result);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f023 0310 	bic.w	r3, r3, #16
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	613b      	str	r3, [r7, #16]
   return(result);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e6      	bne.n	8003290 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032d6:	bf00      	nop
 80032d8:	3754      	adds	r7, #84	; 0x54
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f103 0208 	add.w	r2, r3, #8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f103 0208 	add.w	r2, r3, #8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339a:	d103      	bne.n	80033a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e00c      	b.n	80033be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3308      	adds	r3, #8
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e002      	b.n	80033b2 <vListInsert+0x2e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d2f6      	bcs.n	80033ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6852      	ldr	r2, [r2, #4]
 8003416:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d103      	bne.n	800342a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003476:	f001 fd55 	bl	8004f24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	441a      	add	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	3b01      	subs	r3, #1
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	441a      	add	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d114      	bne.n	80034f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01a      	beq.n	800350a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3310      	adds	r3, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 ffe9 	bl	80044b0 <xTaskRemoveFromEventList>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <xQueueGenericReset+0xcc>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	e009      	b.n	800350a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3310      	adds	r3, #16
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fef1 	bl	80032e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3324      	adds	r3, #36	; 0x24
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff feec 	bl	80032e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800350a:	f001 fd3b 	bl	8004f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e004      	b.n	800355c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	3348      	adds	r3, #72	; 0x48
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fdc1 	bl	80050e8 <pvPortMalloc>
 8003566:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	3348      	adds	r3, #72	; 0x48
 8003572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800357c:	79fa      	ldrb	r2, [r7, #7]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f805 	bl	8003598 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800358e:	69bb      	ldr	r3, [r7, #24]
	}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e002      	b.n	80035ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035c6:	2101      	movs	r1, #1
 80035c8:	69b8      	ldr	r0, [r7, #24]
 80035ca:	f7ff ff3f 	bl	800344c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80035f6:	2300      	movs	r3, #0
 80035f8:	2200      	movs	r2, #0
 80035fa:	2100      	movs	r1, #0
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f81d 	bl	800363c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	461a      	mov	r2, r3
 8003620:	6939      	ldr	r1, [r7, #16]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff7a 	bl	800351c <xQueueGenericCreate>
 8003628:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff ffd3 	bl	80035d6 <prvInitialiseMutex>

		return pxNewQueue;
 8003630:	68fb      	ldr	r3, [r7, #12]
	}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSend+0x32>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <xQueueGenericSend+0x40>
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <xQueueGenericSend+0x44>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <xQueueGenericSend+0x46>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <xQueueGenericSend+0x60>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003698:	bf00      	nop
 800369a:	e7fe      	b.n	800369a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d103      	bne.n	80036aa <xQueueGenericSend+0x6e>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <xQueueGenericSend+0x72>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <xQueueGenericSend+0x74>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueGenericSend+0x8e>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ca:	f001 f8b7 	bl	800483c <xTaskGetSchedulerState>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xQueueGenericSend+0x9e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <xQueueGenericSend+0xa2>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <xQueueGenericSend+0xa4>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericSend+0xbe>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	61fb      	str	r3, [r7, #28]
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036fa:	f001 fc13 	bl	8004f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <xQueueGenericSend+0xd4>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d129      	bne.n	8003764 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003716:	f000 f9b3 	bl	8003a80 <prvCopyDataToQueue>
 800371a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3324      	adds	r3, #36	; 0x24
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fec1 	bl	80044b0 <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <xQueueGenericSend+0x1f8>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e00a      	b.n	800375c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800374c:	4b39      	ldr	r3, [pc, #228]	; (8003834 <xQueueGenericSend+0x1f8>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800375c:	f001 fc12 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 8003760:	2301      	movs	r3, #1
 8003762:	e063      	b.n	800382c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376a:	f001 fc0b 	bl	8004f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800376e:	2300      	movs	r3, #0
 8003770:	e05c      	b.n	800382c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fef9 	bl	8004574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003786:	f001 fbfd 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378a:	f000 fca3 	bl	80040d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378e:	f001 fbc9 	bl	8004f24 <vPortEnterCritical>
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003798:	b25b      	sxtb	r3, r3
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379e:	d103      	bne.n	80037a8 <xQueueGenericSend+0x16c>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b4:	d103      	bne.n	80037be <xQueueGenericSend+0x182>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037be:	f001 fbe1 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fee8 	bl	80045a0 <xTaskCheckForTimeOut>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d124      	bne.n	8003820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d8:	f000 fa24 	bl	8003c24 <prvIsQueueFull>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fe3c 	bl	8004468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037f2:	f000 f9af 	bl	8003b54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037f6:	f000 fc7b 	bl	80040f0 <xTaskResumeAll>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af7c 	bne.w	80036fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <xQueueGenericSend+0x1f8>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	e772      	b.n	80036fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003816:	f000 f99d 	bl	8003b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381a:	f000 fc69 	bl	80040f0 <xTaskResumeAll>
 800381e:	e76c      	b.n	80036fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 f997 	bl	8003b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003826:	f000 fc63 	bl	80040f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800382a:	2300      	movs	r3, #0
		}
	}
}
 800382c:	4618      	mov	r0, r3
 800382e:	3738      	adds	r7, #56	; 0x38
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	623b      	str	r3, [r7, #32]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	61fb      	str	r3, [r7, #28]
}
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003888:	f000 ffd8 	bl	800483c <xTaskGetSchedulerState>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <xQueueSemaphoreTake+0x60>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <xQueueSemaphoreTake+0x64>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <xQueueSemaphoreTake+0x66>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	61bb      	str	r3, [r7, #24]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80038b8:	f001 fb34 	bl	8004f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d024      	beq.n	8003912 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80038d8:	f001 f97a 	bl	8004bd0 <pvTaskIncrementMutexHeldCount>
 80038dc:	4602      	mov	r2, r0
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00f      	beq.n	800390a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	3310      	adds	r3, #16
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fdde 	bl	80044b0 <xTaskRemoveFromEventList>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038fa:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <xQueueSemaphoreTake+0x214>)
 80038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800390a:	f001 fb3b 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 800390e:	2301      	movs	r3, #1
 8003910:	e097      	b.n	8003a42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d111      	bne.n	800393c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	617b      	str	r3, [r7, #20]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003934:	f001 fb26 	bl	8004f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003938:	2300      	movs	r3, #0
 800393a:	e082      	b.n	8003a42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fe14 	bl	8004574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003950:	f001 fb18 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003954:	f000 fbbe 	bl	80040d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003958:	f001 fae4 	bl	8004f24 <vPortEnterCritical>
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003962:	b25b      	sxtb	r3, r3
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003968:	d103      	bne.n	8003972 <xQueueSemaphoreTake+0x13a>
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003978:	b25b      	sxtb	r3, r3
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397e:	d103      	bne.n	8003988 <xQueueSemaphoreTake+0x150>
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	f001 fafc 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398c:	463a      	mov	r2, r7
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fe03 	bl	80045a0 <xTaskCheckForTimeOut>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d132      	bne.n	8003a06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039a2:	f000 f929 	bl	8003bf8 <prvIsQueueEmpty>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d026      	beq.n	80039fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80039b4:	f001 fab6 	bl	8004f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 ff5b 	bl	8004878 <xTaskPriorityInherit>
 80039c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80039c4:	f001 fade 	bl	8004f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd49 	bl	8004468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039d8:	f000 f8bc 	bl	8003b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039dc:	f000 fb88 	bl	80040f0 <xTaskResumeAll>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f47f af68 	bne.w	80038b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <xQueueSemaphoreTake+0x214>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e75e      	b.n	80038b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80039fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039fc:	f000 f8aa 	bl	8003b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a00:	f000 fb76 	bl	80040f0 <xTaskResumeAll>
 8003a04:	e758      	b.n	80038b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a08:	f000 f8a4 	bl	8003b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a0c:	f000 fb70 	bl	80040f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a12:	f000 f8f1 	bl	8003bf8 <prvIsQueueEmpty>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f43f af4d 	beq.w	80038b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003a24:	f001 fa7e 	bl	8004f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a2a:	f000 f811 	bl	8003a50 <prvGetDisinheritPriorityAfterTimeout>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 f82a 	bl	8004a90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003a3c:	f001 faa2 	bl	8004f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3738      	adds	r7, #56	; 0x38
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003a72:	68fb      	ldr	r3, [r7, #12]
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10d      	bne.n	8003aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d14d      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff6a 	bl	8004984 <xTaskPriorityDisinherit>
 8003ab0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	e043      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d119      	bne.n	8003af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6898      	ldr	r0, [r3, #8]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	f001 fd6a 	bl	80055a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	441a      	add	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d32b      	bcc.n	8003b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	e026      	b.n	8003b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68d8      	ldr	r0, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	461a      	mov	r2, r3
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	f001 fd50 	bl	80055a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	441a      	add	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d207      	bcs.n	8003b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	425b      	negs	r3, r3
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d105      	bne.n	8003b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b4a:	697b      	ldr	r3, [r7, #20]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b5c:	f001 f9e2 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b68:	e011      	b.n	8003b8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fc9a 	bl	80044b0 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b82:	f000 fd6f 	bl	8004664 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dce9      	bgt.n	8003b6a <prvUnlockQueue+0x16>
 8003b96:	e000      	b.n	8003b9a <prvUnlockQueue+0x46>
					break;
 8003b98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ba2:	f001 f9ef 	bl	8004f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ba6:	f001 f9bd 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bb2:	e011      	b.n	8003bd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fc75 	bl	80044b0 <xTaskRemoveFromEventList>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bcc:	f000 fd4a 	bl	8004664 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bd0:	7bbb      	ldrb	r3, [r7, #14]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dce9      	bgt.n	8003bb4 <prvUnlockQueue+0x60>
 8003be0:	e000      	b.n	8003be4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003be2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003bec:	f001 f9ca 	bl	8004f84 <vPortExitCritical>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c00:	f001 f990 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e001      	b.n	8003c16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c16:	f001 f9b5 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c2c:	f001 f97a 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d102      	bne.n	8003c42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e001      	b.n	8003c46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c46:	f001 f99d 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af04      	add	r7, sp, #16
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	623b      	str	r3, [r7, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xTaskCreateStatic+0x46>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	61fb      	str	r3, [r7, #28]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c9a:	23a0      	movs	r3, #160	; 0xa0
 8003c9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ca2:	d00a      	beq.n	8003cba <xTaskCreateStatic+0x66>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61bb      	str	r3, [r7, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01e      	beq.n	8003cfe <xTaskCreateStatic+0xaa>
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01b      	beq.n	8003cfe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9303      	str	r3, [sp, #12]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f851 	bl	8003d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cf8:	f000 f8e4 	bl	8003ec4 <prvAddNewTaskToReadyList>
 8003cfc:	e001      	b.n	8003d02 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d02:	697b      	ldr	r3, [r7, #20]
	}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	; 0x30
 8003d10:	af04      	add	r7, sp, #16
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f9e1 	bl	80050e8 <pvPortMalloc>
 8003d26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d2e:	20a0      	movs	r0, #160	; 0xa0
 8003d30:	f001 f9da 	bl	80050e8 <pvPortMalloc>
 8003d34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
 8003d42:	e005      	b.n	8003d50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d44:	6978      	ldr	r0, [r7, #20]
 8003d46:	f001 fa93 	bl	8005270 <vPortFree>
 8003d4a:	e001      	b.n	8003d50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	2300      	movs	r3, #0
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f80f 	bl	8003d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7a:	69f8      	ldr	r0, [r7, #28]
 8003d7c:	f000 f8a2 	bl	8003ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d80:	2301      	movs	r3, #1
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e002      	b.n	8003d8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003db0:	3b01      	subs	r3, #1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	617b      	str	r3, [r7, #20]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e012      	b.n	8003e0c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	7819      	ldrb	r1, [r3, #0]
 8003dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	3334      	adds	r3, #52	; 0x34
 8003df6:	460a      	mov	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d9e9      	bls.n	8003de6 <prvInitialiseNewTask+0x4e>
 8003e12:	e000      	b.n	8003e16 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e14:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d901      	bls.n	8003e28 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e24:	2306      	movs	r3, #6
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	2200      	movs	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fa6f 	bl	8003322 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	3318      	adds	r3, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fa6a 	bl	8003322 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	f1c3 0207 	rsb	r2, r3, #7
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	334c      	adds	r3, #76	; 0x4c
 8003e78:	224c      	movs	r2, #76	; 0x4c
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fb0d 	bl	800549c <memset>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <prvInitialiseNewTask+0x120>)
 8003e86:	651a      	str	r2, [r3, #80]	; 0x50
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <prvInitialiseNewTask+0x124>)
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <prvInitialiseNewTask+0x128>)
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	69b8      	ldr	r0, [r7, #24]
 8003e9a:	f000 ff13 	bl	8004cc4 <pxPortInitialiseStack>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20001144 	.word	0x20001144
 8003ebc:	200011ac 	.word	0x200011ac
 8003ec0:	20001214 	.word	0x20001214

08003ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ecc:	f001 f82a 	bl	8004f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eda:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ee2:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <prvAddNewTaskToReadyList+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d110      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ef0:	f000 fbdc 	bl	80046ac <prvInitialiseTaskLists>
 8003ef4:	e00d      	b.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <prvAddNewTaskToReadyList+0xc0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d802      	bhi.n	8003f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <prvAddNewTaskToReadyList+0xc4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <prvAddNewTaskToReadyList+0xc4>)
 8003f1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	2201      	movs	r2, #1
 8003f22:	409a      	lsls	r2, r3
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <prvAddNewTaskToReadyList+0xc8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <prvAddNewTaskToReadyList+0xc8>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <prvAddNewTaskToReadyList+0xcc>)
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7ff f9f9 	bl	800333c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 f81b 	bl	8004f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <prvAddNewTaskToReadyList+0xc0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <prvAddNewTaskToReadyList+0xbc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d207      	bcs.n	8003f74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <prvAddNewTaskToReadyList+0xd0>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200004f8 	.word	0x200004f8
 8003f80:	200003f8 	.word	0x200003f8
 8003f84:	20000504 	.word	0x20000504
 8003f88:	20000514 	.word	0x20000514
 8003f8c:	20000500 	.word	0x20000500
 8003f90:	200003fc 	.word	0x200003fc
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d017      	beq.n	8003fda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <vTaskDelay+0x60>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <vTaskDelay+0x30>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fc8:	f000 f884 	bl	80040d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fcc:	2100      	movs	r1, #0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fe12 	bl	8004bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fd4:	f000 f88c 	bl	80040f0 <xTaskResumeAll>
 8003fd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <vTaskDelay+0x64>)
 8003fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000520 	.word	0x20000520
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800400e:	463a      	mov	r2, r7
 8004010:	1d39      	adds	r1, r7, #4
 8004012:	f107 0308 	add.w	r3, r7, #8
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc f8e2 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	9202      	str	r2, [sp, #8]
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	2300      	movs	r3, #0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2300      	movs	r3, #0
 800402c:	460a      	mov	r2, r1
 800402e:	4921      	ldr	r1, [pc, #132]	; (80040b4 <vTaskStartScheduler+0xb4>)
 8004030:	4821      	ldr	r0, [pc, #132]	; (80040b8 <vTaskStartScheduler+0xb8>)
 8004032:	f7ff fe0f 	bl	8003c54 <xTaskCreateStatic>
 8004036:	4603      	mov	r3, r0
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <vTaskStartScheduler+0xbc>)
 800403a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <vTaskStartScheduler+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e001      	b.n	800404e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d11b      	bne.n	800408c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
}
 8004066:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <vTaskStartScheduler+0xc0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	334c      	adds	r3, #76	; 0x4c
 800406e:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <vTaskStartScheduler+0xc4>)
 8004070:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <vTaskStartScheduler+0xc8>)
 8004074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004078:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <vTaskStartScheduler+0xcc>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004080:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <vTaskStartScheduler+0xd0>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004086:	f000 feab 	bl	8004de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800408a:	e00e      	b.n	80040aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004092:	d10a      	bne.n	80040aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60fb      	str	r3, [r7, #12]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <vTaskStartScheduler+0xa8>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	0800574c 	.word	0x0800574c
 80040b8:	0800467d 	.word	0x0800467d
 80040bc:	2000051c 	.word	0x2000051c
 80040c0:	200003f8 	.word	0x200003f8
 80040c4:	2000005c 	.word	0x2000005c
 80040c8:	20000518 	.word	0x20000518
 80040cc:	20000504 	.word	0x20000504
 80040d0:	200004fc 	.word	0x200004fc

080040d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <vTaskSuspendAll+0x18>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a03      	ldr	r2, [pc, #12]	; (80040ec <vTaskSuspendAll+0x18>)
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000520 	.word	0x20000520

080040f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040fe:	4b41      	ldr	r3, [pc, #260]	; (8004204 <xTaskResumeAll+0x114>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <xTaskResumeAll+0x2c>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	603b      	str	r3, [r7, #0]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800411c:	f000 ff02 	bl	8004f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004120:	4b38      	ldr	r3, [pc, #224]	; (8004204 <xTaskResumeAll+0x114>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3b01      	subs	r3, #1
 8004126:	4a37      	ldr	r2, [pc, #220]	; (8004204 <xTaskResumeAll+0x114>)
 8004128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <xTaskResumeAll+0x114>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d161      	bne.n	80041f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004132:	4b35      	ldr	r3, [pc, #212]	; (8004208 <xTaskResumeAll+0x118>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d05d      	beq.n	80041f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800413a:	e02e      	b.n	800419a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800413c:	4b33      	ldr	r3, [pc, #204]	; (800420c <xTaskResumeAll+0x11c>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3318      	adds	r3, #24
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f954 	bl	80033f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f94f 	bl	80033f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	2201      	movs	r2, #1
 800415e:	409a      	lsls	r2, r3
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <xTaskResumeAll+0x120>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	4a2a      	ldr	r2, [pc, #168]	; (8004210 <xTaskResumeAll+0x120>)
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a27      	ldr	r2, [pc, #156]	; (8004214 <xTaskResumeAll+0x124>)
 8004178:	441a      	add	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7ff f8db 	bl	800333c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <xTaskResumeAll+0x128>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <xTaskResumeAll+0x12c>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <xTaskResumeAll+0x11c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1cc      	bne.n	800413c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041a8:	f000 fb22 	bl	80047f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <xTaskResumeAll+0x130>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041b8:	f000 f836 	bl	8004228 <xTaskIncrementTick>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <xTaskResumeAll+0x12c>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f1      	bne.n	80041b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <xTaskResumeAll+0x130>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <xTaskResumeAll+0x12c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <xTaskResumeAll+0x134>)
 80041e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041f6:	f000 fec5 	bl	8004f84 <vPortExitCritical>

	return xAlreadyYielded;
 80041fa:	68bb      	ldr	r3, [r7, #8]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000520 	.word	0x20000520
 8004208:	200004f8 	.word	0x200004f8
 800420c:	200004b8 	.word	0x200004b8
 8004210:	20000500 	.word	0x20000500
 8004214:	200003fc 	.word	0x200003fc
 8004218:	200003f8 	.word	0x200003f8
 800421c:	2000050c 	.word	0x2000050c
 8004220:	20000508 	.word	0x20000508
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004232:	4b51      	ldr	r3, [pc, #324]	; (8004378 <xTaskIncrementTick+0x150>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 808d 	bne.w	8004356 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800423c:	4b4f      	ldr	r3, [pc, #316]	; (800437c <xTaskIncrementTick+0x154>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004244:	4a4d      	ldr	r2, [pc, #308]	; (800437c <xTaskIncrementTick+0x154>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d120      	bne.n	8004292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <xTaskIncrementTick+0x158>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <xTaskIncrementTick+0x48>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	603b      	str	r3, [r7, #0]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xTaskIncrementTick+0x46>
 8004270:	4b43      	ldr	r3, [pc, #268]	; (8004380 <xTaskIncrementTick+0x158>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <xTaskIncrementTick+0x15c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a41      	ldr	r2, [pc, #260]	; (8004380 <xTaskIncrementTick+0x158>)
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <xTaskIncrementTick+0x15c>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b40      	ldr	r3, [pc, #256]	; (8004388 <xTaskIncrementTick+0x160>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	4a3f      	ldr	r2, [pc, #252]	; (8004388 <xTaskIncrementTick+0x160>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	f000 faaf 	bl	80047f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <xTaskIncrementTick+0x164>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d34d      	bcc.n	8004338 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800429c:	4b38      	ldr	r3, [pc, #224]	; (8004380 <xTaskIncrementTick+0x158>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xTaskIncrementTick+0x82>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xTaskIncrementTick+0x84>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <xTaskIncrementTick+0x164>)
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042b6:	601a      	str	r2, [r3, #0]
					break;
 80042b8:	e03e      	b.n	8004338 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xTaskIncrementTick+0x158>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d203      	bcs.n	80042da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <xTaskIncrementTick+0x164>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6013      	str	r3, [r2, #0]
						break;
 80042d8:	e02e      	b.n	8004338 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f889 	bl	80033f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3318      	adds	r3, #24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff f880 	bl	80033f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	2201      	movs	r2, #1
 80042fc:	409a      	lsls	r2, r3
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <xTaskIncrementTick+0x168>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	4a22      	ldr	r2, [pc, #136]	; (8004390 <xTaskIncrementTick+0x168>)
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <xTaskIncrementTick+0x16c>)
 8004316:	441a      	add	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7ff f80c 	bl	800333c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <xTaskIncrementTick+0x170>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	429a      	cmp	r2, r3
 8004330:	d3b4      	bcc.n	800429c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	e7b1      	b.n	800429c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <xTaskIncrementTick+0x170>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4915      	ldr	r1, [pc, #84]	; (8004394 <xTaskIncrementTick+0x16c>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d907      	bls.n	8004360 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e004      	b.n	8004360 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <xTaskIncrementTick+0x174>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <xTaskIncrementTick+0x174>)
 800435e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <xTaskIncrementTick+0x178>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800436c:	697b      	ldr	r3, [r7, #20]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000520 	.word	0x20000520
 800437c:	200004fc 	.word	0x200004fc
 8004380:	200004b0 	.word	0x200004b0
 8004384:	200004b4 	.word	0x200004b4
 8004388:	20000510 	.word	0x20000510
 800438c:	20000518 	.word	0x20000518
 8004390:	20000500 	.word	0x20000500
 8004394:	200003fc 	.word	0x200003fc
 8004398:	200003f8 	.word	0x200003f8
 800439c:	20000508 	.word	0x20000508
 80043a0:	2000050c 	.word	0x2000050c

080043a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043aa:	4b29      	ldr	r3, [pc, #164]	; (8004450 <vTaskSwitchContext+0xac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <vTaskSwitchContext+0xb0>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043b8:	e044      	b.n	8004444 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80043ba:	4b26      	ldr	r3, [pc, #152]	; (8004454 <vTaskSwitchContext+0xb0>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <vTaskSwitchContext+0xb4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043ce:	7afb      	ldrb	r3, [r7, #11]
 80043d0:	f1c3 031f 	rsb	r3, r3, #31
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	4921      	ldr	r1, [pc, #132]	; (800445c <vTaskSwitchContext+0xb8>)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	607b      	str	r3, [r7, #4]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vTaskSwitchContext+0x5a>
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <vTaskSwitchContext+0xb8>)
 800440c:	4413      	add	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3308      	adds	r3, #8
 8004422:	429a      	cmp	r2, r3
 8004424:	d104      	bne.n	8004430 <vTaskSwitchContext+0x8c>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <vTaskSwitchContext+0xbc>)
 8004438:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <vTaskSwitchContext+0xbc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	334c      	adds	r3, #76	; 0x4c
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <vTaskSwitchContext+0xc0>)
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000520 	.word	0x20000520
 8004454:	2000050c 	.word	0x2000050c
 8004458:	20000500 	.word	0x20000500
 800445c:	200003fc 	.word	0x200003fc
 8004460:	200003f8 	.word	0x200003f8
 8004464:	2000005c 	.word	0x2000005c

08004468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60fb      	str	r3, [r7, #12]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <vTaskPlaceOnEventList+0x44>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3318      	adds	r3, #24
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fe ff74 	bl	8003384 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800449c:	2101      	movs	r1, #1
 800449e:	6838      	ldr	r0, [r7, #0]
 80044a0:	f000 fbaa 	bl	8004bf8 <prvAddCurrentTaskToDelayedList>
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	200003f8 	.word	0x200003f8

080044b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe ff88 	bl	80033f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <xTaskRemoveFromEventList+0xac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11c      	bne.n	8004528 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe ff7f 	bl	80033f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	2201      	movs	r2, #1
 80044fe:	409a      	lsls	r2, r3
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <xTaskRemoveFromEventList+0xb0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <xTaskRemoveFromEventList+0xb0>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <xTaskRemoveFromEventList+0xb4>)
 8004518:	441a      	add	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7fe ff0b 	bl	800333c <vListInsertEnd>
 8004526:	e005      	b.n	8004534 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	3318      	adds	r3, #24
 800452c:	4619      	mov	r1, r3
 800452e:	480e      	ldr	r0, [pc, #56]	; (8004568 <xTaskRemoveFromEventList+0xb8>)
 8004530:	f7fe ff04 	bl	800333c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <xTaskRemoveFromEventList+0xbc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	429a      	cmp	r2, r3
 8004540:	d905      	bls.n	800454e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <xTaskRemoveFromEventList+0xc0>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e001      	b.n	8004552 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004552:	697b      	ldr	r3, [r7, #20]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000520 	.word	0x20000520
 8004560:	20000500 	.word	0x20000500
 8004564:	200003fc 	.word	0x200003fc
 8004568:	200004b8 	.word	0x200004b8
 800456c:	200003f8 	.word	0x200003f8
 8004570:	2000050c 	.word	0x2000050c

08004574 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <vTaskInternalSetTimeOutState+0x24>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <vTaskInternalSetTimeOutState+0x28>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	605a      	str	r2, [r3, #4]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000510 	.word	0x20000510
 800459c:	200004fc 	.word	0x200004fc

080045a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	613b      	str	r3, [r7, #16]
}
 80045c2:	bf00      	nop
 80045c4:	e7fe      	b.n	80045c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045e2:	f000 fc9f 	bl	8004f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <xTaskCheckForTimeOut+0xbc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fe:	d102      	bne.n	8004606 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e023      	b.n	800464e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <xTaskCheckForTimeOut+0xc0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d007      	beq.n	8004622 <xTaskCheckForTimeOut+0x82>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e015      	b.n	800464e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	d20b      	bcs.n	8004644 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff9b 	bl	8004574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e004      	b.n	800464e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800464e:	f000 fc99 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	200004fc 	.word	0x200004fc
 8004660:	20000510 	.word	0x20000510

08004664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <vTaskMissedYield+0x14>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	2000050c 	.word	0x2000050c

0800467c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004684:	f000 f852 	bl	800472c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <prvIdleTask+0x28>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d9f9      	bls.n	8004684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <prvIdleTask+0x2c>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046a0:	e7f0      	b.n	8004684 <prvIdleTask+0x8>
 80046a2:	bf00      	nop
 80046a4:	200003fc 	.word	0x200003fc
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e00c      	b.n	80046d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <prvInitialiseTaskLists+0x60>)
 80046c4:	4413      	add	r3, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fe0b 	bl	80032e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d9ef      	bls.n	80046b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046d8:	480d      	ldr	r0, [pc, #52]	; (8004710 <prvInitialiseTaskLists+0x64>)
 80046da:	f7fe fe02 	bl	80032e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046de:	480d      	ldr	r0, [pc, #52]	; (8004714 <prvInitialiseTaskLists+0x68>)
 80046e0:	f7fe fdff 	bl	80032e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046e4:	480c      	ldr	r0, [pc, #48]	; (8004718 <prvInitialiseTaskLists+0x6c>)
 80046e6:	f7fe fdfc 	bl	80032e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ea:	480c      	ldr	r0, [pc, #48]	; (800471c <prvInitialiseTaskLists+0x70>)
 80046ec:	f7fe fdf9 	bl	80032e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046f0:	480b      	ldr	r0, [pc, #44]	; (8004720 <prvInitialiseTaskLists+0x74>)
 80046f2:	f7fe fdf6 	bl	80032e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <prvInitialiseTaskLists+0x78>)
 80046f8:	4a05      	ldr	r2, [pc, #20]	; (8004710 <prvInitialiseTaskLists+0x64>)
 80046fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <prvInitialiseTaskLists+0x7c>)
 80046fe:	4a05      	ldr	r2, [pc, #20]	; (8004714 <prvInitialiseTaskLists+0x68>)
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	200003fc 	.word	0x200003fc
 8004710:	20000488 	.word	0x20000488
 8004714:	2000049c 	.word	0x2000049c
 8004718:	200004b8 	.word	0x200004b8
 800471c:	200004cc 	.word	0x200004cc
 8004720:	200004e4 	.word	0x200004e4
 8004724:	200004b0 	.word	0x200004b0
 8004728:	200004b4 	.word	0x200004b4

0800472c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004732:	e019      	b.n	8004768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004734:	f000 fbf6 	bl	8004f24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <prvCheckTasksWaitingTermination+0x50>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fe56 	bl	80033f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <prvCheckTasksWaitingTermination+0x54>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <prvCheckTasksWaitingTermination+0x54>)
 8004752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <prvCheckTasksWaitingTermination+0x58>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3b01      	subs	r3, #1
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800475c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800475e:	f000 fc11 	bl	8004f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f810 	bl	8004788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e1      	bne.n	8004734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200004cc 	.word	0x200004cc
 8004780:	200004f8 	.word	0x200004f8
 8004784:	200004e0 	.word	0x200004e0

08004788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	334c      	adds	r3, #76	; 0x4c
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fe89 	bl	80054ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fd61 	bl	8005270 <vPortFree>
				vPortFree( pxTCB );
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fd5e 	bl	8005270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b4:	e018      	b.n	80047e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d103      	bne.n	80047c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fd55 	bl	8005270 <vPortFree>
	}
 80047c6:	e00f      	b.n	80047e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d00a      	beq.n	80047e8 <prvDeleteTCB+0x60>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <prvDeleteTCB+0x5e>
	}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvResetNextTaskUnblockTime+0x44>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <prvResetNextTaskUnblockTime+0x14>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <prvResetNextTaskUnblockTime+0x16>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvResetNextTaskUnblockTime+0x48>)
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004812:	e008      	b.n	8004826 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <prvResetNextTaskUnblockTime+0x44>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a05      	ldr	r2, [pc, #20]	; (8004838 <prvResetNextTaskUnblockTime+0x48>)
 8004824:	6013      	str	r3, [r2, #0]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200004b0 	.word	0x200004b0
 8004838:	20000518 	.word	0x20000518

0800483c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <xTaskGetSchedulerState+0x34>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800484a:	2301      	movs	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	e008      	b.n	8004862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <xTaskGetSchedulerState+0x38>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004858:	2302      	movs	r3, #2
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	e001      	b.n	8004862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004862:	687b      	ldr	r3, [r7, #4]
	}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000504 	.word	0x20000504
 8004874:	20000520 	.word	0x20000520

08004878 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d06e      	beq.n	800496c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <xTaskPriorityInherit+0x100>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	429a      	cmp	r2, r3
 800489a:	d25e      	bcs.n	800495a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db06      	blt.n	80048b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a4:	4b34      	ldr	r3, [pc, #208]	; (8004978 <xTaskPriorityInherit+0x100>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	f1c3 0207 	rsb	r2, r3, #7
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6959      	ldr	r1, [r3, #20]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a2e      	ldr	r2, [pc, #184]	; (800497c <xTaskPriorityInherit+0x104>)
 80048c4:	4413      	add	r3, r2
 80048c6:	4299      	cmp	r1, r3
 80048c8:	d101      	bne.n	80048ce <xTaskPriorityInherit+0x56>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xTaskPriorityInherit+0x58>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d03a      	beq.n	800494a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fd8c 	bl	80033f6 <uxListRemove>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d115      	bne.n	8004910 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4924      	ldr	r1, [pc, #144]	; (800497c <xTaskPriorityInherit+0x104>)
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskPriorityInherit+0x98>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	2201      	movs	r2, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43da      	mvns	r2, r3
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <xTaskPriorityInherit+0x108>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4013      	ands	r3, r2
 800490c:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <xTaskPriorityInherit+0x108>)
 800490e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <xTaskPriorityInherit+0x100>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <xTaskPriorityInherit+0x108>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <xTaskPriorityInherit+0x108>)
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4a10      	ldr	r2, [pc, #64]	; (800497c <xTaskPriorityInherit+0x104>)
 800493a:	441a      	add	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fe fcfa 	bl	800333c <vListInsertEnd>
 8004948:	e004      	b.n	8004954 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <xTaskPriorityInherit+0x100>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e008      	b.n	800496c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xTaskPriorityInherit+0x100>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d201      	bcs.n	800496c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800496c:	68fb      	ldr	r3, [r7, #12]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200003f8 	.word	0x200003f8
 800497c:	200003fc 	.word	0x200003fc
 8004980:	20000500 	.word	0x20000500

08004984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d06e      	beq.n	8004a78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <xTaskPriorityDisinherit+0x100>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d00a      	beq.n	80049ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60bb      	str	r3, [r7, #8]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d044      	beq.n	8004a78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d140      	bne.n	8004a78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fcfb 	bl	80033f6 <uxListRemove>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d115      	bne.n	8004a32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <xTaskPriorityDisinherit+0x104>)
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xTaskPriorityDisinherit+0xae>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f1c3 0207 	rsb	r2, r3, #7
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <xTaskPriorityDisinherit+0x108>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <xTaskPriorityDisinherit+0x104>)
 8004a66:	441a      	add	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fe fc64 	bl	800333c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a78:	697b      	ldr	r3, [r7, #20]
	}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200003f8 	.word	0x200003f8
 8004a88:	200003fc 	.word	0x200003fc
 8004a8c:	20000500 	.word	0x20000500

08004a90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8088 	beq.w	8004bba <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60fb      	str	r3, [r7, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d902      	bls.n	8004ad8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e002      	b.n	8004ade <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d068      	beq.n	8004bba <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d163      	bne.n	8004bba <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d10a      	bne.n	8004b12 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60bb      	str	r3, [r7, #8]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db04      	blt.n	8004b30 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f1c3 0207 	rsb	r2, r3, #7
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6959      	ldr	r1, [r3, #20]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004b40:	4413      	add	r3, r2
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d101      	bne.n	8004b4a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d034      	beq.n	8004bba <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fc4e 	bl	80033f6 <uxListRemove>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d115      	bne.n	8004b8c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4918      	ldr	r1, [pc, #96]	; (8004bc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43da      	mvns	r2, r3
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4013      	ands	r3, r2
 8004b88:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004b8a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004bac:	441a      	add	r2, r3
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f7fe fbc1 	bl	800333c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bba:	bf00      	nop
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200003f8 	.word	0x200003f8
 8004bc8:	200003fc 	.word	0x200003fc
 8004bcc:	20000500 	.word	0x20000500

08004bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be2:	3201      	adds	r2, #1
 8004be4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004be6:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004be8:	681b      	ldr	r3, [r3, #0]
	}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	200003f8 	.word	0x200003f8

08004bf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c08:	4b28      	ldr	r3, [pc, #160]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fbf1 	bl	80033f6 <uxListRemove>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2201      	movs	r2, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43da      	mvns	r2, r3
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c38:	d10a      	bne.n	8004c50 <prvAddCurrentTaskToDelayedList+0x58>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	481a      	ldr	r0, [pc, #104]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c4a:	f7fe fb77 	bl	800333c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c4e:	e026      	b.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d209      	bcs.n	8004c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe fb85 	bl	8003384 <vListInsert>
}
 8004c7a:	e010      	b.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe fb7b 	bl	8003384 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d202      	bcs.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200004fc 	.word	0x200004fc
 8004cac:	200003f8 	.word	0x200003f8
 8004cb0:	20000500 	.word	0x20000500
 8004cb4:	200004e4 	.word	0x200004e4
 8004cb8:	200004b4 	.word	0x200004b4
 8004cbc:	200004b0 	.word	0x200004b0
 8004cc0:	20000518 	.word	0x20000518

08004cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cf4:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <pxPortInitialiseStack+0x64>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b14      	subs	r3, #20
 8004cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f06f 0202 	mvn.w	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b20      	subs	r3, #32
 8004d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	08004d2d 	.word	0x08004d2d

08004d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <prvTaskExitError+0x54>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d3e:	d00a      	beq.n	8004d56 <prvTaskExitError+0x2a>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <prvTaskExitError+0x28>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d6a:	bf00      	nop
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0fc      	beq.n	8004d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	2000000c 	.word	0x2000000c
	...

08004d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <pxCurrentTCBConst2>)
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	6808      	ldr	r0, [r1, #0]
 8004d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	f380 8809 	msr	PSP, r0
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8811 	msr	BASEPRI, r0
 8004daa:	4770      	bx	lr
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst2>:
 8004db0:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004db8:	4808      	ldr	r0, [pc, #32]	; (8004ddc <prvPortStartFirstTask+0x24>)
 8004dba:	6800      	ldr	r0, [r0, #0]
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f380 8808 	msr	MSP, r0
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8814 	msr	CONTROL, r0
 8004dca:	b662      	cpsie	i
 8004dcc:	b661      	cpsie	f
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	df00      	svc	0
 8004dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dda:	bf00      	nop
 8004ddc:	e000ed08 	.word	0xe000ed08

08004de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004de6:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <xPortStartScheduler+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x26>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	613b      	str	r3, [r7, #16]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e06:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3f      	ldr	r2, [pc, #252]	; (8004f08 <xPortStartScheduler+0x128>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x46>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e26:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <xPortStartScheduler+0x12c>)
 8004e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <xPortStartScheduler+0x130>)
 8004e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e54:	e009      	b.n	8004e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d0ef      	beq.n	8004e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1c3 0307 	rsb	r3, r3, #7
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00a      	beq.n	8004e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60bb      	str	r3, [r7, #8]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eaa:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <xPortStartScheduler+0x134>)
 8004eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <xPortStartScheduler+0x138>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ece:	f000 f8dd 	bl	800508c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <xPortStartScheduler+0x13c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ed8:	f000 f8fc 	bl	80050d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ee8:	f7ff ff66 	bl	8004db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eec:	f7ff fa5a 	bl	80043a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004ef0:	f7ff ff1c 	bl	8004d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000ed00 	.word	0xe000ed00
 8004f04:	410fc271 	.word	0x410fc271
 8004f08:	410fc270 	.word	0x410fc270
 8004f0c:	e000e400 	.word	0xe000e400
 8004f10:	20000524 	.word	0x20000524
 8004f14:	20000528 	.word	0x20000528
 8004f18:	e000ed20 	.word	0xe000ed20
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	e000ef34 	.word	0xe000ef34

08004f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10f      	bne.n	8004f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortEnterCritical+0x5c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <vPortEnterCritical+0x4a>
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <vPortExitCritical+0x50>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <vPortExitCritical+0x24>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <vPortExitCritical+0x50>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <vPortExitCritical+0x42>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000000c 	.word	0x2000000c
	...

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f01e 0f10 	tst.w	lr, #16
 8004ff0:	bf08      	it	eq
 8004ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005004:	f380 8811 	msr	BASEPRI, r0
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f7ff f9c8 	bl	80043a4 <vTaskSwitchContext>
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f380 8811 	msr	BASEPRI, r0
 800501c:	bc09      	pop	{r0, r3}
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005026:	f01e 0f10 	tst.w	lr, #16
 800502a:	bf08      	it	eq
 800502c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005030:	f380 8809 	msr	PSP, r0
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst>:
 8005040:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005062:	f7ff f8e1 	bl	8004228 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <SysTick_Handler+0x40>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortSetupTimerInterrupt+0x38>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <vPortSetupTimerInterrupt+0x3c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <vPortSetupTimerInterrupt+0x40>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <vPortSetupTimerInterrupt+0x44>)
 80050aa:	3b01      	subs	r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010
 80050c4:	e000e018 	.word	0xe000e018
 80050c8:	20000000 	.word	0x20000000
 80050cc:	10624dd3 	.word	0x10624dd3
 80050d0:	e000e014 	.word	0xe000e014

080050d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050e4 <vPortEnableVFP+0x10>
 80050d8:	6801      	ldr	r1, [r0, #0]
 80050da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050de:	6001      	str	r1, [r0, #0]
 80050e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050e2:	bf00      	nop
 80050e4:	e000ed88 	.word	0xe000ed88

080050e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050f4:	f7fe ffee 	bl	80040d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050f8:	4b58      	ldr	r3, [pc, #352]	; (800525c <pvPortMalloc+0x174>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005100:	f000 f910 	bl	8005324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005104:	4b56      	ldr	r3, [pc, #344]	; (8005260 <pvPortMalloc+0x178>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 808e 	bne.w	800522e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01d      	beq.n	8005154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005118:	2208      	movs	r2, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	2b00      	cmp	r3, #0
 8005128:	d014      	beq.n	8005154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f023 0307 	bic.w	r3, r3, #7
 8005130:	3308      	adds	r3, #8
 8005132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <pvPortMalloc+0x6c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	617b      	str	r3, [r7, #20]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d069      	beq.n	800522e <pvPortMalloc+0x146>
 800515a:	4b42      	ldr	r3, [pc, #264]	; (8005264 <pvPortMalloc+0x17c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d864      	bhi.n	800522e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005164:	4b40      	ldr	r3, [pc, #256]	; (8005268 <pvPortMalloc+0x180>)
 8005166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <pvPortMalloc+0x180>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800516e:	e004      	b.n	800517a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d903      	bls.n	800518c <pvPortMalloc+0xa4>
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f1      	bne.n	8005170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800518c:	4b33      	ldr	r3, [pc, #204]	; (800525c <pvPortMalloc+0x174>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	429a      	cmp	r2, r3
 8005194:	d04b      	beq.n	800522e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2208      	movs	r2, #8
 800519c:	4413      	add	r3, r2
 800519e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	2308      	movs	r3, #8
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d91f      	bls.n	80051f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <pvPortMalloc+0xf8>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	613b      	str	r3, [r7, #16]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051f2:	69b8      	ldr	r0, [r7, #24]
 80051f4:	f000 f8f8 	bl	80053e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <pvPortMalloc+0x17c>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a18      	ldr	r2, [pc, #96]	; (8005264 <pvPortMalloc+0x17c>)
 8005204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005206:	4b17      	ldr	r3, [pc, #92]	; (8005264 <pvPortMalloc+0x17c>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b18      	ldr	r3, [pc, #96]	; (800526c <pvPortMalloc+0x184>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d203      	bcs.n	800521a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <pvPortMalloc+0x17c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <pvPortMalloc+0x184>)
 8005218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <pvPortMalloc+0x178>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	431a      	orrs	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800522e:	f7fe ff5f 	bl	80040f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <pvPortMalloc+0x16a>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <pvPortMalloc+0x168>
	return pvReturn;
 8005252:	69fb      	ldr	r3, [r7, #28]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20001134 	.word	0x20001134
 8005260:	20001140 	.word	0x20001140
 8005264:	20001138 	.word	0x20001138
 8005268:	2000112c 	.word	0x2000112c
 800526c:	2000113c 	.word	0x2000113c

08005270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d048      	beq.n	8005314 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005282:	2308      	movs	r3, #8
 8005284:	425b      	negs	r3, r3
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4b21      	ldr	r3, [pc, #132]	; (800531c <vPortFree+0xac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <vPortFree+0x44>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <vPortFree+0x62>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60bb      	str	r3, [r7, #8]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <vPortFree+0xac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d019      	beq.n	8005314 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d115      	bne.n	8005314 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <vPortFree+0xac>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052f8:	f7fe feec 	bl	80040d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vPortFree+0xb0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4413      	add	r3, r2
 8005306:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vPortFree+0xb0>)
 8005308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800530a:	6938      	ldr	r0, [r7, #16]
 800530c:	f000 f86c 	bl	80053e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005310:	f7fe feee 	bl	80040f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005314:	bf00      	nop
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20001140 	.word	0x20001140
 8005320:	20001138 	.word	0x20001138

08005324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800532a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800532e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <prvHeapInit+0xac>)
 8005332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3307      	adds	r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <prvHeapInit+0xac>)
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <prvHeapInit+0xb0>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <prvHeapInit+0xb0>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <prvHeapInit+0xb4>)
 8005384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <prvHeapInit+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <prvHeapInit+0xb4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvHeapInit+0xb4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <prvHeapInit+0xb8>)
 80053b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <prvHeapInit+0xbc>)
 80053ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <prvHeapInit+0xc0>)
 80053be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	2000052c 	.word	0x2000052c
 80053d4:	2000112c 	.word	0x2000112c
 80053d8:	20001134 	.word	0x20001134
 80053dc:	2000113c 	.word	0x2000113c
 80053e0:	20001138 	.word	0x20001138
 80053e4:	20001140 	.word	0x20001140

080053e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <prvInsertBlockIntoFreeList+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <prvInsertBlockIntoFreeList+0x14>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d8f7      	bhi.n	80053f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d108      	bne.n	800542a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d118      	bne.n	8005470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d00d      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e008      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e003      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d002      	beq.n	8005486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	2000112c 	.word	0x2000112c
 8005498:	20001134 	.word	0x20001134

0800549c <memset>:
 800549c:	4402      	add	r2, r0
 800549e:	4603      	mov	r3, r0
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d100      	bne.n	80054a6 <memset+0xa>
 80054a4:	4770      	bx	lr
 80054a6:	f803 1b01 	strb.w	r1, [r3], #1
 80054aa:	e7f9      	b.n	80054a0 <memset+0x4>

080054ac <_reclaim_reent>:
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <_reclaim_reent+0xa8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4283      	cmp	r3, r0
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	4604      	mov	r4, r0
 80054b6:	d04b      	beq.n	8005550 <_reclaim_reent+0xa4>
 80054b8:	69c3      	ldr	r3, [r0, #28]
 80054ba:	b143      	cbz	r3, 80054ce <_reclaim_reent+0x22>
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d144      	bne.n	800554c <_reclaim_reent+0xa0>
 80054c2:	69e3      	ldr	r3, [r4, #28]
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	b111      	cbz	r1, 80054ce <_reclaim_reent+0x22>
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f879 	bl	80055c0 <_free_r>
 80054ce:	6961      	ldr	r1, [r4, #20]
 80054d0:	b111      	cbz	r1, 80054d8 <_reclaim_reent+0x2c>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 f874 	bl	80055c0 <_free_r>
 80054d8:	69e1      	ldr	r1, [r4, #28]
 80054da:	b111      	cbz	r1, 80054e2 <_reclaim_reent+0x36>
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 f86f 	bl	80055c0 <_free_r>
 80054e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054e4:	b111      	cbz	r1, 80054ec <_reclaim_reent+0x40>
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f86a 	bl	80055c0 <_free_r>
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	b111      	cbz	r1, 80054f6 <_reclaim_reent+0x4a>
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 f865 	bl	80055c0 <_free_r>
 80054f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054f8:	b111      	cbz	r1, 8005500 <_reclaim_reent+0x54>
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 f860 	bl	80055c0 <_free_r>
 8005500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005502:	b111      	cbz	r1, 800550a <_reclaim_reent+0x5e>
 8005504:	4620      	mov	r0, r4
 8005506:	f000 f85b 	bl	80055c0 <_free_r>
 800550a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800550c:	b111      	cbz	r1, 8005514 <_reclaim_reent+0x68>
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f856 	bl	80055c0 <_free_r>
 8005514:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005516:	b111      	cbz	r1, 800551e <_reclaim_reent+0x72>
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f851 	bl	80055c0 <_free_r>
 800551e:	6a23      	ldr	r3, [r4, #32]
 8005520:	b1b3      	cbz	r3, 8005550 <_reclaim_reent+0xa4>
 8005522:	4620      	mov	r0, r4
 8005524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005528:	4718      	bx	r3
 800552a:	5949      	ldr	r1, [r1, r5]
 800552c:	b941      	cbnz	r1, 8005540 <_reclaim_reent+0x94>
 800552e:	3504      	adds	r5, #4
 8005530:	69e3      	ldr	r3, [r4, #28]
 8005532:	2d80      	cmp	r5, #128	; 0x80
 8005534:	68d9      	ldr	r1, [r3, #12]
 8005536:	d1f8      	bne.n	800552a <_reclaim_reent+0x7e>
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f841 	bl	80055c0 <_free_r>
 800553e:	e7c0      	b.n	80054c2 <_reclaim_reent+0x16>
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f83c 	bl	80055c0 <_free_r>
 8005548:	4631      	mov	r1, r6
 800554a:	e7ef      	b.n	800552c <_reclaim_reent+0x80>
 800554c:	2500      	movs	r5, #0
 800554e:	e7ef      	b.n	8005530 <_reclaim_reent+0x84>
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	2000005c 	.word	0x2000005c

08005558 <__libc_init_array>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	4d0d      	ldr	r5, [pc, #52]	; (8005590 <__libc_init_array+0x38>)
 800555c:	4c0d      	ldr	r4, [pc, #52]	; (8005594 <__libc_init_array+0x3c>)
 800555e:	1b64      	subs	r4, r4, r5
 8005560:	10a4      	asrs	r4, r4, #2
 8005562:	2600      	movs	r6, #0
 8005564:	42a6      	cmp	r6, r4
 8005566:	d109      	bne.n	800557c <__libc_init_array+0x24>
 8005568:	4d0b      	ldr	r5, [pc, #44]	; (8005598 <__libc_init_array+0x40>)
 800556a:	4c0c      	ldr	r4, [pc, #48]	; (800559c <__libc_init_array+0x44>)
 800556c:	f000 f880 	bl	8005670 <_init>
 8005570:	1b64      	subs	r4, r4, r5
 8005572:	10a4      	asrs	r4, r4, #2
 8005574:	2600      	movs	r6, #0
 8005576:	42a6      	cmp	r6, r4
 8005578:	d105      	bne.n	8005586 <__libc_init_array+0x2e>
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005580:	4798      	blx	r3
 8005582:	3601      	adds	r6, #1
 8005584:	e7ee      	b.n	8005564 <__libc_init_array+0xc>
 8005586:	f855 3b04 	ldr.w	r3, [r5], #4
 800558a:	4798      	blx	r3
 800558c:	3601      	adds	r6, #1
 800558e:	e7f2      	b.n	8005576 <__libc_init_array+0x1e>
 8005590:	0800578c 	.word	0x0800578c
 8005594:	0800578c 	.word	0x0800578c
 8005598:	0800578c 	.word	0x0800578c
 800559c:	08005790 	.word	0x08005790

080055a0 <__retarget_lock_acquire_recursive>:
 80055a0:	4770      	bx	lr

080055a2 <__retarget_lock_release_recursive>:
 80055a2:	4770      	bx	lr

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <_free_r>:
 80055c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055c2:	2900      	cmp	r1, #0
 80055c4:	d044      	beq.n	8005650 <_free_r+0x90>
 80055c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ca:	9001      	str	r0, [sp, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f1a1 0404 	sub.w	r4, r1, #4
 80055d2:	bfb8      	it	lt
 80055d4:	18e4      	addlt	r4, r4, r3
 80055d6:	f000 f83f 	bl	8005658 <__malloc_lock>
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <_free_r+0x94>)
 80055dc:	9801      	ldr	r0, [sp, #4]
 80055de:	6813      	ldr	r3, [r2, #0]
 80055e0:	b933      	cbnz	r3, 80055f0 <_free_r+0x30>
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	6014      	str	r4, [r2, #0]
 80055e6:	b003      	add	sp, #12
 80055e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055ec:	f000 b83a 	b.w	8005664 <__malloc_unlock>
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	d908      	bls.n	8005606 <_free_r+0x46>
 80055f4:	6825      	ldr	r5, [r4, #0]
 80055f6:	1961      	adds	r1, r4, r5
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf01      	itttt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	1949      	addeq	r1, r1, r5
 8005602:	6021      	streq	r1, [r4, #0]
 8005604:	e7ed      	b.n	80055e2 <_free_r+0x22>
 8005606:	461a      	mov	r2, r3
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	b10b      	cbz	r3, 8005610 <_free_r+0x50>
 800560c:	42a3      	cmp	r3, r4
 800560e:	d9fa      	bls.n	8005606 <_free_r+0x46>
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	1855      	adds	r5, r2, r1
 8005614:	42a5      	cmp	r5, r4
 8005616:	d10b      	bne.n	8005630 <_free_r+0x70>
 8005618:	6824      	ldr	r4, [r4, #0]
 800561a:	4421      	add	r1, r4
 800561c:	1854      	adds	r4, r2, r1
 800561e:	42a3      	cmp	r3, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	d1e0      	bne.n	80055e6 <_free_r+0x26>
 8005624:	681c      	ldr	r4, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	6053      	str	r3, [r2, #4]
 800562a:	440c      	add	r4, r1
 800562c:	6014      	str	r4, [r2, #0]
 800562e:	e7da      	b.n	80055e6 <_free_r+0x26>
 8005630:	d902      	bls.n	8005638 <_free_r+0x78>
 8005632:	230c      	movs	r3, #12
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	e7d6      	b.n	80055e6 <_free_r+0x26>
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	1961      	adds	r1, r4, r5
 800563c:	428b      	cmp	r3, r1
 800563e:	bf04      	itt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	bf04      	itt	eq
 8005648:	1949      	addeq	r1, r1, r5
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	6054      	str	r4, [r2, #4]
 800564e:	e7ca      	b.n	80055e6 <_free_r+0x26>
 8005650:	b003      	add	sp, #12
 8005652:	bd30      	pop	{r4, r5, pc}
 8005654:	20001280 	.word	0x20001280

08005658 <__malloc_lock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_lock+0x8>)
 800565a:	f7ff bfa1 	b.w	80055a0 <__retarget_lock_acquire_recursive>
 800565e:	bf00      	nop
 8005660:	2000127c 	.word	0x2000127c

08005664 <__malloc_unlock>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__malloc_unlock+0x8>)
 8005666:	f7ff bf9c 	b.w	80055a2 <__retarget_lock_release_recursive>
 800566a:	bf00      	nop
 800566c:	2000127c 	.word	0x2000127c

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

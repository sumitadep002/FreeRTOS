
06_Semaphore_Binary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d90  08006d90  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d90  08006d90  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d90  08006d90  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00001240  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200012ac  200012ac  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001335e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dee  00000000  00000000  0003343d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cd0  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022a5c  00000000  00000000  00037f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000144c1  00000000  00000000  0005a9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc895  00000000  00000000  0006ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ecc  00000000  00000000  0013b734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  00140600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bac 	.word	0x08006bac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006bac 	.word	0x08006bac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000088 	.word	0x20000088
 80002b0:	20000128 	.word	0x20000128

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fbb3 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f855 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8dd 	bl	8000480 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002c6:	f000 f8ab 	bl	8000420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xWorkSemaphore = xSemaphoreCreateBinary();
 80002ca:	2203      	movs	r2, #3
 80002cc:	2100      	movs	r1, #0
 80002ce:	2001      	movs	r0, #1
 80002d0:	f003 fa0e 	bl	80036f0 <xQueueGenericCreate>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <main+0x90>)
 80002d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xWorkQueue = xQueueCreate(1,sizeof(unsigned int));
 80002da:	2200      	movs	r2, #0
 80002dc:	2104      	movs	r1, #4
 80002de:	2001      	movs	r0, #1
 80002e0:	f003 fa06 	bl	80036f0 <xQueueGenericCreate>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <main+0x94>)
 80002e8:	6013      	str	r3, [r2, #0]

  if((xWorkQueue != NULL) && (xWorkSemaphore != NULL))
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <main+0x94>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d01a      	beq.n	8000328 <main+0x74>
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <main+0x90>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d016      	beq.n	8000328 <main+0x74>
  {
	  xTaskCreate(vManagerTask_Handler, "Manager", 128, NULL,3 ,&ManagerTask_Handle );
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <main+0x98>)
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2303      	movs	r3, #3
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	4912      	ldr	r1, [pc, #72]	; (8000350 <main+0x9c>)
 8000308:	4812      	ldr	r0, [pc, #72]	; (8000354 <main+0xa0>)
 800030a:	f003 febd 	bl	8004088 <xTaskCreate>
	  xTaskCreate(vEmployeeTask_Handler, "Employee", 128, NULL, 2, &EmployeeTask_Handle);
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <main+0xa4>)
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	2302      	movs	r3, #2
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	4910      	ldr	r1, [pc, #64]	; (800035c <main+0xa8>)
 800031c:	4810      	ldr	r0, [pc, #64]	; (8000360 <main+0xac>)
 800031e:	f003 feb3 	bl	8004088 <xTaskCreate>
	  vTaskStartScheduler();
 8000322:	f003 fff7 	bl	8004314 <vTaskStartScheduler>
 8000326:	e00b      	b.n	8000340 <main+0x8c>
  }
  else
  {
	  while(1)
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Either semaphore or queue is not created\r\n", sizeof("Either semaphore or queue is not created\r\n")-1, HAL_MAX_DELAY);
 8000328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800032c:	222a      	movs	r2, #42	; 0x2a
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <main+0xb0>)
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <main+0xb4>)
 8000332:	f002 fceb 	bl	8002d0c <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033a:	f000 fba9 	bl	8000a90 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Either semaphore or queue is not created\r\n", sizeof("Either semaphore or queue is not created\r\n")-1, HAL_MAX_DELAY);
 800033e:	e7f3      	b.n	8000328 <main+0x74>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000340:	e7fe      	b.n	8000340 <main+0x8c>
 8000342:	bf00      	nop
 8000344:	200003b0 	.word	0x200003b0
 8000348:	200003bc 	.word	0x200003bc
 800034c:	200003b4 	.word	0x200003b4
 8000350:	08006bc4 	.word	0x08006bc4
 8000354:	080004c9 	.word	0x080004c9
 8000358:	200003b8 	.word	0x200003b8
 800035c:	08006bcc 	.word	0x08006bcc
 8000360:	08000549 	.word	0x08000549
 8000364:	08006bd8 	.word	0x08006bd8
 8000368:	20000328 	.word	0x20000328

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b096      	sub	sp, #88	; 0x58
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f005 fb67 	bl	8005a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 031c 	add.w	r3, r7, #28
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a2:	2302      	movs	r3, #2
 80003a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a6:	2301      	movs	r3, #1
 80003a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003aa:	2310      	movs	r3, #16
 80003ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fddd 	bl	8000f80 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003cc:	f000 f91c 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2302      	movs	r3, #2
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fe05 	bl	8001ffc <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003f8:	f000 f906 	bl	8000608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	4618      	mov	r0, r3
 8000408:	f002 f860 	bl	80024cc <HAL_RCCEx_PeriphCLKConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000412:	f000 f8f9 	bl	8000608 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3758      	adds	r7, #88	; 0x58
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART1_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART1_UART_Init+0x58>)
 800042c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART1_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART1_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART1_UART_Init+0x58>)
 8000464:	f002 fc04 	bl	8002c70 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f8cb 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000328 	.word	0x20000328
 800047c:	40013800 	.word	0x40013800

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_GPIO_Init+0x44>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <MX_GPIO_Init+0x44>)
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_GPIO_Init+0x44>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_GPIO_Init+0x44>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <MX_GPIO_Init+0x44>)
 80004a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_GPIO_Init+0x44>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <vManagerTask_Handler>:

/* USER CODE BEGIN 4 */
void vManagerTask_Handler(void *param)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	unsigned int xWorkTicketId;
	portBASE_TYPE xStatus;
	//initially make semaphore available
	 xSemaphoreGive(xWorkSemaphore);
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <vManagerTask_Handler+0x6c>)
 80004d2:	6818      	ldr	r0, [r3, #0]
 80004d4:	2300      	movs	r3, #0
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	f003 f967 	bl	80037ac <xQueueGenericSend>
	 while(1)
	 {
		 xWorkTicketId = (rand() & 0x1FF);
 80004de:	f005 f965 	bl	80057ac <rand>
 80004e2:	4603      	mov	r3, r0
 80004e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80004e8:	60bb      	str	r3, [r7, #8]

		 xStatus  = xQueueSend(xWorkQueue,&xWorkTicketId,portMAX_DELAY);
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <vManagerTask_Handler+0x70>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	f107 0108 	add.w	r1, r7, #8
 80004f2:	2300      	movs	r3, #0
 80004f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004f8:	f003 f958 	bl	80037ac <xQueueGenericSend>
 80004fc:	60f8      	str	r0, [r7, #12]
		 if(xStatus != pdPASS)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d007      	beq.n	8000514 <vManagerTask_Handler+0x4c>
		 {
			 HAL_UART_Transmit(&huart1, (uint8_t*)"couldn't send to the queue\r\n", sizeof("couldn't send to the queue\r\n")-1, HAL_MAX_DELAY);
 8000504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000508:	221c      	movs	r2, #28
 800050a:	490c      	ldr	r1, [pc, #48]	; (800053c <vManagerTask_Handler+0x74>)
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <vManagerTask_Handler+0x78>)
 800050e:	f002 fbfd 	bl	8002d0c <HAL_UART_Transmit>
 8000512:	e7e4      	b.n	80004de <vManagerTask_Handler+0x16>
		 }
		 else
		 {
			 xSemaphoreGive(xWorkSemaphore);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <vManagerTask_Handler+0x6c>)
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	f003 f945 	bl	80037ac <xQueueGenericSend>
			 taskYIELD();
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <vManagerTask_Handler+0x7c>)
 8000524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	f3bf 8f4f 	dsb	sy
 800052e:	f3bf 8f6f 	isb	sy
		 xWorkTicketId = (rand() & 0x1FF);
 8000532:	e7d4      	b.n	80004de <vManagerTask_Handler+0x16>
 8000534:	200003b0 	.word	0x200003b0
 8000538:	200003bc 	.word	0x200003bc
 800053c:	08006c04 	.word	0x08006c04
 8000540:	20000328 	.word	0x20000328
 8000544:	e000ed04 	.word	0xe000ed04

08000548 <vEmployeeTask_Handler>:
		 }
	 }
}
static void vEmployeeTask_Handler(void *param)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
		portBASE_TYPE xStatus;

		 while(1)
		 {
			 //portMAX_DELAY is timeout which makes the task wait
			 xSemaphoreTake(xWorkSemaphore,portMAX_DELAY);
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <vEmployeeTask_Handler+0x48>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000558:	4618      	mov	r0, r3
 800055a:	f003 fb05 	bl	8003b68 <xQueueSemaphoreTake>

			 xStatus  = xQueueReceive(xWorkQueue,&xWorkTicketId,0);
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <vEmployeeTask_Handler+0x4c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f107 0108 	add.w	r1, r7, #8
 8000566:	2200      	movs	r2, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fa1d 	bl	80039a8 <xQueueReceive>
 800056e:	60f8      	str	r0, [r7, #12]

			 if(xStatus != pdPASS)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d007      	beq.n	8000586 <vEmployeeTask_Handler+0x3e>
			 {
				 HAL_UART_Transmit(&huart1, (uint8_t*)"Employee: Queue is empty nothing to receive\r\n", sizeof("Employee: Queue is empty nothing to receive\r\n")-1, HAL_MAX_DELAY);
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800057a:	222d      	movs	r2, #45	; 0x2d
 800057c:	4906      	ldr	r1, [pc, #24]	; (8000598 <vEmployeeTask_Handler+0x50>)
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <vEmployeeTask_Handler+0x54>)
 8000580:	f002 fbc4 	bl	8002d0c <HAL_UART_Transmit>
 8000584:	e7e4      	b.n	8000550 <vEmployeeTask_Handler+0x8>
			 }
			 else
			 {
				 EmployeeDoWork(xWorkTicketId);
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f809 	bl	80005a0 <EmployeeDoWork>
			 xSemaphoreTake(xWorkSemaphore,portMAX_DELAY);
 800058e:	e7df      	b.n	8000550 <vEmployeeTask_Handler+0x8>
 8000590:	200003b0 	.word	0x200003b0
 8000594:	200003bc 	.word	0x200003bc
 8000598:	08006c24 	.word	0x08006c24
 800059c:	20000328 	.word	0x20000328

080005a0 <EmployeeDoWork>:
			 }
		 }
}
void EmployeeDoWork(unsigned int ticket)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	; 0x40
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Employee: Ticket Id %d\r\n",ticket);
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	490b      	ldr	r1, [pc, #44]	; (80005dc <EmployeeDoWork+0x3c>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 f9e9 	bl	8005988 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe08 	bl	80001d0 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f107 010c 	add.w	r1, r7, #12
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <EmployeeDoWork+0x40>)
 80005ce:	f002 fb9d 	bl	8002d0c <HAL_UART_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3740      	adds	r7, #64	; 0x40
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08006c54 	.word	0x08006c54
 80005e0:	20000328 	.word	0x20000328

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 fa2b 	bl	8000a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40001000 	.word	0x40001000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_MspInit+0x4c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_MspInit+0x4c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x4c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_MspInit+0x4c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_MspInit+0x4c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x4c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	210f      	movs	r1, #15
 800064e:	f06f 0001 	mvn.w	r0, #1
 8000652:	f000 faf9 	bl	8000c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x7c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d127      	bne.n	80006d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <HAL_UART_MspInit+0x80>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <HAL_UART_MspInit+0x80>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_UART_MspInit+0x80>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_UART_MspInit+0x80>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_UART_MspInit+0x80>)
 80006a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_UART_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006b6:	23c0      	movs	r3, #192	; 0xc0
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006c6:	2307      	movs	r3, #7
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_UART_MspInit+0x84>)
 80006d2:	f000 fae3 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	; 0x38
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006fc:	4b33      	ldr	r3, [pc, #204]	; (80007cc <HAL_InitTick+0xe0>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a32      	ldr	r2, [pc, #200]	; (80007cc <HAL_InitTick+0xe0>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b30      	ldr	r3, [pc, #192]	; (80007cc <HAL_InitTick+0xe0>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000714:	f107 0210 	add.w	r2, r7, #16
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fea2 	bl	8002468 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d103      	bne.n	8000736 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800072e:	f001 fe57 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8000732:	6378      	str	r0, [r7, #52]	; 0x34
 8000734:	e004      	b.n	8000740 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000736:	f001 fe53 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 800073a:	4603      	mov	r3, r0
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_InitTick+0xe4>)
 8000744:	fba2 2303 	umull	r2, r3, r2, r3
 8000748:	0c9b      	lsrs	r3, r3, #18
 800074a:	3b01      	subs	r3, #1
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <HAL_InitTick+0xe8>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <HAL_InitTick+0xec>)
 8000752:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <HAL_InitTick+0xe8>)
 8000756:	f240 32e7 	movw	r2, #999	; 0x3e7
 800075a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <HAL_InitTick+0xe8>)
 800075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000760:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_InitTick+0xe8>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_InitTick+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_InitTick+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <HAL_InitTick+0xe8>)
 8000776:	f001 ffdf 	bl	8002738 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000784:	2b00      	cmp	r3, #0
 8000786:	d11b      	bne.n	80007c0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <HAL_InitTick+0xe8>)
 800078a:	f002 f837 	bl	80027fc <HAL_TIM_Base_Start_IT>
 800078e:	4603      	mov	r3, r0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000798:	2b00      	cmp	r3, #0
 800079a:	d111      	bne.n	80007c0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800079c:	2036      	movs	r0, #54	; 0x36
 800079e:	f000 fa6f 	bl	8000c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d808      	bhi.n	80007ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	2036      	movs	r0, #54	; 0x36
 80007ae:	f000 fa4b 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_InitTick+0xf0>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	e002      	b.n	80007c0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3738      	adds	r7, #56	; 0x38
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	431bde83 	.word	0x431bde83
 80007d4:	200003c0 	.word	0x200003c0
 80007d8:	40001000 	.word	0x40001000
 80007dc:	20000004 	.word	0x20000004

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <TIM6_DAC1_IRQHandler+0x10>)
 8000812:	f002 f84f 	bl	80028b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200003c0 	.word	0x200003c0

08000820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <_kill>:

int _kill(int pid, int sig)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800083a:	f005 f9ad 	bl	8005b98 <__errno>
 800083e:	4603      	mov	r3, r0
 8000840:	2216      	movs	r2, #22
 8000842:	601a      	str	r2, [r3, #0]
  return -1;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_exit>:

void _exit (int status)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffe7 	bl	8000830 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000862:	e7fe      	b.n	8000862 <_exit+0x12>

08000864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e00a      	b.n	800088c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000876:	f3af 8000 	nop.w
 800087a:	4601      	mov	r1, r0
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	b2ca      	uxtb	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf0      	blt.n	8000876 <_read+0x12>
  }

  return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e009      	b.n	80008c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf1      	blt.n	80008b0 <_write+0x12>
  }
  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:

int _close(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f005 f912 	bl	8005b98 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20003000 	.word	0x20003000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	2000040c 	.word	0x2000040c
 80009a8:	200012b0 	.word	0x200012b0

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	; (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f005 f8d1 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a02:	f7ff fc57 	bl	80002b4 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a08:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a14:	08006d98 	.word	0x08006d98
  ldr r2, =_sbss
 8000a18:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a1c:	200012ac 	.word	0x200012ac

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x28>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f8fc 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f7ff fe56 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fde8 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000410 	.word	0x20000410

08000a78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000410 	.word	0x20000410

08000a90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff4c 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff61 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb1 	bl	8000bcc <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff80 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff54 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e14e      	b.n	8000f4a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 8140 	beq.w	8000f44 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d005      	beq.n	8000cdc <HAL_GPIO_Init+0x40>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d130      	bne.n	8000d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d12:	2201      	movs	r2, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	f003 0201 	and.w	r2, r3, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d017      	beq.n	8000d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	6939      	ldr	r1, [r7, #16]
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0203 	and.w	r2, r3, #3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 809a 	beq.w	8000f44 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a54      	ldr	r2, [pc, #336]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e28:	4a50      	ldr	r2, [pc, #320]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x1e0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_GPIO_Init+0x2d4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1dc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a45      	ldr	r2, [pc, #276]	; (8000f74 <HAL_GPIO_Init+0x2d8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1d8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <HAL_GPIO_Init+0x2dc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1d4>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e006      	b.n	8000e7e <HAL_GPIO_Init+0x1e2>
 8000e70:	2305      	movs	r3, #5
 8000e72:	e004      	b.n	8000e7e <HAL_GPIO_Init+0x1e2>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0x1e2>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_GPIO_Init+0x1e2>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	f002 0203 	and.w	r2, r2, #3
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	4093      	lsls	r3, r2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8e:	4937      	ldr	r1, [pc, #220]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9c:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_GPIO_Init+0x2e0>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f47f aea9 	bne.w	8000cac <HAL_GPIO_Init+0x10>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	48000400 	.word	0x48000400
 8000f74:	48000800 	.word	0x48000800
 8000f78:	48000c00 	.word	0x48000c00
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f90:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f001 b823 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 817d 	beq.w	80012b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fbc:	4bbc      	ldr	r3, [pc, #752]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc8:	4bb9      	ldr	r3, [pc, #740]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d15c      	bne.n	800108e <HAL_RCC_OscConfig+0x10e>
 8000fd4:	4bb6      	ldr	r3, [pc, #728]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d155      	bne.n	800108e <HAL_RCC_OscConfig+0x10e>
 8000fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ff6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <HAL_RCC_OscConfig+0x94>
 800100e:	4ba8      	ldr	r3, [pc, #672]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	e015      	b.n	8001040 <HAL_RCC_OscConfig+0xc0>
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001030:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800103c:	4b9c      	ldr	r3, [pc, #624]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001044:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001048:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800104c:	fa92 f2a2 	rbit	r2, r2
 8001050:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001054:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001058:	fab2 f282 	clz	r2, r2
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 811f 	beq.w	80012b4 <HAL_RCC_OscConfig+0x334>
 8001076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 8116 	bne.w	80012b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	f000 bfaf 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d106      	bne.n	80010ae <HAL_RCC_OscConfig+0x12e>
 80010a0:	4b83      	ldr	r3, [pc, #524]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a82      	ldr	r2, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e036      	b.n	800111c <HAL_RCC_OscConfig+0x19c>
 80010ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x158>
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a7b      	ldr	r2, [pc, #492]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a78      	ldr	r2, [pc, #480]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e021      	b.n	800111c <HAL_RCC_OscConfig+0x19c>
 80010d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x184>
 80010ea:	4b71      	ldr	r3, [pc, #452]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a70      	ldr	r2, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6e      	ldr	r3, [pc, #440]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6d      	ldr	r2, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0x19c>
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a66      	ldr	r2, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	f023 020f 	bic.w	r2, r3, #15
 8001124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	495f      	ldr	r1, [pc, #380]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001132:	4313      	orrs	r3, r2
 8001134:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d059      	beq.n	80011fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fc97 	bl	8000a78 <HAL_GetTick>
 800114a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	e00a      	b.n	8001166 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fc92 	bl	8000a78 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d902      	bls.n	8001166 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	f000 bf43 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 8001166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800117a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	095b      	lsrs	r3, r3, #5
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <HAL_RCC_OscConfig+0x218>
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	e015      	b.n	80011c4 <HAL_RCC_OscConfig+0x244>
 8001198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ab      	beq.n	8001150 <HAL_RCC_OscConfig+0x1d0>
 80011f8:	e05d      	b.n	80012b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc3d 	bl	8000a78 <HAL_GetTick>
 80011fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	e00a      	b.n	800121a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fc38 	bl	8000a78 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d902      	bls.n	800121a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	f000 bee9 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 800121a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800122e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x2cc>
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	e015      	b.n	8001278 <HAL_RCC_OscConfig+0x2f8>
 800124c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001250:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001264:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001268:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_RCC_OscConfig+0x330>)
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001280:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001284:	fa92 f2a2 	rbit	r2, r2
 8001288:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800128c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001290:	fab2 f282 	clz	r2, r2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f042 0220 	orr.w	r2, r2, #32
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	f002 021f 	and.w	r2, r2, #31
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ab      	bne.n	8001204 <HAL_RCC_OscConfig+0x284>
 80012ac:	e003      	b.n	80012b6 <HAL_RCC_OscConfig+0x336>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 817d 	beq.w	80015c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012cc:	4ba6      	ldr	r3, [pc, #664]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012d8:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d172      	bne.n	80013ca <HAL_RCC_OscConfig+0x44a>
 80012e4:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d16c      	bne.n	80013ca <HAL_RCC_OscConfig+0x44a>
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001302:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <HAL_RCC_OscConfig+0x3a0>
 800131a:	4b93      	ldr	r3, [pc, #588]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	e013      	b.n	8001348 <HAL_RCC_OscConfig+0x3c8>
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001338:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001344:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800134e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800135a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <HAL_RCC_OscConfig+0x410>
 800137a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d002      	beq.n	8001390 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	f000 be2e 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	21f8      	movs	r1, #248	; 0xf8
 80013a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013ae:	fa91 f1a1 	rbit	r1, r1
 80013b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013ba:	fab1 f181 	clz	r1, r1
 80013be:	b2c9      	uxtb	r1, r1
 80013c0:	408b      	lsls	r3, r1
 80013c2:	4969      	ldr	r1, [pc, #420]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c8:	e0fd      	b.n	80015c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8088 	beq.w	80014ec <HAL_RCC_OscConfig+0x56c>
 80013dc:	2301      	movs	r3, #1
 80013de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb36 	bl	8000a78 <HAL_GetTick>
 800140c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff fb31 	bl	8000a78 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d902      	bls.n	8001428 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	f000 bde2 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800143a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <HAL_RCC_OscConfig+0x4d8>
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	e013      	b.n	8001480 <HAL_RCC_OscConfig+0x500>
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001470:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001474:	fa93 f3a3 	rbit	r3, r3
 8001478:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2202      	movs	r2, #2
 8001482:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001486:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001492:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001496:	fab2 f282 	clz	r2, r2
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	f042 0220 	orr.w	r2, r2, #32
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f002 021f 	and.w	r2, r2, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0af      	beq.n	8001412 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	21f8      	movs	r1, #248	; 0xf8
 80014c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014d0:	fa91 f1a1 	rbit	r1, r1
 80014d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014dc:	fab1 f181 	clz	r1, r1
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	408b      	lsls	r3, r1
 80014e4:	4920      	ldr	r1, [pc, #128]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
 80014ea:	e06c      	b.n	80015c6 <HAL_RCC_OscConfig+0x646>
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2300      	movs	r3, #0
 8001516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff faae 	bl	8000a78 <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff faa9 	bl	8000a78 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d902      	bls.n	8001538 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	f000 bd5a 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800154a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d104      	bne.n	800156c <HAL_RCC_OscConfig+0x5ec>
 8001562:	4b01      	ldr	r3, [pc, #4]	; (8001568 <HAL_RCC_OscConfig+0x5e8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	e015      	b.n	8001594 <HAL_RCC_OscConfig+0x614>
 8001568:	40021000 	.word	0x40021000
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001590:	4bc8      	ldr	r3, [pc, #800]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2202      	movs	r2, #2
 8001596:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800159a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015aa:	fab2 f282 	clz	r2, r2
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f002 021f 	and.w	r2, r2, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ad      	bne.n	8001522 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8110 	beq.w	80017fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d079      	beq.n	80016e0 <HAL_RCC_OscConfig+0x760>
 80015ec:	2301      	movs	r3, #1
 80015ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4bab      	ldr	r3, [pc, #684]	; (80018b8 <HAL_RCC_OscConfig+0x938>)
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	461a      	mov	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fa2f 	bl	8000a78 <HAL_GetTick>
 800161a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fa2a 	bl	8000a78 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d902      	bls.n	8001636 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	f000 bcdb 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800168e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 8001692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800169c:	2102      	movs	r1, #2
 800169e:	6019      	str	r1, [r3, #0]
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f1a3 	rbit	r1, r3
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016b6:	6019      	str	r1, [r3, #0]
  return result;
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0a0      	beq.n	8001620 <HAL_RCC_OscConfig+0x6a0>
 80016de:	e08d      	b.n	80017fc <HAL_RCC_OscConfig+0x87c>
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001702:	601a      	str	r2, [r3, #0]
  return result;
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800170c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x938>)
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	461a      	mov	r2, r3
 800171e:	2300      	movs	r3, #0
 8001720:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff f9a9 	bl	8000a78 <HAL_GetTick>
 8001726:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff f9a4 	bl	8000a78 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d902      	bls.n	8001742 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	f000 bc55 	b.w	8001fec <HAL_RCC_OscConfig+0x106c>
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800174a:	2202      	movs	r2, #2
 800174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176e:	2202      	movs	r2, #2
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017ba:	2102      	movs	r1, #2
 80017bc:	6019      	str	r1, [r3, #0]
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f1a3 	rbit	r1, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017d4:	6019      	str	r1, [r3, #0]
  return result;
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d197      	bne.n	800172c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 81a1 	beq.w	8001b54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d116      	bne.n	8001852 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182e:	61d3      	str	r3, [r2, #28]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800184a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_OscConfig+0x93c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x93c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a16      	ldr	r2, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x93c>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff f905 	bl	8000a78 <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	e009      	b.n	8001888 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7ff f900 	bl	8000a78 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e3b1      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x93c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ef      	beq.n	8001874 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_OscConfig+0x940>
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <HAL_RCC_OscConfig+0x934>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6213      	str	r3, [r2, #32]
 80018b0:	e03c      	b.n	800192c <HAL_RCC_OscConfig+0x9ac>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	10908120 	.word	0x10908120
 80018bc:	40007000 	.word	0x40007000
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x96a>
 80018d0:	4bc1      	ldr	r3, [pc, #772]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4ac0      	ldr	r2, [pc, #768]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	4bbe      	ldr	r3, [pc, #760]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4abd      	ldr	r2, [pc, #756]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	f023 0304 	bic.w	r3, r3, #4
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e020      	b.n	800192c <HAL_RCC_OscConfig+0x9ac>
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x994>
 80018fa:	4bb7      	ldr	r3, [pc, #732]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4ab6      	ldr	r2, [pc, #728]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4bb4      	ldr	r3, [pc, #720]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4ab3      	ldr	r2, [pc, #716]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0x9ac>
 8001914:	4bb0      	ldr	r3, [pc, #704]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4aaf      	ldr	r2, [pc, #700]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	4bad      	ldr	r3, [pc, #692]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4aac      	ldr	r2, [pc, #688]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8081 	beq.w	8001a40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff f89b 	bl	8000a78 <HAL_GetTick>
 8001942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f896 	bl	8000a78 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e345      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019a6:	601a      	str	r2, [r3, #0]
  return result;
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0xa4c>
 80019c6:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	e013      	b.n	80019f4 <HAL_RCC_OscConfig+0xa74>
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019fc:	2102      	movs	r1, #2
 80019fe:	6011      	str	r1, [r2, #0]
 8001a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fa92 f1a2 	rbit	r1, r2
 8001a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a16:	6011      	str	r1, [r2, #0]
  return result;
 8001a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fab2 f282 	clz	r2, r2
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f002 021f 	and.w	r2, r2, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d084      	beq.n	8001948 <HAL_RCC_OscConfig+0x9c8>
 8001a3e:	e07f      	b.n	8001b40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f81a 	bl	8000a78 <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f815 	bl	8000a78 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e2c4      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a8e:	2202      	movs	r2, #2
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001aa8:	601a      	str	r2, [r3, #0]
  return result;
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ab2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0xb4e>
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	e013      	b.n	8001af6 <HAL_RCC_OscConfig+0xb76>
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001afe:	2102      	movs	r1, #2
 8001b00:	6011      	str	r1, [r2, #0]
 8001b02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	fa92 f1a2 	rbit	r1, r2
 8001b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b18:	6011      	str	r1, [r2, #0]
  return result;
 8001b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d184      	bne.n	8001a4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8242 	beq.w	8001fea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_RCC_OscConfig+0xc58>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	f000 8213 	beq.w	8001f9a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	f040 8162 	bne.w	8001e4a <HAL_RCC_OscConfig+0xeca>
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001baa:	601a      	str	r2, [r3, #0]
  return result;
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe ff54 	bl	8000a78 <HAL_GetTick>
 8001bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	e00c      	b.n	8001bf0 <HAL_RCC_OscConfig+0xc70>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7fe ff4c 	bl	8000a78 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1fd      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0xcba>
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e027      	b.n	8001c8a <HAL_RCC_OscConfig+0xd0a>
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b9c      	ldr	r3, [pc, #624]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fa92 f1a2 	rbit	r1, r2
 8001ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001caa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cae:	6011      	str	r1, [r2, #0]
  return result;
 8001cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d182      	bne.n	8001bdc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	497f      	ldr	r1, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d22:	601a      	str	r2, [r3, #0]
  return result;
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fe98 	bl	8000a78 <HAL_GetTick>
 8001d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe fe93 	bl	8000a78 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e144      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d86:	601a      	str	r2, [r3, #0]
  return result;
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0xe2c>
 8001da6:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e027      	b.n	8001dfc <HAL_RCC_OscConfig+0xe7c>
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e08:	6011      	str	r1, [r2, #0]
 8001e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	fa92 f1a2 	rbit	r1, r2
 8001e18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e20:	6011      	str	r1, [r2, #0]
  return result;
 8001e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	fab2 f282 	clz	r2, r2
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f042 0220 	orr.w	r2, r2, #32
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	f002 021f 	and.w	r2, r2, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d082      	beq.n	8001d4e <HAL_RCC_OscConfig+0xdce>
 8001e48:	e0cf      	b.n	8001fea <HAL_RCC_OscConfig+0x106a>
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e6e:	601a      	str	r2, [r3, #0]
  return result;
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe fdf2 	bl	8000a78 <HAL_GetTick>
 8001e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	e009      	b.n	8001eae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe fded 	bl	8000a78 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e09e      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ed2:	601a      	str	r2, [r3, #0]
  return result;
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001edc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d104      	bne.n	8001efc <HAL_RCC_OscConfig+0xf7c>
 8001ef2:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <HAL_RCC_OscConfig+0xf78>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e029      	b.n	8001f4c <HAL_RCC_OscConfig+0xfcc>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x1078>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f50:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f58:	6011      	str	r1, [r2, #0]
 8001f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f5e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fa92 f1a2 	rbit	r1, r2
 8001f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f6c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f70:	6011      	str	r1, [r2, #0]
  return result;
 8001f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f76:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f042 0220 	orr.w	r2, r2, #32
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f002 021f 	and.w	r2, r2, #31
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d180      	bne.n	8001e9a <HAL_RCC_OscConfig+0xf1a>
 8001f98:	e027      	b.n	8001fea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e01e      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x1078>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09e      	sub	sp, #120	; 0x78
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e162      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b90      	ldr	r3, [pc, #576]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b8d      	ldr	r3, [pc, #564]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	498b      	ldr	r1, [pc, #556]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e14a      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b82      	ldr	r3, [pc, #520]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	497f      	ldr	r1, [pc, #508]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80dc 	beq.w	8002228 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d13c      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xf6>
 8002078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xa6>
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e00f      	b.n	80020c2 <HAL_RCC_ClockConfig+0xc6>
 80020a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d17b      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0f3      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d13c      	bne.n	8002174 <HAL_RCC_ClockConfig+0x178>
 80020fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_ClockConfig+0x128>
 800211e:	4b4f      	ldr	r3, [pc, #316]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e00f      	b.n	8002144 <HAL_RCC_ClockConfig+0x148>
 8002124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002128:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	647b      	str	r3, [r7, #68]	; 0x44
 8002132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
 8002138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002148:	63ba      	str	r2, [r7, #56]	; 0x38
 800214a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f002 021f 	and.w	r2, r2, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13a      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b2      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x1a0>
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1bc>
 800219c:	2302      	movs	r3, #2
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	61ba      	str	r2, [r7, #24]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	617a      	str	r2, [r7, #20]
  return result;
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e079      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fc3e 	bl	8000a78 <HAL_GetTick>
 80021fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fc3a 	bl	8000a78 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e061      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_ClockConfig+0x260>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d214      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4906      	ldr	r1, [pc, #24]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e040      	b.n	80022da <HAL_RCC_ClockConfig+0x2de>
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	491a      	ldr	r1, [pc, #104]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800229e:	f000 f829 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_RCC_ClockConfig+0x2e8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	22f0      	movs	r2, #240	; 0xf0
 80022ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	fa92 f2a2 	rbit	r2, r2
 80022b6:	60fa      	str	r2, [r7, #12]
  return result;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	fab2 f282 	clz	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	40d3      	lsrs	r3, r2
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x2ec>)
 80022c4:	5cd3      	ldrb	r3, [r2, r3]
 80022c6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_RCC_ClockConfig+0x2f0>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_ClockConfig+0x2f4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fa0a 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3778      	adds	r7, #120	; 0x78
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08006c78 	.word	0x08006c78
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800230e:	4b29      	ldr	r3, [pc, #164]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e03c      	b.n	800239e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002326:	623b      	str	r3, [r7, #32]
      break;
 8002328:	e03c      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002330:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002334:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	607a      	str	r2, [r7, #4]
  return result;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	220f      	movs	r2, #15
 8002358:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	fa92 f2a2 	rbit	r2, r2
 8002360:	60fa      	str	r2, [r7, #12]
  return result;
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	40d3      	lsrs	r3, r2
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	fbb2 f2f3 	udiv	r2, r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e004      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	623b      	str	r3, [r7, #32]
      break;
 800239c:	e002      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023a0:	623b      	str	r3, [r7, #32]
      break;
 80023a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	372c      	adds	r7, #44	; 0x2c
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	08006c90 	.word	0x08006c90
 80023c0:	08006ca0 	.word	0x08006ca0
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023e6:	f7ff ffef 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	fa92 f2a2 	rbit	r2, r2
 8002400:	603a      	str	r2, [r7, #0]
  return result;
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	40d3      	lsrs	r3, r2
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x40>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08006c88 	.word	0x08006c88

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800242a:	f7ff ffcd 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002438:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800243c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	603a      	str	r2, [r7, #0]
  return result;
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	40d3      	lsrs	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	08006c88 	.word	0x08006c88

08002468 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	220f      	movs	r2, #15
 8002476:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_RCC_GetClockConfig+0x60>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0207 	and.w	r2, r3, #7
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b092      	sub	sp, #72	; 0x48
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80cd 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b8e      	ldr	r3, [pc, #568]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10e      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a8a      	ldr	r2, [pc, #552]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b85      	ldr	r3, [pc, #532]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d118      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a81      	ldr	r2, [pc, #516]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002532:	f7fe faa1 	bl	8000a78 <HAL_GetTick>
 8002536:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	e008      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fa9d 	bl	8000a78 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b64      	cmp	r3, #100	; 0x64
 8002546:	d901      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ea      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b78      	ldr	r3, [pc, #480]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002558:	4b74      	ldr	r3, [pc, #464]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d07d      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002572:	429a      	cmp	r2, r3
 8002574:	d076      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	461a      	mov	r2, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d045      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fa4e 	bl	8000a78 <HAL_GetTick>
 80025dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fa4a 	bl	8000a78 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e095      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80025f6:	2302      	movs	r3, #2
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	2302      	movs	r3, #2
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	61fb      	str	r3, [r7, #28]
  return result;
 800260e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d102      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002624:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	e007      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800262a:	2302      	movs	r3, #2
 800262c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2202      	movs	r2, #2
 800263c:	613a      	str	r2, [r7, #16]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	fa92 f2a2 	rbit	r2, r2
 8002644:	60fa      	str	r2, [r7, #12]
  return result;
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0bd      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	492e      	ldr	r1, [pc, #184]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002672:	4313      	orrs	r3, r2
 8002674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b2b      	ldr	r3, [pc, #172]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f023 0210 	bic.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	491a      	ldr	r1, [pc, #104]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	4913      	ldr	r1, [pc, #76]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	490b      	ldr	r1, [pc, #44]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3748      	adds	r7, #72	; 0x48
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	10908100 	.word	0x10908100

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e049      	b.n	80027de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f841 	bl	80027e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 f9e4 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e040      	b.n	8002896 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00e      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x58>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d009      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x58>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIM_Base_Start_IT+0xac>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <HAL_TIM_Base_Start_IT+0x58>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_TIM_Base_Start_IT+0xb0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d115      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b06      	cmp	r3, #6
 8002864:	d015      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x96>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d011      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e008      	b.n	8002892 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e000      	b.n	8002894 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	00010007 	.word	0x00010007

080028b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0202 	mvn.w	r2, #2
 80028e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f905 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8f7 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f908 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0204 	mvn.w	r2, #4
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8db 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8cd 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f8de 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b08      	cmp	r3, #8
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0208 	mvn.w	r2, #8
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2204      	movs	r2, #4
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8b1 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8a3 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8b4 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0210 	mvn.w	r2, #16
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f887 	bl	8002b06 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f879 	bl	8002af2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f88a 	bl	8002b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0201 	mvn.w	r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd fdd6 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8f2 	bl	8002c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a72:	d10e      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d107      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8e5 	bl	8002c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d10e      	bne.n	8002abe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f838 	bl	8002b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d10e      	bne.n	8002aea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0220 	mvn.w	r2, #32
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8a5 	bl	8002c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a32      	ldr	r2, [pc, #200]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a2f      	ldr	r2, [pc, #188]	; (8002c24 <TIM_Base_SetConfig+0xe0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d108      	bne.n	8002b7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_Base_SetConfig+0x6a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d00f      	beq.n	8002bae <TIM_Base_SetConfig+0x6a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <TIM_Base_SetConfig+0xe0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x6a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <TIM_Base_SetConfig+0xe4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x6a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <TIM_Base_SetConfig+0xe8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x6a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <TIM_Base_SetConfig+0xec>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <TIM_Base_SetConfig+0xdc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <TIM_Base_SetConfig+0xc0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <TIM_Base_SetConfig+0xe4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <TIM_Base_SetConfig+0xc0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <TIM_Base_SetConfig+0xe8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_Base_SetConfig+0xc0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <TIM_Base_SetConfig+0xec>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	615a      	str	r2, [r3, #20]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800

08002c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e040      	b.n	8002d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fce6 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8b6 	bl	8002e20 <UART_SetConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e022      	b.n	8002d04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9e0 	bl	800308c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa67 	bl	80031d0 <UART_CheckIdleState>
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d178      	bne.n	8002e16 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Transmit+0x24>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e071      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2221      	movs	r2, #33	; 0x21
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fd fe99 	bl	8000a78 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x68>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e030      	b.n	8002de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fac9 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03c      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	b292      	uxth	r2, r2
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	3302      	adds	r3, #2
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	e008      	b.n	8002dce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1c8      	bne.n	8002d7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa92 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e005      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b8a      	ldr	r3, [pc, #552]	; (8003074 <UART_SetConfig+0x254>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	6979      	ldr	r1, [r7, #20]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a78      	ldr	r2, [pc, #480]	; (8003078 <UART_SetConfig+0x258>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d120      	bne.n	8002ede <UART_SetConfig+0xbe>
 8002e9c:	4b77      	ldr	r3, [pc, #476]	; (800307c <UART_SetConfig+0x25c>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d817      	bhi.n	8002ed8 <UART_SetConfig+0xb8>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0x90>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002ecd 	.word	0x08002ecd
 8002eb8:	08002ed3 	.word	0x08002ed3
 8002ebc:	08002ec7 	.word	0x08002ec7
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e01d      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e01a      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e017      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e014      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002ed8:	2310      	movs	r3, #16
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e011      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a67      	ldr	r2, [pc, #412]	; (8003080 <UART_SetConfig+0x260>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d102      	bne.n	8002eee <UART_SetConfig+0xce>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e009      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a64      	ldr	r2, [pc, #400]	; (8003084 <UART_SetConfig+0x264>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d102      	bne.n	8002efe <UART_SetConfig+0xde>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e001      	b.n	8002f02 <UART_SetConfig+0xe2>
 8002efe:	2310      	movs	r3, #16
 8002f00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0a:	d15a      	bne.n	8002fc2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d827      	bhi.n	8002f62 <UART_SetConfig+0x142>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <UART_SetConfig+0xf8>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08002f63 	.word	0x08002f63
 8002f28:	08002f53 	.word	0x08002f53
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f63 	.word	0x08002f63
 8002f34:	08002f63 	.word	0x08002f63
 8002f38:	08002f5b 	.word	0x08002f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7ff fa50 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8002f40:	61b8      	str	r0, [r7, #24]
        break;
 8002f42:	e013      	b.n	8002f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f44:	f7ff fa6e 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <UART_SetConfig+0x268>)
 8002f4e:	61bb      	str	r3, [r7, #24]
        break;
 8002f50:	e00c      	b.n	8002f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7ff f9cf 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8002f56:	61b8      	str	r0, [r7, #24]
        break;
 8002f58:	e008      	b.n	8002f6c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5e:	61bb      	str	r3, [r7, #24]
        break;
 8002f60:	e004      	b.n	8002f6c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	77bb      	strb	r3, [r7, #30]
        break;
 8002f6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d074      	beq.n	800305c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	005a      	lsls	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d916      	bls.n	8002fbc <UART_SetConfig+0x19c>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d212      	bcs.n	8002fbc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	89fa      	ldrh	r2, [r7, #14]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e04f      	b.n	800305c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77bb      	strb	r3, [r7, #30]
 8002fc0:	e04c      	b.n	800305c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d828      	bhi.n	800301a <UART_SetConfig+0x1fa>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <UART_SetConfig+0x1b0>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08002ffd 	.word	0x08002ffd
 8002fd8:	08003005 	.word	0x08003005
 8002fdc:	0800301b 	.word	0x0800301b
 8002fe0:	0800300b 	.word	0x0800300b
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	0800301b 	.word	0x0800301b
 8002fec:	0800301b 	.word	0x0800301b
 8002ff0:	08003013 	.word	0x08003013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f9f4 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	61b8      	str	r0, [r7, #24]
        break;
 8002ffa:	e013      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ffc:	f7ff fa12 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003000:	61b8      	str	r0, [r7, #24]
        break;
 8003002:	e00f      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <UART_SetConfig+0x268>)
 8003006:	61bb      	str	r3, [r7, #24]
        break;
 8003008:	e00c      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300a:	f7ff f973 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 800300e:	61b8      	str	r0, [r7, #24]
        break;
 8003010:	e008      	b.n	8003024 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e004      	b.n	8003024 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	77bb      	strb	r3, [r7, #30]
        break;
 8003022:	bf00      	nop
    }

    if (pclk != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d018      	beq.n	800305c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	085a      	lsrs	r2, r3, #1
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	441a      	add	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d909      	bls.n	8003058 <UART_SetConfig+0x238>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d205      	bcs.n	8003058 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	e001      	b.n	800305c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003068:	7fbb      	ldrb	r3, [r7, #30]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	efff69f3 	.word	0xefff69f3
 8003078:	40013800 	.word	0x40013800
 800307c:	40021000 	.word	0x40021000
 8003080:	40004400 	.word	0x40004400
 8003084:	40004800 	.word	0x40004800
 8003088:	007a1200 	.word	0x007a1200

0800308c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318a:	d10a      	bne.n	80031a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b098      	sub	sp, #96	; 0x60
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e0:	f7fd fc4a 	bl	8000a78 <HAL_GetTick>
 80031e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d12e      	bne.n	8003252 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	2200      	movs	r2, #0
 80031fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f88c 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	653b      	str	r3, [r7, #80]	; 0x50
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e062      	b.n	8003318 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d149      	bne.n	80032f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f856 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03c      	beq.n	80032f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	623b      	str	r3, [r7, #32]
   return(result);
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 800329a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e6      	bne.n	800327a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3308      	adds	r3, #8
 80032ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	617b      	str	r3, [r7, #20]
   return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e011      	b.n	8003318 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3758      	adds	r7, #88	; 0x58
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	e049      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003338:	d045      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fd fb9d 	bl	8000a78 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <UART_WaitOnFlagUntilTimeout+0x30>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e048      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d031      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d110      	bne.n	8003392 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2208      	movs	r2, #8
 8003376:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f838 	bl	80033ee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2208      	movs	r2, #8
 8003382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e029      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a0:	d111      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f81e 	bl	80033ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e00f      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0a6      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b095      	sub	sp, #84	; 0x54
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003414:	643b      	str	r3, [r7, #64]	; 0x40
 8003416:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800341a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e6      	bne.n	80033f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	61fb      	str	r3, [r7, #28]
   return(result);
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	2b01      	cmp	r3, #1
 8003462:	d118      	bne.n	8003496 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	60bb      	str	r3, [r7, #8]
   return(result);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6979      	ldr	r1, [r7, #20]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	613b      	str	r3, [r7, #16]
   return(result);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e6      	bne.n	8003464 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034aa:	bf00      	nop
 80034ac:	3754      	adds	r7, #84	; 0x54
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f103 0208 	add.w	r2, r3, #8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f103 0208 	add.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f103 0208 	add.w	r2, r3, #8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356e:	d103      	bne.n	8003578 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e00c      	b.n	8003592 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3308      	adds	r3, #8
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e002      	b.n	8003586 <vListInsert+0x2e>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	429a      	cmp	r2, r3
 8003590:	d2f6      	bcs.n	8003580 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6852      	ldr	r2, [r2, #4]
 80035ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d103      	bne.n	80035fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	1e5a      	subs	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800364a:	f001 fdf3 	bl	8005234 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	3b01      	subs	r3, #1
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	441a      	add	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d114      	bne.n	80036ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f889 	bl	80047c4 <xTaskRemoveFromEventList>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <xQueueGenericReset+0xcc>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	e009      	b.n	80036de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3310      	adds	r3, #16
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fef1 	bl	80034b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feec 	bl	80034b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036de:	f001 fdd9 	bl	8005294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036e2:	2301      	movs	r3, #1
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	613b      	str	r3, [r7, #16]
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003720:	2300      	movs	r3, #0
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	e004      	b.n	8003730 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3348      	adds	r3, #72	; 0x48
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fe5f 	bl	80053f8 <pvPortMalloc>
 800373a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00f      	beq.n	8003762 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f805 	bl	800376c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003762:	69bb      	ldr	r3, [r7, #24]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379a:	2101      	movs	r1, #1
 800379c:	69b8      	ldr	r0, [r7, #24]
 800379e:	f7ff ff3f 	bl	8003620 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ba:	2300      	movs	r3, #0
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericSend+0x32>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <xQueueGenericSend+0x40>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <xQueueGenericSend+0x44>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <xQueueGenericSend+0x46>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xQueueGenericSend+0x60>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x6e>
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <xQueueGenericSend+0x72>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueGenericSend+0x74>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xQueueGenericSend+0x8e>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	623b      	str	r3, [r7, #32]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800383a:	f001 f989 	bl	8004b50 <xTaskGetSchedulerState>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xQueueGenericSend+0x9e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <xQueueGenericSend+0xa2>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <xQueueGenericSend+0xa4>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueGenericSend+0xbe>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61fb      	str	r3, [r7, #28]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800386a:	f001 fce3 	bl	8005234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <xQueueGenericSend+0xd4>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d129      	bne.n	80038d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003886:	f000 fa93 	bl	8003db0 <prvCopyDataToQueue>
 800388a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff93 	bl	80047c4 <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038a4:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <xQueueGenericSend+0x1f8>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	e00a      	b.n	80038cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <xQueueGenericSend+0x1f8>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038cc:	f001 fce2 	bl	8005294 <vPortExitCritical>
				return pdPASS;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e063      	b.n	800399c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038da:	f001 fcdb 	bl	8005294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	e05c      	b.n	800399c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ffcb 	bl	8004888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038f6:	f001 fccd 	bl	8005294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038fa:	f000 fd75 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038fe:	f001 fc99 	bl	8005234 <vPortEnterCritical>
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390e:	d103      	bne.n	8003918 <xQueueGenericSend+0x16c>
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391e:	b25b      	sxtb	r3, r3
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003924:	d103      	bne.n	800392e <xQueueGenericSend+0x182>
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392e:	f001 fcb1 	bl	8005294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003932:	1d3a      	adds	r2, r7, #4
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 ffba 	bl	80048b4 <xTaskCheckForTimeOut>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d124      	bne.n	8003990 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003948:	f000 fb2a 	bl	8003fa0 <prvIsQueueFull>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d018      	beq.n	8003984 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	3310      	adds	r3, #16
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ff0e 	bl	800477c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003962:	f000 fab5 	bl	8003ed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003966:	f000 fd4d 	bl	8004404 <xTaskResumeAll>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f af7c 	bne.w	800386a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <xQueueGenericSend+0x1f8>)
 8003974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	e772      	b.n	800386a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003986:	f000 faa3 	bl	8003ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800398a:	f000 fd3b 	bl	8004404 <xTaskResumeAll>
 800398e:	e76c      	b.n	800386a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003992:	f000 fa9d 	bl	8003ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003996:	f000 fd35 	bl	8004404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800399a:	2300      	movs	r3, #0
		}
	}
}
 800399c:	4618      	mov	r0, r3
 800399e:	3738      	adds	r7, #56	; 0x38
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xQueueReceive+0x30>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	623b      	str	r3, [r7, #32]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueReceive+0x3e>
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueReceive+0x42>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueReceive+0x44>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueReceive+0x5e>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61fb      	str	r3, [r7, #28]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a06:	f001 f8a3 	bl	8004b50 <xTaskGetSchedulerState>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <xQueueReceive+0x6e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueReceive+0x72>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueReceive+0x74>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueReceive+0x8e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61bb      	str	r3, [r7, #24]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a36:	f001 fbfd 	bl	8005234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01f      	beq.n	8003a86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4a:	f000 fa1b 	bl	8003e84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00f      	beq.n	8003a7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	3310      	adds	r3, #16
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 feae 	bl	80047c4 <xTaskRemoveFromEventList>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <xQueueReceive+0x1bc>)
 8003a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a7e:	f001 fc09 	bl	8005294 <vPortExitCritical>
				return pdPASS;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e069      	b.n	8003b5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a8c:	f001 fc02 	bl	8005294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e062      	b.n	8003b5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a9a:	f107 0310 	add.w	r3, r7, #16
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fef2 	bl	8004888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa8:	f001 fbf4 	bl	8005294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aac:	f000 fc9c 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ab0:	f001 fbc0 	bl	8005234 <vPortEnterCritical>
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aba:	b25b      	sxtb	r3, r3
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac0:	d103      	bne.n	8003aca <xQueueReceive+0x122>
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad0:	b25b      	sxtb	r3, r3
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad6:	d103      	bne.n	8003ae0 <xQueueReceive+0x138>
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae0:	f001 fbd8 	bl	8005294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae4:	1d3a      	adds	r2, r7, #4
 8003ae6:	f107 0310 	add.w	r3, r7, #16
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fee1 	bl	80048b4 <xTaskCheckForTimeOut>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d123      	bne.n	8003b40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afa:	f000 fa3b 	bl	8003f74 <prvIsQueueEmpty>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fe35 	bl	800477c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b14:	f000 f9dc 	bl	8003ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b18:	f000 fc74 	bl	8004404 <xTaskResumeAll>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d189      	bne.n	8003a36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <xQueueReceive+0x1bc>)
 8003b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	e780      	b.n	8003a36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b36:	f000 f9cb 	bl	8003ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b3a:	f000 fc63 	bl	8004404 <xTaskResumeAll>
 8003b3e:	e77a      	b.n	8003a36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b42:	f000 f9c5 	bl	8003ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b46:	f000 fc5d 	bl	8004404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4c:	f000 fa12 	bl	8003f74 <prvIsQueueEmpty>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f43f af6f 	beq.w	8003a36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3730      	adds	r7, #48	; 0x30
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08e      	sub	sp, #56	; 0x38
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	623b      	str	r3, [r7, #32]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	61fb      	str	r3, [r7, #28]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb8:	f000 ffca 	bl	8004b50 <xTaskGetSchedulerState>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <xQueueSemaphoreTake+0x60>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <xQueueSemaphoreTake+0x64>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <xQueueSemaphoreTake+0x66>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	61bb      	str	r3, [r7, #24]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003be8:	f001 fb24 	bl	8005234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d024      	beq.n	8003c42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003c08:	f001 f96c 	bl	8004ee4 <pvTaskIncrementMutexHeldCount>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00f      	beq.n	8003c3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	3310      	adds	r3, #16
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fdd0 	bl	80047c4 <xTaskRemoveFromEventList>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c2a:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <xQueueSemaphoreTake+0x214>)
 8003c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c3a:	f001 fb2b 	bl	8005294 <vPortExitCritical>
				return pdPASS;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e097      	b.n	8003d72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d111      	bne.n	8003c6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	617b      	str	r3, [r7, #20]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c64:	f001 fb16 	bl	8005294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e082      	b.n	8003d72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c72:	f107 030c 	add.w	r3, r7, #12
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fe06 	bl	8004888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c80:	f001 fb08 	bl	8005294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c84:	f000 fbb0 	bl	80043e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c88:	f001 fad4 	bl	8005234 <vPortEnterCritical>
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c98:	d103      	bne.n	8003ca2 <xQueueSemaphoreTake+0x13a>
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d103      	bne.n	8003cb8 <xQueueSemaphoreTake+0x150>
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb8:	f001 faec 	bl	8005294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cbc:	463a      	mov	r2, r7
 8003cbe:	f107 030c 	add.w	r3, r7, #12
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fdf5 	bl	80048b4 <xTaskCheckForTimeOut>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d132      	bne.n	8003d36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cd2:	f000 f94f 	bl	8003f74 <prvIsQueueEmpty>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d026      	beq.n	8003d2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ce4:	f001 faa6 	bl	8005234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 ff4d 	bl	8004b8c <xTaskPriorityInherit>
 8003cf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cf4:	f001 face 	bl	8005294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	3324      	adds	r3, #36	; 0x24
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fd3b 	bl	800477c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d08:	f000 f8e2 	bl	8003ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d0c:	f000 fb7a 	bl	8004404 <xTaskResumeAll>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f47f af68 	bne.w	8003be8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <xQueueSemaphoreTake+0x214>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	e75e      	b.n	8003be8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d2c:	f000 f8d0 	bl	8003ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d30:	f000 fb68 	bl	8004404 <xTaskResumeAll>
 8003d34:	e758      	b.n	8003be8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d38:	f000 f8ca 	bl	8003ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3c:	f000 fb62 	bl	8004404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d42:	f000 f917 	bl	8003f74 <prvIsQueueEmpty>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f43f af4d 	beq.w	8003be8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d54:	f001 fa6e 	bl	8005234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d5a:	f000 f811 	bl	8003d80 <prvGetDisinheritPriorityAfterTimeout>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f81c 	bl	8004da4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d6c:	f001 fa92 	bl	8005294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3738      	adds	r7, #56	; 0x38
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e001      	b.n	8003da2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003da2:	68fb      	ldr	r3, [r7, #12]
	}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10d      	bne.n	8003dea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14d      	bne.n	8003e72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 ff5c 	bl	8004c98 <xTaskPriorityDisinherit>
 8003de0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e043      	b.n	8003e72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d119      	bne.n	8003e24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6898      	ldr	r0, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	f001 fef8 	bl	8005bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	441a      	add	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d32b      	bcc.n	8003e72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	e026      	b.n	8003e72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68d8      	ldr	r0, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	f001 fede 	bl	8005bf0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	425b      	negs	r3, r3
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d105      	bne.n	8003e72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d303      	bcc.n	8003eb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6838      	ldr	r0, [r7, #0]
 8003ec4:	f001 fe94 	bl	8005bf0 <memcpy>
	}
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ed8:	f001 f9ac 	bl	8005234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee4:	e011      	b.n	8003f0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fc66 	bl	80047c4 <xTaskRemoveFromEventList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003efe:	f000 fd3b 	bl	8004978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dce9      	bgt.n	8003ee6 <prvUnlockQueue+0x16>
 8003f12:	e000      	b.n	8003f16 <prvUnlockQueue+0x46>
					break;
 8003f14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f1e:	f001 f9b9 	bl	8005294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f22:	f001 f987 	bl	8005234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f2e:	e011      	b.n	8003f54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fc41 	bl	80047c4 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f48:	f000 fd16 	bl	8004978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dce9      	bgt.n	8003f30 <prvUnlockQueue+0x60>
 8003f5c:	e000      	b.n	8003f60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	22ff      	movs	r2, #255	; 0xff
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f68:	f001 f994 	bl	8005294 <vPortExitCritical>
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f7c:	f001 f95a 	bl	8005234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e001      	b.n	8003f92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f92:	f001 f97f 	bl	8005294 <vPortExitCritical>

	return xReturn;
 8003f96:	68fb      	ldr	r3, [r7, #12]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa8:	f001 f944 	bl	8005234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d102      	bne.n	8003fbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e001      	b.n	8003fc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fc2:	f001 f967 	bl	8005294 <vPortExitCritical>

	return xReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	; 0x38
 8003fd4:	af04      	add	r7, sp, #16
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	623b      	str	r3, [r7, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xTaskCreateStatic+0x46>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61fb      	str	r3, [r7, #28]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004016:	23a0      	movs	r3, #160	; 0xa0
 8004018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2ba0      	cmp	r3, #160	; 0xa0
 800401e:	d00a      	beq.n	8004036 <xTaskCreateStatic+0x66>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61bb      	str	r3, [r7, #24]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01e      	beq.n	800407a <xTaskCreateStatic+0xaa>
 800403c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01b      	beq.n	800407a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004054:	2300      	movs	r3, #0
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	9302      	str	r3, [sp, #8]
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f851 	bl	8004114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004074:	f000 f8e4 	bl	8004240 <prvAddNewTaskToReadyList>
 8004078:	e001      	b.n	800407e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800407e:	697b      	ldr	r3, [r7, #20]
	}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	; 0x30
 800408c:	af04      	add	r7, sp, #16
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f9ab 	bl	80053f8 <pvPortMalloc>
 80040a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040aa:	20a0      	movs	r0, #160	; 0xa0
 80040ac:	f001 f9a4 	bl	80053f8 <pvPortMalloc>
 80040b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
 80040be:	e005      	b.n	80040cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f001 fa5d 	bl	8005580 <vPortFree>
 80040c6:	e001      	b.n	80040cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d017      	beq.n	8004102 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	2300      	movs	r3, #0
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	9302      	str	r3, [sp, #8]
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f80f 	bl	8004114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040f6:	69f8      	ldr	r0, [r7, #28]
 80040f8:	f000 f8a2 	bl	8004240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e002      	b.n	8004108 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004106:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004108:	69bb      	ldr	r3, [r7, #24]
	}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800412c:	3b01      	subs	r3, #1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	617b      	str	r3, [r7, #20]
}
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	e012      	b.n	8004188 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	7819      	ldrb	r1, [r3, #0]
 800416a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	3334      	adds	r3, #52	; 0x34
 8004172:	460a      	mov	r2, r1
 8004174:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d9e9      	bls.n	8004162 <prvInitialiseNewTask+0x4e>
 800418e:	e000      	b.n	8004192 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004190:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	2b06      	cmp	r3, #6
 800419e:	d901      	bls.n	80041a4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041a0:	2306      	movs	r3, #6
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f99b 	bl	80034f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	3318      	adds	r3, #24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff f996 	bl	80034f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f1c3 0207 	rsb	r2, r3, #7
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	334c      	adds	r3, #76	; 0x4c
 80041f4:	224c      	movs	r2, #76	; 0x4c
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fc28 	bl	8005a4e <memset>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <prvInitialiseNewTask+0x120>)
 8004202:	651a      	str	r2, [r3, #80]	; 0x50
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <prvInitialiseNewTask+0x124>)
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	4a0b      	ldr	r2, [pc, #44]	; (800423c <prvInitialiseNewTask+0x128>)
 800420e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	69b8      	ldr	r0, [r7, #24]
 8004216:	f000 fedf 	bl	8004fd8 <pxPortInitialiseStack>
 800421a:	4602      	mov	r2, r0
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800422c:	bf00      	nop
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20001160 	.word	0x20001160
 8004238:	200011c8 	.word	0x200011c8
 800423c:	20001230 	.word	0x20001230

08004240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004248:	f000 fff4 	bl	8005234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800424c:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <prvAddNewTaskToReadyList+0xb8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <prvAddNewTaskToReadyList+0xb8>)
 8004254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <prvAddNewTaskToReadyList+0xbc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <prvAddNewTaskToReadyList+0xbc>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <prvAddNewTaskToReadyList+0xb8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d110      	bne.n	800428e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800426c:	f000 fba8 	bl	80049c0 <prvInitialiseTaskLists>
 8004270:	e00d      	b.n	800428e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <prvAddNewTaskToReadyList+0xc0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <prvAddNewTaskToReadyList+0xbc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	429a      	cmp	r2, r3
 8004286:	d802      	bhi.n	800428e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004288:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <prvAddNewTaskToReadyList+0xbc>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800428e:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <prvAddNewTaskToReadyList+0xc4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <prvAddNewTaskToReadyList+0xc4>)
 8004296:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <prvAddNewTaskToReadyList+0xc8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <prvAddNewTaskToReadyList+0xc8>)
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <prvAddNewTaskToReadyList+0xcc>)
 80042b8:	441a      	add	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7ff f925 	bl	8003510 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042c6:	f000 ffe5 	bl	8005294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <prvAddNewTaskToReadyList+0xc0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00e      	beq.n	80042f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <prvAddNewTaskToReadyList+0xbc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	429a      	cmp	r2, r3
 80042de:	d207      	bcs.n	80042f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <prvAddNewTaskToReadyList+0xd0>)
 80042e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000514 	.word	0x20000514
 80042fc:	20000414 	.word	0x20000414
 8004300:	20000520 	.word	0x20000520
 8004304:	20000530 	.word	0x20000530
 8004308:	2000051c 	.word	0x2000051c
 800430c:	20000418 	.word	0x20000418
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004322:	463a      	mov	r2, r7
 8004324:	1d39      	adds	r1, r7, #4
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f7fb ffa8 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	9202      	str	r2, [sp, #8]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	2300      	movs	r3, #0
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	460a      	mov	r2, r1
 8004342:	4921      	ldr	r1, [pc, #132]	; (80043c8 <vTaskStartScheduler+0xb4>)
 8004344:	4821      	ldr	r0, [pc, #132]	; (80043cc <vTaskStartScheduler+0xb8>)
 8004346:	f7ff fe43 	bl	8003fd0 <xTaskCreateStatic>
 800434a:	4603      	mov	r3, r0
 800434c:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <vTaskStartScheduler+0xbc>)
 800434e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <vTaskStartScheduler+0xbc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004358:	2301      	movs	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e001      	b.n	8004362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11b      	bne.n	80043a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	613b      	str	r3, [r7, #16]
}
 800437a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800437c:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <vTaskStartScheduler+0xc0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	334c      	adds	r3, #76	; 0x4c
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <vTaskStartScheduler+0xc4>)
 8004384:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <vTaskStartScheduler+0xc8>)
 8004388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800438c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <vTaskStartScheduler+0xcc>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <vTaskStartScheduler+0xd0>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800439a:	f000 fea9 	bl	80050f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800439e:	e00e      	b.n	80043be <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a6:	d10a      	bne.n	80043be <vTaskStartScheduler+0xaa>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60fb      	str	r3, [r7, #12]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <vTaskStartScheduler+0xa8>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	08006c70 	.word	0x08006c70
 80043cc:	08004991 	.word	0x08004991
 80043d0:	20000538 	.word	0x20000538
 80043d4:	20000414 	.word	0x20000414
 80043d8:	20000068 	.word	0x20000068
 80043dc:	20000534 	.word	0x20000534
 80043e0:	20000520 	.word	0x20000520
 80043e4:	20000518 	.word	0x20000518

080043e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vTaskSuspendAll+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a03      	ldr	r2, [pc, #12]	; (8004400 <vTaskSuspendAll+0x18>)
 80043f4:	6013      	str	r3, [r2, #0]
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	2000053c 	.word	0x2000053c

08004404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004412:	4b41      	ldr	r3, [pc, #260]	; (8004518 <xTaskResumeAll+0x114>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xTaskResumeAll+0x2c>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004430:	f000 ff00 	bl	8005234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004434:	4b38      	ldr	r3, [pc, #224]	; (8004518 <xTaskResumeAll+0x114>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	4a37      	ldr	r2, [pc, #220]	; (8004518 <xTaskResumeAll+0x114>)
 800443c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800443e:	4b36      	ldr	r3, [pc, #216]	; (8004518 <xTaskResumeAll+0x114>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d161      	bne.n	800450a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <xTaskResumeAll+0x118>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d05d      	beq.n	800450a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800444e:	e02e      	b.n	80044ae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <xTaskResumeAll+0x11c>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3318      	adds	r3, #24
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff f8b4 	bl	80035ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff f8af 	bl	80035ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	2201      	movs	r2, #1
 8004472:	409a      	lsls	r2, r3
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <xTaskResumeAll+0x120>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4313      	orrs	r3, r2
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <xTaskResumeAll+0x120>)
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4a27      	ldr	r2, [pc, #156]	; (8004528 <xTaskResumeAll+0x124>)
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3304      	adds	r3, #4
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f7ff f83b 	bl	8003510 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449e:	4b23      	ldr	r3, [pc, #140]	; (800452c <xTaskResumeAll+0x128>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <xTaskResumeAll+0x12c>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <xTaskResumeAll+0x11c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1cc      	bne.n	8004450 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044bc:	f000 fb22 	bl	8004b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <xTaskResumeAll+0x130>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d010      	beq.n	80044ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044cc:	f000 f836 	bl	800453c <xTaskIncrementTick>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <xTaskResumeAll+0x12c>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f1      	bne.n	80044cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <xTaskResumeAll+0x130>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <xTaskResumeAll+0x12c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <xTaskResumeAll+0x134>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800450a:	f000 fec3 	bl	8005294 <vPortExitCritical>

	return xAlreadyYielded;
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	2000053c 	.word	0x2000053c
 800451c:	20000514 	.word	0x20000514
 8004520:	200004d4 	.word	0x200004d4
 8004524:	2000051c 	.word	0x2000051c
 8004528:	20000418 	.word	0x20000418
 800452c:	20000414 	.word	0x20000414
 8004530:	20000528 	.word	0x20000528
 8004534:	20000524 	.word	0x20000524
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <xTaskIncrementTick+0x150>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 808d 	bne.w	800466a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004550:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <xTaskIncrementTick+0x154>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <xTaskIncrementTick+0x154>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d120      	bne.n	80045a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004564:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <xTaskIncrementTick+0x158>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <xTaskIncrementTick+0x48>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	603b      	str	r3, [r7, #0]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xTaskIncrementTick+0x46>
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <xTaskIncrementTick+0x158>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b43      	ldr	r3, [pc, #268]	; (8004698 <xTaskIncrementTick+0x15c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a41      	ldr	r2, [pc, #260]	; (8004694 <xTaskIncrementTick+0x158>)
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4a41      	ldr	r2, [pc, #260]	; (8004698 <xTaskIncrementTick+0x15c>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b40      	ldr	r3, [pc, #256]	; (800469c <xTaskIncrementTick+0x160>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	4a3f      	ldr	r2, [pc, #252]	; (800469c <xTaskIncrementTick+0x160>)
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	f000 faaf 	bl	8004b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045a6:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d34d      	bcc.n	800464c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <xTaskIncrementTick+0x158>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <xTaskIncrementTick+0x82>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xTaskIncrementTick+0x84>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ca:	601a      	str	r2, [r3, #0]
					break;
 80045cc:	e03e      	b.n	800464c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <xTaskIncrementTick+0x158>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d203      	bcs.n	80045ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045e6:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <xTaskIncrementTick+0x164>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6013      	str	r3, [r2, #0]
						break;
 80045ec:	e02e      	b.n	800464c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ffe9 	bl	80035ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3318      	adds	r3, #24
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe ffe0 	bl	80035ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <xTaskIncrementTick+0x168>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <xTaskIncrementTick+0x168>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <xTaskIncrementTick+0x16c>)
 800462a:	441a      	add	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7fe ff6c 	bl	8003510 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <xTaskIncrementTick+0x170>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d3b4      	bcc.n	80045b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004646:	2301      	movs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464a:	e7b1      	b.n	80045b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <xTaskIncrementTick+0x170>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4915      	ldr	r1, [pc, #84]	; (80046a8 <xTaskIncrementTick+0x16c>)
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d907      	bls.n	8004674 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e004      	b.n	8004674 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <xTaskIncrementTick+0x174>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <xTaskIncrementTick+0x174>)
 8004672:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xTaskIncrementTick+0x178>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2000053c 	.word	0x2000053c
 8004690:	20000518 	.word	0x20000518
 8004694:	200004cc 	.word	0x200004cc
 8004698:	200004d0 	.word	0x200004d0
 800469c:	2000052c 	.word	0x2000052c
 80046a0:	20000534 	.word	0x20000534
 80046a4:	2000051c 	.word	0x2000051c
 80046a8:	20000418 	.word	0x20000418
 80046ac:	20000414 	.word	0x20000414
 80046b0:	20000524 	.word	0x20000524
 80046b4:	20000528 	.word	0x20000528

080046b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <vTaskSwitchContext+0xac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <vTaskSwitchContext+0xb0>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046cc:	e044      	b.n	8004758 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <vTaskSwitchContext+0xb0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <vTaskSwitchContext+0xb4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f1c3 031f 	rsb	r3, r3, #31
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	4921      	ldr	r1, [pc, #132]	; (8004770 <vTaskSwitchContext+0xb8>)
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskSwitchContext+0x5a>
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a14      	ldr	r2, [pc, #80]	; (8004770 <vTaskSwitchContext+0xb8>)
 8004720:	4413      	add	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3308      	adds	r3, #8
 8004736:	429a      	cmp	r2, r3
 8004738:	d104      	bne.n	8004744 <vTaskSwitchContext+0x8c>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <vTaskSwitchContext+0xbc>)
 800474c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <vTaskSwitchContext+0xbc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	334c      	adds	r3, #76	; 0x4c
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <vTaskSwitchContext+0xc0>)
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	2000053c 	.word	0x2000053c
 8004768:	20000528 	.word	0x20000528
 800476c:	2000051c 	.word	0x2000051c
 8004770:	20000418 	.word	0x20000418
 8004774:	20000414 	.word	0x20000414
 8004778:	20000068 	.word	0x20000068

0800477c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <vTaskPlaceOnEventList+0x44>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3318      	adds	r3, #24
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fe fed4 	bl	8003558 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047b0:	2101      	movs	r1, #1
 80047b2:	6838      	ldr	r0, [r7, #0]
 80047b4:	f000 fbaa 	bl	8004f0c <prvAddCurrentTaskToDelayedList>
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000414 	.word	0x20000414

080047c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60fb      	str	r3, [r7, #12]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3318      	adds	r3, #24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fe fee8 	bl	80035ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <xTaskRemoveFromEventList+0xac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11c      	bne.n	800483c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fedf 	bl	80035ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2201      	movs	r2, #1
 8004812:	409a      	lsls	r2, r3
 8004814:	4b17      	ldr	r3, [pc, #92]	; (8004874 <xTaskRemoveFromEventList+0xb0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <xTaskRemoveFromEventList+0xb0>)
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4a13      	ldr	r2, [pc, #76]	; (8004878 <xTaskRemoveFromEventList+0xb4>)
 800482c:	441a      	add	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fe fe6b 	bl	8003510 <vListInsertEnd>
 800483a:	e005      	b.n	8004848 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3318      	adds	r3, #24
 8004840:	4619      	mov	r1, r3
 8004842:	480e      	ldr	r0, [pc, #56]	; (800487c <xTaskRemoveFromEventList+0xb8>)
 8004844:	f7fe fe64 	bl	8003510 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <xTaskRemoveFromEventList+0xbc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d905      	bls.n	8004862 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <xTaskRemoveFromEventList+0xc0>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e001      	b.n	8004866 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	2000053c 	.word	0x2000053c
 8004874:	2000051c 	.word	0x2000051c
 8004878:	20000418 	.word	0x20000418
 800487c:	200004d4 	.word	0x200004d4
 8004880:	20000414 	.word	0x20000414
 8004884:	20000528 	.word	0x20000528

08004888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <vTaskInternalSetTimeOutState+0x24>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <vTaskInternalSetTimeOutState+0x28>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	2000052c 	.word	0x2000052c
 80048b0:	20000518 	.word	0x20000518

080048b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	613b      	str	r3, [r7, #16]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048f6:	f000 fc9d 	bl	8005234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <xTaskCheckForTimeOut+0xbc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d102      	bne.n	800491a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e023      	b.n	8004962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <xTaskCheckForTimeOut+0xc0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d007      	beq.n	8004936 <xTaskCheckForTimeOut+0x82>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e015      	b.n	8004962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	429a      	cmp	r2, r3
 800493e:	d20b      	bcs.n	8004958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff9b 	bl	8004888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e004      	b.n	8004962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f000 fc97 	bl	8005294 <vPortExitCritical>

	return xReturn;
 8004966:	69fb      	ldr	r3, [r7, #28]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000518 	.word	0x20000518
 8004974:	2000052c 	.word	0x2000052c

08004978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <vTaskMissedYield+0x14>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000528 	.word	0x20000528

08004990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004998:	f000 f852 	bl	8004a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <prvIdleTask+0x28>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d9f9      	bls.n	8004998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <prvIdleTask+0x2c>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049b4:	e7f0      	b.n	8004998 <prvIdleTask+0x8>
 80049b6:	bf00      	nop
 80049b8:	20000418 	.word	0x20000418
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	e00c      	b.n	80049e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <prvInitialiseTaskLists+0x60>)
 80049d8:	4413      	add	r3, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fd6b 	bl	80034b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d9ef      	bls.n	80049cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049ec:	480d      	ldr	r0, [pc, #52]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 80049ee:	f7fe fd62 	bl	80034b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049f2:	480d      	ldr	r0, [pc, #52]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 80049f4:	f7fe fd5f 	bl	80034b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049f8:	480c      	ldr	r0, [pc, #48]	; (8004a2c <prvInitialiseTaskLists+0x6c>)
 80049fa:	f7fe fd5c 	bl	80034b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049fe:	480c      	ldr	r0, [pc, #48]	; (8004a30 <prvInitialiseTaskLists+0x70>)
 8004a00:	f7fe fd59 	bl	80034b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a04:	480b      	ldr	r0, [pc, #44]	; (8004a34 <prvInitialiseTaskLists+0x74>)
 8004a06:	f7fe fd56 	bl	80034b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <prvInitialiseTaskLists+0x78>)
 8004a0c:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <prvInitialiseTaskLists+0x64>)
 8004a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvInitialiseTaskLists+0x7c>)
 8004a12:	4a05      	ldr	r2, [pc, #20]	; (8004a28 <prvInitialiseTaskLists+0x68>)
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000418 	.word	0x20000418
 8004a24:	200004a4 	.word	0x200004a4
 8004a28:	200004b8 	.word	0x200004b8
 8004a2c:	200004d4 	.word	0x200004d4
 8004a30:	200004e8 	.word	0x200004e8
 8004a34:	20000500 	.word	0x20000500
 8004a38:	200004cc 	.word	0x200004cc
 8004a3c:	200004d0 	.word	0x200004d0

08004a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a46:	e019      	b.n	8004a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a48:	f000 fbf4 	bl	8005234 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <prvCheckTasksWaitingTermination+0x50>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fdb6 	bl	80035ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <prvCheckTasksWaitingTermination+0x54>)
 8004a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a72:	f000 fc0f 	bl	8005294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f810 	bl	8004a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <prvCheckTasksWaitingTermination+0x58>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e1      	bne.n	8004a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200004e8 	.word	0x200004e8
 8004a94:	20000514 	.word	0x20000514
 8004a98:	200004fc 	.word	0x200004fc

08004a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	334c      	adds	r3, #76	; 0x4c
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 ffe9 	bl	8005a80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd5f 	bl	8005580 <vPortFree>
				vPortFree( pxTCB );
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd5c 	bl	8005580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ac8:	e018      	b.n	8004afc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d103      	bne.n	8004adc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fd53 	bl	8005580 <vPortFree>
	}
 8004ada:	e00f      	b.n	8004afc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d00a      	beq.n	8004afc <prvDeleteTCB+0x60>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60fb      	str	r3, [r7, #12]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <prvDeleteTCB+0x5e>
	}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <prvResetNextTaskUnblockTime+0x44>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <prvResetNextTaskUnblockTime+0x14>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <prvResetNextTaskUnblockTime+0x16>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <prvResetNextTaskUnblockTime+0x48>)
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b26:	e008      	b.n	8004b3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <prvResetNextTaskUnblockTime+0x44>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <prvResetNextTaskUnblockTime+0x48>)
 8004b38:	6013      	str	r3, [r2, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	200004cc 	.word	0x200004cc
 8004b4c:	20000534 	.word	0x20000534

08004b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <xTaskGetSchedulerState+0x34>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	e008      	b.n	8004b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <xTaskGetSchedulerState+0x38>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	e001      	b.n	8004b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b76:	687b      	ldr	r3, [r7, #4]
	}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	20000520 	.word	0x20000520
 8004b88:	2000053c 	.word	0x2000053c

08004b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d06e      	beq.n	8004c80 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <xTaskPriorityInherit+0x100>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d25e      	bcs.n	8004c6e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db06      	blt.n	8004bc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <xTaskPriorityInherit+0x100>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	f1c3 0207 	rsb	r2, r3, #7
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6959      	ldr	r1, [r3, #20]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <xTaskPriorityInherit+0x104>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	d101      	bne.n	8004be2 <xTaskPriorityInherit+0x56>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xTaskPriorityInherit+0x58>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d03a      	beq.n	8004c5e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe fcec 	bl	80035ca <uxListRemove>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d115      	bne.n	8004c24 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfc:	4924      	ldr	r1, [pc, #144]	; (8004c90 <xTaskPriorityInherit+0x104>)
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <xTaskPriorityInherit+0x98>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	2201      	movs	r2, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <xTaskPriorityInherit+0x108>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <xTaskPriorityInherit+0x108>)
 8004c22:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <xTaskPriorityInherit+0x100>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	2201      	movs	r2, #1
 8004c34:	409a      	lsls	r2, r3
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <xTaskPriorityInherit+0x108>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <xTaskPriorityInherit+0x108>)
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <xTaskPriorityInherit+0x104>)
 8004c4e:	441a      	add	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fe fc5a 	bl	8003510 <vListInsertEnd>
 8004c5c:	e004      	b.n	8004c68 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <xTaskPriorityInherit+0x100>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e008      	b.n	8004c80 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <xTaskPriorityInherit+0x100>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d201      	bcs.n	8004c80 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c80:	68fb      	ldr	r3, [r7, #12]
	}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000414 	.word	0x20000414
 8004c90:	20000418 	.word	0x20000418
 8004c94:	2000051c 	.word	0x2000051c

08004c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d06e      	beq.n	8004d8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cae:	4b3a      	ldr	r3, [pc, #232]	; (8004d98 <xTaskPriorityDisinherit+0x100>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d00a      	beq.n	8004cce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d044      	beq.n	8004d8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d140      	bne.n	8004d8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fc5b 	bl	80035ca <uxListRemove>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	491f      	ldr	r1, [pc, #124]	; (8004d9c <xTaskPriorityDisinherit+0x104>)
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xTaskPriorityDisinherit+0xae>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	2201      	movs	r2, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <xTaskPriorityDisinherit+0x108>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4013      	ands	r3, r2
 8004d42:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <xTaskPriorityDisinherit+0x108>)
 8004d44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f1c3 0207 	rsb	r2, r3, #7
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	2201      	movs	r2, #1
 8004d60:	409a      	lsls	r2, r3
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <xTaskPriorityDisinherit+0x108>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <xTaskPriorityDisinherit+0x108>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <xTaskPriorityDisinherit+0x104>)
 8004d7a:	441a      	add	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f7fe fbc4 	bl	8003510 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d8c:	697b      	ldr	r3, [r7, #20]
	}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000414 	.word	0x20000414
 8004d9c:	20000418 	.word	0x20000418
 8004da0:	2000051c 	.word	0x2000051c

08004da4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8088 	beq.w	8004ece <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60fb      	str	r3, [r7, #12]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d902      	bls.n	8004dec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e002      	b.n	8004df2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d068      	beq.n	8004ece <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d163      	bne.n	8004ece <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e06:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d10a      	bne.n	8004e26 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60bb      	str	r3, [r7, #8]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	db04      	blt.n	8004e44 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f1c3 0207 	rsb	r2, r3, #7
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	6959      	ldr	r1, [r3, #20]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4a22      	ldr	r2, [pc, #136]	; (8004edc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e54:	4413      	add	r3, r2
 8004e56:	4299      	cmp	r1, r3
 8004e58:	d101      	bne.n	8004e5e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d034      	beq.n	8004ece <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fbae 	bl	80035ca <uxListRemove>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d115      	bne.n	8004ea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e78:	4918      	ldr	r1, [pc, #96]	; (8004edc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	2201      	movs	r2, #1
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43da      	mvns	r2, r3
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004e9e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ec0:	441a      	add	r2, r3
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe fb21 	bl	8003510 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ece:	bf00      	nop
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000414 	.word	0x20000414
 8004edc:	20000418 	.word	0x20000418
 8004ee0:	2000051c 	.word	0x2000051c

08004ee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef6:	3201      	adds	r2, #1
 8004ef8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004efc:	681b      	ldr	r3, [r3, #0]
	}
 8004efe:	4618      	mov	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	20000414 	.word	0x20000414

08004f0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fb51 	bl	80035ca <uxListRemove>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4013      	ands	r3, r2
 8004f42:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4c:	d10a      	bne.n	8004f64 <prvAddCurrentTaskToDelayedList+0x58>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	481a      	ldr	r0, [pc, #104]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f5e:	f7fe fad7 	bl	8003510 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f62:	e026      	b.n	8004fb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f6c:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d209      	bcs.n	8004f90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7fe fae5 	bl	8003558 <vListInsert>
}
 8004f8e:	e010      	b.n	8004fb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7fe fadb 	bl	8003558 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d202      	bcs.n	8004fb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6013      	str	r3, [r2, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000518 	.word	0x20000518
 8004fc0:	20000414 	.word	0x20000414
 8004fc4:	2000051c 	.word	0x2000051c
 8004fc8:	20000500 	.word	0x20000500
 8004fcc:	200004d0 	.word	0x200004d0
 8004fd0:	200004cc 	.word	0x200004cc
 8004fd4:	20000534 	.word	0x20000534

08004fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3b04      	subs	r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b04      	subs	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0201 	bic.w	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3b04      	subs	r3, #4
 8005006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005008:	4a0c      	ldr	r2, [pc, #48]	; (800503c <pxPortInitialiseStack+0x64>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3b14      	subs	r3, #20
 8005012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b04      	subs	r3, #4
 800501e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f06f 0202 	mvn.w	r2, #2
 8005026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b20      	subs	r3, #32
 800502c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800502e:	68fb      	ldr	r3, [r7, #12]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	08005041 	.word	0x08005041

08005040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <prvTaskExitError+0x54>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d00a      	beq.n	800506a <prvTaskExitError+0x2a>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <prvTaskExitError+0x28>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60bb      	str	r3, [r7, #8]
}
 800507c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800507e:	bf00      	nop
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0fc      	beq.n	8005080 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	2000000c 	.word	0x2000000c
	...

080050a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <pxCurrentTCBConst2>)
 80050a2:	6819      	ldr	r1, [r3, #0]
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	f380 8809 	msr	PSP, r0
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	4770      	bx	lr
 80050bc:	f3af 8000 	nop.w

080050c0 <pxCurrentTCBConst2>:
 80050c0:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop

080050c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050c8:	4808      	ldr	r0, [pc, #32]	; (80050ec <prvPortStartFirstTask+0x24>)
 80050ca:	6800      	ldr	r0, [r0, #0]
 80050cc:	6800      	ldr	r0, [r0, #0]
 80050ce:	f380 8808 	msr	MSP, r0
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8814 	msr	CONTROL, r0
 80050da:	b662      	cpsie	i
 80050dc:	b661      	cpsie	f
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	df00      	svc	0
 80050e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ea:	bf00      	nop
 80050ec:	e000ed08 	.word	0xe000ed08

080050f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050f6:	4b46      	ldr	r3, [pc, #280]	; (8005210 <xPortStartScheduler+0x120>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a46      	ldr	r2, [pc, #280]	; (8005214 <xPortStartScheduler+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10a      	bne.n	8005116 <xPortStartScheduler+0x26>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	613b      	str	r3, [r7, #16]
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005116:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <xPortStartScheduler+0x120>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <xPortStartScheduler+0x128>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10a      	bne.n	8005136 <xPortStartScheduler+0x46>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60fb      	str	r3, [r7, #12]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005136:	4b39      	ldr	r3, [pc, #228]	; (800521c <xPortStartScheduler+0x12c>)
 8005138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b31      	ldr	r3, [pc, #196]	; (8005220 <xPortStartScheduler+0x130>)
 800515c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <xPortStartScheduler+0x134>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005164:	e009      	b.n	800517a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005166:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <xPortStartScheduler+0x134>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3b01      	subs	r3, #1
 800516c:	4a2d      	ldr	r2, [pc, #180]	; (8005224 <xPortStartScheduler+0x134>)
 800516e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d0ef      	beq.n	8005166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <xPortStartScheduler+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1c3 0307 	rsb	r3, r3, #7
 800518e:	2b04      	cmp	r3, #4
 8005190:	d00a      	beq.n	80051a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	60bb      	str	r3, [r7, #8]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <xPortStartScheduler+0x134>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <xPortStartScheduler+0x134>)
 80051b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <xPortStartScheduler+0x134>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ba:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <xPortStartScheduler+0x134>)
 80051bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051c6:	4b18      	ldr	r3, [pc, #96]	; (8005228 <xPortStartScheduler+0x138>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <xPortStartScheduler+0x138>)
 80051cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <xPortStartScheduler+0x138>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <xPortStartScheduler+0x138>)
 80051d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051de:	f000 f8dd 	bl	800539c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <xPortStartScheduler+0x13c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051e8:	f000 f8fc 	bl	80053e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <xPortStartScheduler+0x140>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <xPortStartScheduler+0x140>)
 80051f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051f8:	f7ff ff66 	bl	80050c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051fc:	f7ff fa5c 	bl	80046b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005200:	f7ff ff1e 	bl	8005040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000ed00 	.word	0xe000ed00
 8005214:	410fc271 	.word	0x410fc271
 8005218:	410fc270 	.word	0x410fc270
 800521c:	e000e400 	.word	0xe000e400
 8005220:	20000540 	.word	0x20000540
 8005224:	20000544 	.word	0x20000544
 8005228:	e000ed20 	.word	0xe000ed20
 800522c:	2000000c 	.word	0x2000000c
 8005230:	e000ef34 	.word	0xe000ef34

08005234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
}
 800524c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <vPortEnterCritical+0x58>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a0d      	ldr	r2, [pc, #52]	; (800528c <vPortEnterCritical+0x58>)
 8005256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <vPortEnterCritical+0x58>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10f      	bne.n	8005280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortEnterCritical+0x5c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <vPortEnterCritical+0x4c>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	603b      	str	r3, [r7, #0]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <vPortEnterCritical+0x4a>
	}
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	2000000c 	.word	0x2000000c
 8005290:	e000ed04 	.word	0xe000ed04

08005294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <vPortExitCritical+0x50>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <vPortExitCritical+0x24>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	607b      	str	r3, [r7, #4]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <vPortExitCritical+0x50>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3b01      	subs	r3, #1
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <vPortExitCritical+0x50>)
 80052c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052c2:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <vPortExitCritical+0x50>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <vPortExitCritical+0x42>
 80052ca:	2300      	movs	r3, #0
 80052cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c
	...

080052f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052f0:	f3ef 8009 	mrs	r0, PSP
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <pxCurrentTCBConst>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	f01e 0f10 	tst.w	lr, #16
 8005300:	bf08      	it	eq
 8005302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530a:	6010      	str	r0, [r2, #0]
 800530c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005314:	f380 8811 	msr	BASEPRI, r0
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f7ff f9ca 	bl	80046b8 <vTaskSwitchContext>
 8005324:	f04f 0000 	mov.w	r0, #0
 8005328:	f380 8811 	msr	BASEPRI, r0
 800532c:	bc09      	pop	{r0, r3}
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	6808      	ldr	r0, [r1, #0]
 8005332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005336:	f01e 0f10 	tst.w	lr, #16
 800533a:	bf08      	it	eq
 800533c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005340:	f380 8809 	msr	PSP, r0
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	f3af 8000 	nop.w

08005350 <pxCurrentTCBConst>:
 8005350:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop

08005358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
}
 8005370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005372:	f7ff f8e3 	bl	800453c <xTaskIncrementTick>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <SysTick_Handler+0x40>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	2300      	movs	r3, #0
 8005386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f383 8811 	msr	BASEPRI, r3
}
 800538e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053a0:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <vPortSetupTimerInterrupt+0x34>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <vPortSetupTimerInterrupt+0x38>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <vPortSetupTimerInterrupt+0x3c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <vPortSetupTimerInterrupt+0x40>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <vPortSetupTimerInterrupt+0x44>)
 80053ba:	3b01      	subs	r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <vPortSetupTimerInterrupt+0x34>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	e000e010 	.word	0xe000e010
 80053d4:	e000e018 	.word	0xe000e018
 80053d8:	20000000 	.word	0x20000000
 80053dc:	10624dd3 	.word	0x10624dd3
 80053e0:	e000e014 	.word	0xe000e014

080053e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053f4 <vPortEnableVFP+0x10>
 80053e8:	6801      	ldr	r1, [r0, #0]
 80053ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053ee:	6001      	str	r1, [r0, #0]
 80053f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053f2:	bf00      	nop
 80053f4:	e000ed88 	.word	0xe000ed88

080053f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005404:	f7fe fff0 	bl	80043e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005408:	4b58      	ldr	r3, [pc, #352]	; (800556c <pvPortMalloc+0x174>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005410:	f000 f910 	bl	8005634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005414:	4b56      	ldr	r3, [pc, #344]	; (8005570 <pvPortMalloc+0x178>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 808e 	bne.w	800553e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01d      	beq.n	8005464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005428:	2208      	movs	r2, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d014      	beq.n	8005464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <pvPortMalloc+0x6c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d069      	beq.n	800553e <pvPortMalloc+0x146>
 800546a:	4b42      	ldr	r3, [pc, #264]	; (8005574 <pvPortMalloc+0x17c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d864      	bhi.n	800553e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005474:	4b40      	ldr	r3, [pc, #256]	; (8005578 <pvPortMalloc+0x180>)
 8005476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005478:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <pvPortMalloc+0x180>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547e:	e004      	b.n	800548a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d903      	bls.n	800549c <pvPortMalloc+0xa4>
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f1      	bne.n	8005480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <pvPortMalloc+0x174>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d04b      	beq.n	800553e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2208      	movs	r2, #8
 80054ac:	4413      	add	r3, r2
 80054ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	2308      	movs	r3, #8
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d91f      	bls.n	8005508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <pvPortMalloc+0xf8>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	613b      	str	r3, [r7, #16]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 f8f8 	bl	80056f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <pvPortMalloc+0x17c>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <pvPortMalloc+0x17c>)
 8005514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <pvPortMalloc+0x17c>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <pvPortMalloc+0x184>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <pvPortMalloc+0x17c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <pvPortMalloc+0x184>)
 8005528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b10      	ldr	r3, [pc, #64]	; (8005570 <pvPortMalloc+0x178>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	431a      	orrs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800553e:	f7fe ff61 	bl	8004404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <pvPortMalloc+0x16a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60fb      	str	r3, [r7, #12]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <pvPortMalloc+0x168>
	return pvReturn;
 8005562:	69fb      	ldr	r3, [r7, #28]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20001150 	.word	0x20001150
 8005570:	2000115c 	.word	0x2000115c
 8005574:	20001154 	.word	0x20001154
 8005578:	20001148 	.word	0x20001148
 800557c:	20001158 	.word	0x20001158

08005580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d048      	beq.n	8005624 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005592:	2308      	movs	r3, #8
 8005594:	425b      	negs	r3, r3
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b21      	ldr	r3, [pc, #132]	; (800562c <vPortFree+0xac>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <vPortFree+0x44>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <vPortFree+0x62>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60bb      	str	r3, [r7, #8]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <vPortFree+0xac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <vPortFree+0xac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	43db      	mvns	r3, r3
 8005602:	401a      	ands	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005608:	f7fe feee 	bl	80043e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <vPortFree+0xb0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4413      	add	r3, r2
 8005616:	4a06      	ldr	r2, [pc, #24]	; (8005630 <vPortFree+0xb0>)
 8005618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f000 f86c 	bl	80056f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005620:	f7fe fef0 	bl	8004404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005624:	bf00      	nop
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2000115c 	.word	0x2000115c
 8005630:	20001154 	.word	0x20001154

08005634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800563a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800563e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <prvHeapInit+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3307      	adds	r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0307 	bic.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <prvHeapInit+0xac>)
 8005664:	4413      	add	r3, r2
 8005666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <prvHeapInit+0xb0>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <prvHeapInit+0xb0>)
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4413      	add	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005680:	2208      	movs	r2, #8
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <prvHeapInit+0xb4>)
 8005694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <prvHeapInit+0xb4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <prvHeapInit+0xb4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvHeapInit+0xb4>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <prvHeapInit+0xb8>)
 80056c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <prvHeapInit+0xbc>)
 80056ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <prvHeapInit+0xc0>)
 80056ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	bf00      	nop
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000548 	.word	0x20000548
 80056e4:	20001148 	.word	0x20001148
 80056e8:	20001150 	.word	0x20001150
 80056ec:	20001158 	.word	0x20001158
 80056f0:	20001154 	.word	0x20001154
 80056f4:	2000115c 	.word	0x2000115c

080056f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <prvInsertBlockIntoFreeList+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e002      	b.n	800570c <prvInsertBlockIntoFreeList+0x14>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d8f7      	bhi.n	8005706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4413      	add	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d108      	bne.n	800573a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	441a      	add	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d118      	bne.n	8005780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d00d      	beq.n	8005776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e008      	b.n	8005788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e003      	b.n	8005788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d002      	beq.n	8005796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20001148 	.word	0x20001148
 80057a8:	20001150 	.word	0x20001150

080057ac <rand>:
 80057ac:	4b16      	ldr	r3, [pc, #88]	; (8005808 <rand+0x5c>)
 80057ae:	b510      	push	{r4, lr}
 80057b0:	681c      	ldr	r4, [r3, #0]
 80057b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057b4:	b9b3      	cbnz	r3, 80057e4 <rand+0x38>
 80057b6:	2018      	movs	r0, #24
 80057b8:	f000 fa92 	bl	8005ce0 <malloc>
 80057bc:	4602      	mov	r2, r0
 80057be:	6320      	str	r0, [r4, #48]	; 0x30
 80057c0:	b920      	cbnz	r0, 80057cc <rand+0x20>
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <rand+0x60>)
 80057c4:	4812      	ldr	r0, [pc, #72]	; (8005810 <rand+0x64>)
 80057c6:	2152      	movs	r1, #82	; 0x52
 80057c8:	f000 fa20 	bl	8005c0c <__assert_func>
 80057cc:	4911      	ldr	r1, [pc, #68]	; (8005814 <rand+0x68>)
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <rand+0x6c>)
 80057d0:	e9c0 1300 	strd	r1, r3, [r0]
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <rand+0x70>)
 80057d6:	6083      	str	r3, [r0, #8]
 80057d8:	230b      	movs	r3, #11
 80057da:	8183      	strh	r3, [r0, #12]
 80057dc:	2100      	movs	r1, #0
 80057de:	2001      	movs	r0, #1
 80057e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80057e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057e6:	480e      	ldr	r0, [pc, #56]	; (8005820 <rand+0x74>)
 80057e8:	690b      	ldr	r3, [r1, #16]
 80057ea:	694c      	ldr	r4, [r1, #20]
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <rand+0x78>)
 80057ee:	4358      	muls	r0, r3
 80057f0:	fb02 0004 	mla	r0, r2, r4, r0
 80057f4:	fba3 3202 	umull	r3, r2, r3, r2
 80057f8:	3301      	adds	r3, #1
 80057fa:	eb40 0002 	adc.w	r0, r0, r2
 80057fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005802:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005806:	bd10      	pop	{r4, pc}
 8005808:	20000068 	.word	0x20000068
 800580c:	08006cb0 	.word	0x08006cb0
 8005810:	08006cc7 	.word	0x08006cc7
 8005814:	abcd330e 	.word	0xabcd330e
 8005818:	e66d1234 	.word	0xe66d1234
 800581c:	0005deec 	.word	0x0005deec
 8005820:	5851f42d 	.word	0x5851f42d
 8005824:	4c957f2d 	.word	0x4c957f2d

08005828 <std>:
 8005828:	2300      	movs	r3, #0
 800582a:	b510      	push	{r4, lr}
 800582c:	4604      	mov	r4, r0
 800582e:	e9c0 3300 	strd	r3, r3, [r0]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6083      	str	r3, [r0, #8]
 8005838:	8181      	strh	r1, [r0, #12]
 800583a:	6643      	str	r3, [r0, #100]	; 0x64
 800583c:	81c2      	strh	r2, [r0, #14]
 800583e:	6183      	str	r3, [r0, #24]
 8005840:	4619      	mov	r1, r3
 8005842:	2208      	movs	r2, #8
 8005844:	305c      	adds	r0, #92	; 0x5c
 8005846:	f000 f902 	bl	8005a4e <memset>
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x38>)
 800584c:	6263      	str	r3, [r4, #36]	; 0x24
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <std+0x3c>)
 8005850:	62a3      	str	r3, [r4, #40]	; 0x28
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std+0x40>)
 8005854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x44>)
 8005858:	6224      	str	r4, [r4, #32]
 800585a:	6323      	str	r3, [r4, #48]	; 0x30
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	080059c9 	.word	0x080059c9
 8005864:	080059eb 	.word	0x080059eb
 8005868:	08005a23 	.word	0x08005a23
 800586c:	08005a47 	.word	0x08005a47

08005870 <stdio_exit_handler>:
 8005870:	4a02      	ldr	r2, [pc, #8]	; (800587c <stdio_exit_handler+0xc>)
 8005872:	4903      	ldr	r1, [pc, #12]	; (8005880 <stdio_exit_handler+0x10>)
 8005874:	4803      	ldr	r0, [pc, #12]	; (8005884 <stdio_exit_handler+0x14>)
 8005876:	f000 b869 	b.w	800594c <_fwalk_sglue>
 800587a:	bf00      	nop
 800587c:	20000010 	.word	0x20000010
 8005880:	08006525 	.word	0x08006525
 8005884:	2000001c 	.word	0x2000001c

08005888 <cleanup_stdio>:
 8005888:	6841      	ldr	r1, [r0, #4]
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <cleanup_stdio+0x34>)
 800588c:	4299      	cmp	r1, r3
 800588e:	b510      	push	{r4, lr}
 8005890:	4604      	mov	r4, r0
 8005892:	d001      	beq.n	8005898 <cleanup_stdio+0x10>
 8005894:	f000 fe46 	bl	8006524 <_fflush_r>
 8005898:	68a1      	ldr	r1, [r4, #8]
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <cleanup_stdio+0x38>)
 800589c:	4299      	cmp	r1, r3
 800589e:	d002      	beq.n	80058a6 <cleanup_stdio+0x1e>
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fe3f 	bl	8006524 <_fflush_r>
 80058a6:	68e1      	ldr	r1, [r4, #12]
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <cleanup_stdio+0x3c>)
 80058aa:	4299      	cmp	r1, r3
 80058ac:	d004      	beq.n	80058b8 <cleanup_stdio+0x30>
 80058ae:	4620      	mov	r0, r4
 80058b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b4:	f000 be36 	b.w	8006524 <_fflush_r>
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	20001160 	.word	0x20001160
 80058c0:	200011c8 	.word	0x200011c8
 80058c4:	20001230 	.word	0x20001230

080058c8 <global_stdio_init.part.0>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <global_stdio_init.part.0+0x30>)
 80058cc:	4c0b      	ldr	r4, [pc, #44]	; (80058fc <global_stdio_init.part.0+0x34>)
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <global_stdio_init.part.0+0x38>)
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	4620      	mov	r0, r4
 80058d4:	2200      	movs	r2, #0
 80058d6:	2104      	movs	r1, #4
 80058d8:	f7ff ffa6 	bl	8005828 <std>
 80058dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058e0:	2201      	movs	r2, #1
 80058e2:	2109      	movs	r1, #9
 80058e4:	f7ff ffa0 	bl	8005828 <std>
 80058e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058ec:	2202      	movs	r2, #2
 80058ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f2:	2112      	movs	r1, #18
 80058f4:	f7ff bf98 	b.w	8005828 <std>
 80058f8:	20001298 	.word	0x20001298
 80058fc:	20001160 	.word	0x20001160
 8005900:	08005871 	.word	0x08005871

08005904 <__sfp_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sfp_lock_acquire+0x8>)
 8005906:	f000 b971 	b.w	8005bec <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	200012a1 	.word	0x200012a1

08005910 <__sfp_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sfp_lock_release+0x8>)
 8005912:	f000 b96c 	b.w	8005bee <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	200012a1 	.word	0x200012a1

0800591c <__sinit>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4604      	mov	r4, r0
 8005920:	f7ff fff0 	bl	8005904 <__sfp_lock_acquire>
 8005924:	6a23      	ldr	r3, [r4, #32]
 8005926:	b11b      	cbz	r3, 8005930 <__sinit+0x14>
 8005928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592c:	f7ff bff0 	b.w	8005910 <__sfp_lock_release>
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <__sinit+0x28>)
 8005932:	6223      	str	r3, [r4, #32]
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__sinit+0x2c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f5      	bne.n	8005928 <__sinit+0xc>
 800593c:	f7ff ffc4 	bl	80058c8 <global_stdio_init.part.0>
 8005940:	e7f2      	b.n	8005928 <__sinit+0xc>
 8005942:	bf00      	nop
 8005944:	08005889 	.word	0x08005889
 8005948:	20001298 	.word	0x20001298

0800594c <_fwalk_sglue>:
 800594c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005950:	4607      	mov	r7, r0
 8005952:	4688      	mov	r8, r1
 8005954:	4614      	mov	r4, r2
 8005956:	2600      	movs	r6, #0
 8005958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800595c:	f1b9 0901 	subs.w	r9, r9, #1
 8005960:	d505      	bpl.n	800596e <_fwalk_sglue+0x22>
 8005962:	6824      	ldr	r4, [r4, #0]
 8005964:	2c00      	cmp	r4, #0
 8005966:	d1f7      	bne.n	8005958 <_fwalk_sglue+0xc>
 8005968:	4630      	mov	r0, r6
 800596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d907      	bls.n	8005984 <_fwalk_sglue+0x38>
 8005974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005978:	3301      	adds	r3, #1
 800597a:	d003      	beq.n	8005984 <_fwalk_sglue+0x38>
 800597c:	4629      	mov	r1, r5
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	4306      	orrs	r6, r0
 8005984:	3568      	adds	r5, #104	; 0x68
 8005986:	e7e9      	b.n	800595c <_fwalk_sglue+0x10>

08005988 <siprintf>:
 8005988:	b40e      	push	{r1, r2, r3}
 800598a:	b500      	push	{lr}
 800598c:	b09c      	sub	sp, #112	; 0x70
 800598e:	ab1d      	add	r3, sp, #116	; 0x74
 8005990:	9002      	str	r0, [sp, #8]
 8005992:	9006      	str	r0, [sp, #24]
 8005994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005998:	4809      	ldr	r0, [pc, #36]	; (80059c0 <siprintf+0x38>)
 800599a:	9107      	str	r1, [sp, #28]
 800599c:	9104      	str	r1, [sp, #16]
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <siprintf+0x3c>)
 80059a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a4:	9105      	str	r1, [sp, #20]
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	a902      	add	r1, sp, #8
 80059ac:	f000 faa6 	bl	8005efc <_svfiprintf_r>
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	b01c      	add	sp, #112	; 0x70
 80059b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059bc:	b003      	add	sp, #12
 80059be:	4770      	bx	lr
 80059c0:	20000068 	.word	0x20000068
 80059c4:	ffff0208 	.word	0xffff0208

080059c8 <__sread>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	460c      	mov	r4, r1
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	f000 f8be 	bl	8005b50 <_read_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	bfab      	itete	ge
 80059d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059da:	89a3      	ldrhlt	r3, [r4, #12]
 80059dc:	181b      	addge	r3, r3, r0
 80059de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059e2:	bfac      	ite	ge
 80059e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059e6:	81a3      	strhlt	r3, [r4, #12]
 80059e8:	bd10      	pop	{r4, pc}

080059ea <__swrite>:
 80059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	461f      	mov	r7, r3
 80059f0:	898b      	ldrh	r3, [r1, #12]
 80059f2:	05db      	lsls	r3, r3, #23
 80059f4:	4605      	mov	r5, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	4616      	mov	r6, r2
 80059fa:	d505      	bpl.n	8005a08 <__swrite+0x1e>
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	2302      	movs	r3, #2
 8005a02:	2200      	movs	r2, #0
 8005a04:	f000 f892 	bl	8005b2c <_lseek_r>
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	4632      	mov	r2, r6
 8005a16:	463b      	mov	r3, r7
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	f000 b8a9 	b.w	8005b74 <_write_r>

08005a22 <__sseek>:
 8005a22:	b510      	push	{r4, lr}
 8005a24:	460c      	mov	r4, r1
 8005a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2a:	f000 f87f 	bl	8005b2c <_lseek_r>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	bf15      	itete	ne
 8005a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a3e:	81a3      	strheq	r3, [r4, #12]
 8005a40:	bf18      	it	ne
 8005a42:	81a3      	strhne	r3, [r4, #12]
 8005a44:	bd10      	pop	{r4, pc}

08005a46 <__sclose>:
 8005a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4a:	f000 b809 	b.w	8005a60 <_close_r>

08005a4e <memset>:
 8005a4e:	4402      	add	r2, r0
 8005a50:	4603      	mov	r3, r0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d100      	bne.n	8005a58 <memset+0xa>
 8005a56:	4770      	bx	lr
 8005a58:	f803 1b01 	strb.w	r1, [r3], #1
 8005a5c:	e7f9      	b.n	8005a52 <memset+0x4>
	...

08005a60 <_close_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d06      	ldr	r5, [pc, #24]	; (8005a7c <_close_r+0x1c>)
 8005a64:	2300      	movs	r3, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fa ff33 	bl	80008d6 <_close>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_close_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_close_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	2000129c 	.word	0x2000129c

08005a80 <_reclaim_reent>:
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <_reclaim_reent+0xa8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4283      	cmp	r3, r0
 8005a86:	b570      	push	{r4, r5, r6, lr}
 8005a88:	4604      	mov	r4, r0
 8005a8a:	d04b      	beq.n	8005b24 <_reclaim_reent+0xa4>
 8005a8c:	69c3      	ldr	r3, [r0, #28]
 8005a8e:	b143      	cbz	r3, 8005aa2 <_reclaim_reent+0x22>
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d144      	bne.n	8005b20 <_reclaim_reent+0xa0>
 8005a96:	69e3      	ldr	r3, [r4, #28]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	b111      	cbz	r1, 8005aa2 <_reclaim_reent+0x22>
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 f8d3 	bl	8005c48 <_free_r>
 8005aa2:	6961      	ldr	r1, [r4, #20]
 8005aa4:	b111      	cbz	r1, 8005aac <_reclaim_reent+0x2c>
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f8ce 	bl	8005c48 <_free_r>
 8005aac:	69e1      	ldr	r1, [r4, #28]
 8005aae:	b111      	cbz	r1, 8005ab6 <_reclaim_reent+0x36>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f8c9 	bl	8005c48 <_free_r>
 8005ab6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ab8:	b111      	cbz	r1, 8005ac0 <_reclaim_reent+0x40>
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f8c4 	bl	8005c48 <_free_r>
 8005ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac2:	b111      	cbz	r1, 8005aca <_reclaim_reent+0x4a>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 f8bf 	bl	8005c48 <_free_r>
 8005aca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005acc:	b111      	cbz	r1, 8005ad4 <_reclaim_reent+0x54>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f8ba 	bl	8005c48 <_free_r>
 8005ad4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ad6:	b111      	cbz	r1, 8005ade <_reclaim_reent+0x5e>
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f000 f8b5 	bl	8005c48 <_free_r>
 8005ade:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005ae0:	b111      	cbz	r1, 8005ae8 <_reclaim_reent+0x68>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f8b0 	bl	8005c48 <_free_r>
 8005ae8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005aea:	b111      	cbz	r1, 8005af2 <_reclaim_reent+0x72>
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f8ab 	bl	8005c48 <_free_r>
 8005af2:	6a23      	ldr	r3, [r4, #32]
 8005af4:	b1b3      	cbz	r3, 8005b24 <_reclaim_reent+0xa4>
 8005af6:	4620      	mov	r0, r4
 8005af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005afc:	4718      	bx	r3
 8005afe:	5949      	ldr	r1, [r1, r5]
 8005b00:	b941      	cbnz	r1, 8005b14 <_reclaim_reent+0x94>
 8005b02:	3504      	adds	r5, #4
 8005b04:	69e3      	ldr	r3, [r4, #28]
 8005b06:	2d80      	cmp	r5, #128	; 0x80
 8005b08:	68d9      	ldr	r1, [r3, #12]
 8005b0a:	d1f8      	bne.n	8005afe <_reclaim_reent+0x7e>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f89b 	bl	8005c48 <_free_r>
 8005b12:	e7c0      	b.n	8005a96 <_reclaim_reent+0x16>
 8005b14:	680e      	ldr	r6, [r1, #0]
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 f896 	bl	8005c48 <_free_r>
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	e7ef      	b.n	8005b00 <_reclaim_reent+0x80>
 8005b20:	2500      	movs	r5, #0
 8005b22:	e7ef      	b.n	8005b04 <_reclaim_reent+0x84>
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	bf00      	nop
 8005b28:	20000068 	.word	0x20000068

08005b2c <_lseek_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_lseek_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fa fef2 	bl	8000924 <_lseek>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_lseek_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_lseek_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	2000129c 	.word	0x2000129c

08005b50 <_read_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	; (8005b70 <_read_r+0x20>)
 8005b54:	4604      	mov	r4, r0
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fa fe80 	bl	8000864 <_read>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_read_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_read_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	2000129c 	.word	0x2000129c

08005b74 <_write_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_write_r+0x20>)
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fa fe8b 	bl	800089e <_write>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_write_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_write_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	2000129c 	.word	0x2000129c

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000068 	.word	0x20000068

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4d0d      	ldr	r5, [pc, #52]	; (8005bdc <__libc_init_array+0x38>)
 8005ba8:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005baa:	1b64      	subs	r4, r4, r5
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	2600      	movs	r6, #0
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	4d0b      	ldr	r5, [pc, #44]	; (8005be4 <__libc_init_array+0x40>)
 8005bb6:	4c0c      	ldr	r4, [pc, #48]	; (8005be8 <__libc_init_array+0x44>)
 8005bb8:	f000 fff8 	bl	8006bac <_init>
 8005bbc:	1b64      	subs	r4, r4, r5
 8005bbe:	10a4      	asrs	r4, r4, #2
 8005bc0:	2600      	movs	r6, #0
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08006d90 	.word	0x08006d90
 8005be0:	08006d90 	.word	0x08006d90
 8005be4:	08006d90 	.word	0x08006d90
 8005be8:	08006d94 	.word	0x08006d94

08005bec <__retarget_lock_acquire_recursive>:
 8005bec:	4770      	bx	lr

08005bee <__retarget_lock_release_recursive>:
 8005bee:	4770      	bx	lr

08005bf0 <memcpy>:
 8005bf0:	440a      	add	r2, r1
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bf8:	d100      	bne.n	8005bfc <memcpy+0xc>
 8005bfa:	4770      	bx	lr
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c06:	4291      	cmp	r1, r2
 8005c08:	d1f9      	bne.n	8005bfe <memcpy+0xe>
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <__assert_func>:
 8005c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c0e:	4614      	mov	r4, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <__assert_func+0x2c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4605      	mov	r5, r0
 8005c18:	68d8      	ldr	r0, [r3, #12]
 8005c1a:	b14c      	cbz	r4, 8005c30 <__assert_func+0x24>
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <__assert_func+0x30>)
 8005c1e:	9100      	str	r1, [sp, #0]
 8005c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c24:	4906      	ldr	r1, [pc, #24]	; (8005c40 <__assert_func+0x34>)
 8005c26:	462b      	mov	r3, r5
 8005c28:	f000 fca4 	bl	8006574 <fiprintf>
 8005c2c:	f000 fcde 	bl	80065ec <abort>
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <__assert_func+0x38>)
 8005c32:	461c      	mov	r4, r3
 8005c34:	e7f3      	b.n	8005c1e <__assert_func+0x12>
 8005c36:	bf00      	nop
 8005c38:	20000068 	.word	0x20000068
 8005c3c:	08006d1f 	.word	0x08006d1f
 8005c40:	08006d2c 	.word	0x08006d2c
 8005c44:	08006d5a 	.word	0x08006d5a

08005c48 <_free_r>:
 8005c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c4a:	2900      	cmp	r1, #0
 8005c4c:	d044      	beq.n	8005cd8 <_free_r+0x90>
 8005c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c52:	9001      	str	r0, [sp, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f1a1 0404 	sub.w	r4, r1, #4
 8005c5a:	bfb8      	it	lt
 8005c5c:	18e4      	addlt	r4, r4, r3
 8005c5e:	f000 f8e7 	bl	8005e30 <__malloc_lock>
 8005c62:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <_free_r+0x94>)
 8005c64:	9801      	ldr	r0, [sp, #4]
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	b933      	cbnz	r3, 8005c78 <_free_r+0x30>
 8005c6a:	6063      	str	r3, [r4, #4]
 8005c6c:	6014      	str	r4, [r2, #0]
 8005c6e:	b003      	add	sp, #12
 8005c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c74:	f000 b8e2 	b.w	8005e3c <__malloc_unlock>
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	d908      	bls.n	8005c8e <_free_r+0x46>
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	1961      	adds	r1, r4, r5
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bf01      	itttt	eq
 8005c84:	6819      	ldreq	r1, [r3, #0]
 8005c86:	685b      	ldreq	r3, [r3, #4]
 8005c88:	1949      	addeq	r1, r1, r5
 8005c8a:	6021      	streq	r1, [r4, #0]
 8005c8c:	e7ed      	b.n	8005c6a <_free_r+0x22>
 8005c8e:	461a      	mov	r2, r3
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	b10b      	cbz	r3, 8005c98 <_free_r+0x50>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d9fa      	bls.n	8005c8e <_free_r+0x46>
 8005c98:	6811      	ldr	r1, [r2, #0]
 8005c9a:	1855      	adds	r5, r2, r1
 8005c9c:	42a5      	cmp	r5, r4
 8005c9e:	d10b      	bne.n	8005cb8 <_free_r+0x70>
 8005ca0:	6824      	ldr	r4, [r4, #0]
 8005ca2:	4421      	add	r1, r4
 8005ca4:	1854      	adds	r4, r2, r1
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	6011      	str	r1, [r2, #0]
 8005caa:	d1e0      	bne.n	8005c6e <_free_r+0x26>
 8005cac:	681c      	ldr	r4, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	6053      	str	r3, [r2, #4]
 8005cb2:	440c      	add	r4, r1
 8005cb4:	6014      	str	r4, [r2, #0]
 8005cb6:	e7da      	b.n	8005c6e <_free_r+0x26>
 8005cb8:	d902      	bls.n	8005cc0 <_free_r+0x78>
 8005cba:	230c      	movs	r3, #12
 8005cbc:	6003      	str	r3, [r0, #0]
 8005cbe:	e7d6      	b.n	8005c6e <_free_r+0x26>
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	1961      	adds	r1, r4, r5
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf04      	itt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	6063      	str	r3, [r4, #4]
 8005cce:	bf04      	itt	eq
 8005cd0:	1949      	addeq	r1, r1, r5
 8005cd2:	6021      	streq	r1, [r4, #0]
 8005cd4:	6054      	str	r4, [r2, #4]
 8005cd6:	e7ca      	b.n	8005c6e <_free_r+0x26>
 8005cd8:	b003      	add	sp, #12
 8005cda:	bd30      	pop	{r4, r5, pc}
 8005cdc:	200012a4 	.word	0x200012a4

08005ce0 <malloc>:
 8005ce0:	4b02      	ldr	r3, [pc, #8]	; (8005cec <malloc+0xc>)
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f000 b823 	b.w	8005d30 <_malloc_r>
 8005cea:	bf00      	nop
 8005cec:	20000068 	.word	0x20000068

08005cf0 <sbrk_aligned>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4e0e      	ldr	r6, [pc, #56]	; (8005d2c <sbrk_aligned+0x3c>)
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	6831      	ldr	r1, [r6, #0]
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	b911      	cbnz	r1, 8005d02 <sbrk_aligned+0x12>
 8005cfc:	f000 fc66 	bl	80065cc <_sbrk_r>
 8005d00:	6030      	str	r0, [r6, #0]
 8005d02:	4621      	mov	r1, r4
 8005d04:	4628      	mov	r0, r5
 8005d06:	f000 fc61 	bl	80065cc <_sbrk_r>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	d00a      	beq.n	8005d24 <sbrk_aligned+0x34>
 8005d0e:	1cc4      	adds	r4, r0, #3
 8005d10:	f024 0403 	bic.w	r4, r4, #3
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d007      	beq.n	8005d28 <sbrk_aligned+0x38>
 8005d18:	1a21      	subs	r1, r4, r0
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fc56 	bl	80065cc <_sbrk_r>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d101      	bne.n	8005d28 <sbrk_aligned+0x38>
 8005d24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d28:	4620      	mov	r0, r4
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	200012a8 	.word	0x200012a8

08005d30 <_malloc_r>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	1ccd      	adds	r5, r1, #3
 8005d36:	f025 0503 	bic.w	r5, r5, #3
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	2d0c      	cmp	r5, #12
 8005d3e:	bf38      	it	cc
 8005d40:	250c      	movcc	r5, #12
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	4607      	mov	r7, r0
 8005d46:	db01      	blt.n	8005d4c <_malloc_r+0x1c>
 8005d48:	42a9      	cmp	r1, r5
 8005d4a:	d905      	bls.n	8005d58 <_malloc_r+0x28>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	2600      	movs	r6, #0
 8005d52:	4630      	mov	r0, r6
 8005d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e2c <_malloc_r+0xfc>
 8005d5c:	f000 f868 	bl	8005e30 <__malloc_lock>
 8005d60:	f8d8 3000 	ldr.w	r3, [r8]
 8005d64:	461c      	mov	r4, r3
 8005d66:	bb5c      	cbnz	r4, 8005dc0 <_malloc_r+0x90>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ffc0 	bl	8005cf0 <sbrk_aligned>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	4604      	mov	r4, r0
 8005d74:	d155      	bne.n	8005e22 <_malloc_r+0xf2>
 8005d76:	f8d8 4000 	ldr.w	r4, [r8]
 8005d7a:	4626      	mov	r6, r4
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	d145      	bne.n	8005e0c <_malloc_r+0xdc>
 8005d80:	2c00      	cmp	r4, #0
 8005d82:	d048      	beq.n	8005e16 <_malloc_r+0xe6>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	4631      	mov	r1, r6
 8005d88:	4638      	mov	r0, r7
 8005d8a:	eb04 0903 	add.w	r9, r4, r3
 8005d8e:	f000 fc1d 	bl	80065cc <_sbrk_r>
 8005d92:	4581      	cmp	r9, r0
 8005d94:	d13f      	bne.n	8005e16 <_malloc_r+0xe6>
 8005d96:	6821      	ldr	r1, [r4, #0]
 8005d98:	1a6d      	subs	r5, r5, r1
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff ffa7 	bl	8005cf0 <sbrk_aligned>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d037      	beq.n	8005e16 <_malloc_r+0xe6>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	442b      	add	r3, r5
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	f8d8 3000 	ldr.w	r3, [r8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d038      	beq.n	8005e26 <_malloc_r+0xf6>
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	42a2      	cmp	r2, r4
 8005db8:	d12b      	bne.n	8005e12 <_malloc_r+0xe2>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	e00f      	b.n	8005de0 <_malloc_r+0xb0>
 8005dc0:	6822      	ldr	r2, [r4, #0]
 8005dc2:	1b52      	subs	r2, r2, r5
 8005dc4:	d41f      	bmi.n	8005e06 <_malloc_r+0xd6>
 8005dc6:	2a0b      	cmp	r2, #11
 8005dc8:	d917      	bls.n	8005dfa <_malloc_r+0xca>
 8005dca:	1961      	adds	r1, r4, r5
 8005dcc:	42a3      	cmp	r3, r4
 8005dce:	6025      	str	r5, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	6059      	strne	r1, [r3, #4]
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	bf08      	it	eq
 8005dd8:	f8c8 1000 	streq.w	r1, [r8]
 8005ddc:	5162      	str	r2, [r4, r5]
 8005dde:	604b      	str	r3, [r1, #4]
 8005de0:	4638      	mov	r0, r7
 8005de2:	f104 060b 	add.w	r6, r4, #11
 8005de6:	f000 f829 	bl	8005e3c <__malloc_unlock>
 8005dea:	f026 0607 	bic.w	r6, r6, #7
 8005dee:	1d23      	adds	r3, r4, #4
 8005df0:	1af2      	subs	r2, r6, r3
 8005df2:	d0ae      	beq.n	8005d52 <_malloc_r+0x22>
 8005df4:	1b9b      	subs	r3, r3, r6
 8005df6:	50a3      	str	r3, [r4, r2]
 8005df8:	e7ab      	b.n	8005d52 <_malloc_r+0x22>
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	d1dd      	bne.n	8005dbc <_malloc_r+0x8c>
 8005e00:	f8c8 2000 	str.w	r2, [r8]
 8005e04:	e7ec      	b.n	8005de0 <_malloc_r+0xb0>
 8005e06:	4623      	mov	r3, r4
 8005e08:	6864      	ldr	r4, [r4, #4]
 8005e0a:	e7ac      	b.n	8005d66 <_malloc_r+0x36>
 8005e0c:	4634      	mov	r4, r6
 8005e0e:	6876      	ldr	r6, [r6, #4]
 8005e10:	e7b4      	b.n	8005d7c <_malloc_r+0x4c>
 8005e12:	4613      	mov	r3, r2
 8005e14:	e7cc      	b.n	8005db0 <_malloc_r+0x80>
 8005e16:	230c      	movs	r3, #12
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f000 f80e 	bl	8005e3c <__malloc_unlock>
 8005e20:	e797      	b.n	8005d52 <_malloc_r+0x22>
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	e7dc      	b.n	8005de0 <_malloc_r+0xb0>
 8005e26:	605b      	str	r3, [r3, #4]
 8005e28:	deff      	udf	#255	; 0xff
 8005e2a:	bf00      	nop
 8005e2c:	200012a4 	.word	0x200012a4

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_lock+0x8>)
 8005e32:	f7ff bedb 	b.w	8005bec <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	200012a0 	.word	0x200012a0

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f7ff bed6 	b.w	8005bee <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	200012a0 	.word	0x200012a0

08005e48 <__ssputs_r>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	688e      	ldr	r6, [r1, #8]
 8005e4e:	461f      	mov	r7, r3
 8005e50:	42be      	cmp	r6, r7
 8005e52:	680b      	ldr	r3, [r1, #0]
 8005e54:	4682      	mov	sl, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	4690      	mov	r8, r2
 8005e5a:	d82c      	bhi.n	8005eb6 <__ssputs_r+0x6e>
 8005e5c:	898a      	ldrh	r2, [r1, #12]
 8005e5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e62:	d026      	beq.n	8005eb2 <__ssputs_r+0x6a>
 8005e64:	6965      	ldr	r5, [r4, #20]
 8005e66:	6909      	ldr	r1, [r1, #16]
 8005e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e6c:	eba3 0901 	sub.w	r9, r3, r1
 8005e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e74:	1c7b      	adds	r3, r7, #1
 8005e76:	444b      	add	r3, r9
 8005e78:	106d      	asrs	r5, r5, #1
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	bf38      	it	cc
 8005e7e:	461d      	movcc	r5, r3
 8005e80:	0553      	lsls	r3, r2, #21
 8005e82:	d527      	bpl.n	8005ed4 <__ssputs_r+0x8c>
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7ff ff53 	bl	8005d30 <_malloc_r>
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	b360      	cbz	r0, 8005ee8 <__ssputs_r+0xa0>
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	464a      	mov	r2, r9
 8005e92:	f7ff fead 	bl	8005bf0 <memcpy>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	6126      	str	r6, [r4, #16]
 8005ea4:	6165      	str	r5, [r4, #20]
 8005ea6:	444e      	add	r6, r9
 8005ea8:	eba5 0509 	sub.w	r5, r5, r9
 8005eac:	6026      	str	r6, [r4, #0]
 8005eae:	60a5      	str	r5, [r4, #8]
 8005eb0:	463e      	mov	r6, r7
 8005eb2:	42be      	cmp	r6, r7
 8005eb4:	d900      	bls.n	8005eb8 <__ssputs_r+0x70>
 8005eb6:	463e      	mov	r6, r7
 8005eb8:	6820      	ldr	r0, [r4, #0]
 8005eba:	4632      	mov	r2, r6
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	f000 fb6b 	bl	8006598 <memmove>
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	1b9b      	subs	r3, r3, r6
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	4433      	add	r3, r6
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	f000 fb90 	bl	80065fa <_realloc_r>
 8005eda:	4606      	mov	r6, r0
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1e0      	bne.n	8005ea2 <__ssputs_r+0x5a>
 8005ee0:	6921      	ldr	r1, [r4, #16]
 8005ee2:	4650      	mov	r0, sl
 8005ee4:	f7ff feb0 	bl	8005c48 <_free_r>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	f8ca 3000 	str.w	r3, [sl]
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef4:	81a3      	strh	r3, [r4, #12]
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005efa:	e7e9      	b.n	8005ed0 <__ssputs_r+0x88>

08005efc <_svfiprintf_r>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	4698      	mov	r8, r3
 8005f02:	898b      	ldrh	r3, [r1, #12]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	b09d      	sub	sp, #116	; 0x74
 8005f08:	4607      	mov	r7, r0
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	d50e      	bpl.n	8005f2e <_svfiprintf_r+0x32>
 8005f10:	690b      	ldr	r3, [r1, #16]
 8005f12:	b963      	cbnz	r3, 8005f2e <_svfiprintf_r+0x32>
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	f7ff ff0b 	bl	8005d30 <_malloc_r>
 8005f1a:	6028      	str	r0, [r5, #0]
 8005f1c:	6128      	str	r0, [r5, #16]
 8005f1e:	b920      	cbnz	r0, 8005f2a <_svfiprintf_r+0x2e>
 8005f20:	230c      	movs	r3, #12
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f28:	e0d0      	b.n	80060cc <_svfiprintf_r+0x1d0>
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	616b      	str	r3, [r5, #20]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9309      	str	r3, [sp, #36]	; 0x24
 8005f32:	2320      	movs	r3, #32
 8005f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f3c:	2330      	movs	r3, #48	; 0x30
 8005f3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80060e4 <_svfiprintf_r+0x1e8>
 8005f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f46:	f04f 0901 	mov.w	r9, #1
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f52:	b10a      	cbz	r2, 8005f58 <_svfiprintf_r+0x5c>
 8005f54:	2a25      	cmp	r2, #37	; 0x25
 8005f56:	d1f9      	bne.n	8005f4c <_svfiprintf_r+0x50>
 8005f58:	ebba 0b04 	subs.w	fp, sl, r4
 8005f5c:	d00b      	beq.n	8005f76 <_svfiprintf_r+0x7a>
 8005f5e:	465b      	mov	r3, fp
 8005f60:	4622      	mov	r2, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	4638      	mov	r0, r7
 8005f66:	f7ff ff6f 	bl	8005e48 <__ssputs_r>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f000 80a9 	beq.w	80060c2 <_svfiprintf_r+0x1c6>
 8005f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f72:	445a      	add	r2, fp
 8005f74:	9209      	str	r2, [sp, #36]	; 0x24
 8005f76:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a1 	beq.w	80060c2 <_svfiprintf_r+0x1c6>
 8005f80:	2300      	movs	r3, #0
 8005f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f8a:	f10a 0a01 	add.w	sl, sl, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	9307      	str	r3, [sp, #28]
 8005f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f96:	931a      	str	r3, [sp, #104]	; 0x68
 8005f98:	4654      	mov	r4, sl
 8005f9a:	2205      	movs	r2, #5
 8005f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa0:	4850      	ldr	r0, [pc, #320]	; (80060e4 <_svfiprintf_r+0x1e8>)
 8005fa2:	f7fa f91d 	bl	80001e0 <memchr>
 8005fa6:	9a04      	ldr	r2, [sp, #16]
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_svfiprintf_r+0xe6>
 8005faa:	06d0      	lsls	r0, r2, #27
 8005fac:	bf44      	itt	mi
 8005fae:	2320      	movmi	r3, #32
 8005fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fb4:	0711      	lsls	r1, r2, #28
 8005fb6:	bf44      	itt	mi
 8005fb8:	232b      	movmi	r3, #43	; 0x2b
 8005fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc4:	d015      	beq.n	8005ff2 <_svfiprintf_r+0xf6>
 8005fc6:	9a07      	ldr	r2, [sp, #28]
 8005fc8:	4654      	mov	r4, sl
 8005fca:	2000      	movs	r0, #0
 8005fcc:	f04f 0c0a 	mov.w	ip, #10
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd6:	3b30      	subs	r3, #48	; 0x30
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d94d      	bls.n	8006078 <_svfiprintf_r+0x17c>
 8005fdc:	b1b0      	cbz	r0, 800600c <_svfiprintf_r+0x110>
 8005fde:	9207      	str	r2, [sp, #28]
 8005fe0:	e014      	b.n	800600c <_svfiprintf_r+0x110>
 8005fe2:	eba0 0308 	sub.w	r3, r0, r8
 8005fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	46a2      	mov	sl, r4
 8005ff0:	e7d2      	b.n	8005f98 <_svfiprintf_r+0x9c>
 8005ff2:	9b03      	ldr	r3, [sp, #12]
 8005ff4:	1d19      	adds	r1, r3, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	9103      	str	r1, [sp, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfbb      	ittet	lt
 8005ffe:	425b      	neglt	r3, r3
 8006000:	f042 0202 	orrlt.w	r2, r2, #2
 8006004:	9307      	strge	r3, [sp, #28]
 8006006:	9307      	strlt	r3, [sp, #28]
 8006008:	bfb8      	it	lt
 800600a:	9204      	strlt	r2, [sp, #16]
 800600c:	7823      	ldrb	r3, [r4, #0]
 800600e:	2b2e      	cmp	r3, #46	; 0x2e
 8006010:	d10c      	bne.n	800602c <_svfiprintf_r+0x130>
 8006012:	7863      	ldrb	r3, [r4, #1]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d134      	bne.n	8006082 <_svfiprintf_r+0x186>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	9203      	str	r2, [sp, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	bfb8      	it	lt
 8006024:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006028:	3402      	adds	r4, #2
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80060f4 <_svfiprintf_r+0x1f8>
 8006030:	7821      	ldrb	r1, [r4, #0]
 8006032:	2203      	movs	r2, #3
 8006034:	4650      	mov	r0, sl
 8006036:	f7fa f8d3 	bl	80001e0 <memchr>
 800603a:	b138      	cbz	r0, 800604c <_svfiprintf_r+0x150>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	eba0 000a 	sub.w	r0, r0, sl
 8006042:	2240      	movs	r2, #64	; 0x40
 8006044:	4082      	lsls	r2, r0
 8006046:	4313      	orrs	r3, r2
 8006048:	3401      	adds	r4, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006050:	4825      	ldr	r0, [pc, #148]	; (80060e8 <_svfiprintf_r+0x1ec>)
 8006052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006056:	2206      	movs	r2, #6
 8006058:	f7fa f8c2 	bl	80001e0 <memchr>
 800605c:	2800      	cmp	r0, #0
 800605e:	d038      	beq.n	80060d2 <_svfiprintf_r+0x1d6>
 8006060:	4b22      	ldr	r3, [pc, #136]	; (80060ec <_svfiprintf_r+0x1f0>)
 8006062:	bb1b      	cbnz	r3, 80060ac <_svfiprintf_r+0x1b0>
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	3307      	adds	r3, #7
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	3308      	adds	r3, #8
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006072:	4433      	add	r3, r6
 8006074:	9309      	str	r3, [sp, #36]	; 0x24
 8006076:	e768      	b.n	8005f4a <_svfiprintf_r+0x4e>
 8006078:	fb0c 3202 	mla	r2, ip, r2, r3
 800607c:	460c      	mov	r4, r1
 800607e:	2001      	movs	r0, #1
 8006080:	e7a6      	b.n	8005fd0 <_svfiprintf_r+0xd4>
 8006082:	2300      	movs	r3, #0
 8006084:	3401      	adds	r4, #1
 8006086:	9305      	str	r3, [sp, #20]
 8006088:	4619      	mov	r1, r3
 800608a:	f04f 0c0a 	mov.w	ip, #10
 800608e:	4620      	mov	r0, r4
 8006090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006094:	3a30      	subs	r2, #48	; 0x30
 8006096:	2a09      	cmp	r2, #9
 8006098:	d903      	bls.n	80060a2 <_svfiprintf_r+0x1a6>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0c6      	beq.n	800602c <_svfiprintf_r+0x130>
 800609e:	9105      	str	r1, [sp, #20]
 80060a0:	e7c4      	b.n	800602c <_svfiprintf_r+0x130>
 80060a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a6:	4604      	mov	r4, r0
 80060a8:	2301      	movs	r3, #1
 80060aa:	e7f0      	b.n	800608e <_svfiprintf_r+0x192>
 80060ac:	ab03      	add	r3, sp, #12
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	462a      	mov	r2, r5
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <_svfiprintf_r+0x1f4>)
 80060b4:	a904      	add	r1, sp, #16
 80060b6:	4638      	mov	r0, r7
 80060b8:	f3af 8000 	nop.w
 80060bc:	1c42      	adds	r2, r0, #1
 80060be:	4606      	mov	r6, r0
 80060c0:	d1d6      	bne.n	8006070 <_svfiprintf_r+0x174>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	065b      	lsls	r3, r3, #25
 80060c6:	f53f af2d 	bmi.w	8005f24 <_svfiprintf_r+0x28>
 80060ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060cc:	b01d      	add	sp, #116	; 0x74
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	ab03      	add	r3, sp, #12
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	462a      	mov	r2, r5
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <_svfiprintf_r+0x1f4>)
 80060da:	a904      	add	r1, sp, #16
 80060dc:	4638      	mov	r0, r7
 80060de:	f000 f879 	bl	80061d4 <_printf_i>
 80060e2:	e7eb      	b.n	80060bc <_svfiprintf_r+0x1c0>
 80060e4:	08006d5b 	.word	0x08006d5b
 80060e8:	08006d65 	.word	0x08006d65
 80060ec:	00000000 	.word	0x00000000
 80060f0:	08005e49 	.word	0x08005e49
 80060f4:	08006d61 	.word	0x08006d61

080060f8 <_printf_common>:
 80060f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	4616      	mov	r6, r2
 80060fe:	4699      	mov	r9, r3
 8006100:	688a      	ldr	r2, [r1, #8]
 8006102:	690b      	ldr	r3, [r1, #16]
 8006104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006108:	4293      	cmp	r3, r2
 800610a:	bfb8      	it	lt
 800610c:	4613      	movlt	r3, r2
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006114:	4607      	mov	r7, r0
 8006116:	460c      	mov	r4, r1
 8006118:	b10a      	cbz	r2, 800611e <_printf_common+0x26>
 800611a:	3301      	adds	r3, #1
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	0699      	lsls	r1, r3, #26
 8006122:	bf42      	ittt	mi
 8006124:	6833      	ldrmi	r3, [r6, #0]
 8006126:	3302      	addmi	r3, #2
 8006128:	6033      	strmi	r3, [r6, #0]
 800612a:	6825      	ldr	r5, [r4, #0]
 800612c:	f015 0506 	ands.w	r5, r5, #6
 8006130:	d106      	bne.n	8006140 <_printf_common+0x48>
 8006132:	f104 0a19 	add.w	sl, r4, #25
 8006136:	68e3      	ldr	r3, [r4, #12]
 8006138:	6832      	ldr	r2, [r6, #0]
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc26      	bgt.n	800618e <_printf_common+0x96>
 8006140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006144:	1e13      	subs	r3, r2, #0
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	bf18      	it	ne
 800614a:	2301      	movne	r3, #1
 800614c:	0692      	lsls	r2, r2, #26
 800614e:	d42b      	bmi.n	80061a8 <_printf_common+0xb0>
 8006150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006154:	4649      	mov	r1, r9
 8006156:	4638      	mov	r0, r7
 8006158:	47c0      	blx	r8
 800615a:	3001      	adds	r0, #1
 800615c:	d01e      	beq.n	800619c <_printf_common+0xa4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	6922      	ldr	r2, [r4, #16]
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	2b04      	cmp	r3, #4
 8006168:	bf02      	ittt	eq
 800616a:	68e5      	ldreq	r5, [r4, #12]
 800616c:	6833      	ldreq	r3, [r6, #0]
 800616e:	1aed      	subeq	r5, r5, r3
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	bf0c      	ite	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	2500      	movne	r5, #0
 800617a:	4293      	cmp	r3, r2
 800617c:	bfc4      	itt	gt
 800617e:	1a9b      	subgt	r3, r3, r2
 8006180:	18ed      	addgt	r5, r5, r3
 8006182:	2600      	movs	r6, #0
 8006184:	341a      	adds	r4, #26
 8006186:	42b5      	cmp	r5, r6
 8006188:	d11a      	bne.n	80061c0 <_printf_common+0xc8>
 800618a:	2000      	movs	r0, #0
 800618c:	e008      	b.n	80061a0 <_printf_common+0xa8>
 800618e:	2301      	movs	r3, #1
 8006190:	4652      	mov	r2, sl
 8006192:	4649      	mov	r1, r9
 8006194:	4638      	mov	r0, r7
 8006196:	47c0      	blx	r8
 8006198:	3001      	adds	r0, #1
 800619a:	d103      	bne.n	80061a4 <_printf_common+0xac>
 800619c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a4:	3501      	adds	r5, #1
 80061a6:	e7c6      	b.n	8006136 <_printf_common+0x3e>
 80061a8:	18e1      	adds	r1, r4, r3
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	2030      	movs	r0, #48	; 0x30
 80061ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b2:	4422      	add	r2, r4
 80061b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061bc:	3302      	adds	r3, #2
 80061be:	e7c7      	b.n	8006150 <_printf_common+0x58>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4622      	mov	r2, r4
 80061c4:	4649      	mov	r1, r9
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c0      	blx	r8
 80061ca:	3001      	adds	r0, #1
 80061cc:	d0e6      	beq.n	800619c <_printf_common+0xa4>
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7d9      	b.n	8006186 <_printf_common+0x8e>
	...

080061d4 <_printf_i>:
 80061d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	7e0f      	ldrb	r7, [r1, #24]
 80061da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061dc:	2f78      	cmp	r7, #120	; 0x78
 80061de:	4691      	mov	r9, r2
 80061e0:	4680      	mov	r8, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	469a      	mov	sl, r3
 80061e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ea:	d807      	bhi.n	80061fc <_printf_i+0x28>
 80061ec:	2f62      	cmp	r7, #98	; 0x62
 80061ee:	d80a      	bhi.n	8006206 <_printf_i+0x32>
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f000 80d4 	beq.w	800639e <_printf_i+0x1ca>
 80061f6:	2f58      	cmp	r7, #88	; 0x58
 80061f8:	f000 80c0 	beq.w	800637c <_printf_i+0x1a8>
 80061fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006204:	e03a      	b.n	800627c <_printf_i+0xa8>
 8006206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800620a:	2b15      	cmp	r3, #21
 800620c:	d8f6      	bhi.n	80061fc <_printf_i+0x28>
 800620e:	a101      	add	r1, pc, #4	; (adr r1, 8006214 <_printf_i+0x40>)
 8006210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006214:	0800626d 	.word	0x0800626d
 8006218:	08006281 	.word	0x08006281
 800621c:	080061fd 	.word	0x080061fd
 8006220:	080061fd 	.word	0x080061fd
 8006224:	080061fd 	.word	0x080061fd
 8006228:	080061fd 	.word	0x080061fd
 800622c:	08006281 	.word	0x08006281
 8006230:	080061fd 	.word	0x080061fd
 8006234:	080061fd 	.word	0x080061fd
 8006238:	080061fd 	.word	0x080061fd
 800623c:	080061fd 	.word	0x080061fd
 8006240:	08006385 	.word	0x08006385
 8006244:	080062ad 	.word	0x080062ad
 8006248:	0800633f 	.word	0x0800633f
 800624c:	080061fd 	.word	0x080061fd
 8006250:	080061fd 	.word	0x080061fd
 8006254:	080063a7 	.word	0x080063a7
 8006258:	080061fd 	.word	0x080061fd
 800625c:	080062ad 	.word	0x080062ad
 8006260:	080061fd 	.word	0x080061fd
 8006264:	080061fd 	.word	0x080061fd
 8006268:	08006347 	.word	0x08006347
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	1d1a      	adds	r2, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800627c:	2301      	movs	r3, #1
 800627e:	e09f      	b.n	80063c0 <_printf_i+0x1ec>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	0607      	lsls	r7, r0, #24
 8006286:	f103 0104 	add.w	r1, r3, #4
 800628a:	6029      	str	r1, [r5, #0]
 800628c:	d501      	bpl.n	8006292 <_printf_i+0xbe>
 800628e:	681e      	ldr	r6, [r3, #0]
 8006290:	e003      	b.n	800629a <_printf_i+0xc6>
 8006292:	0646      	lsls	r6, r0, #25
 8006294:	d5fb      	bpl.n	800628e <_printf_i+0xba>
 8006296:	f9b3 6000 	ldrsh.w	r6, [r3]
 800629a:	2e00      	cmp	r6, #0
 800629c:	da03      	bge.n	80062a6 <_printf_i+0xd2>
 800629e:	232d      	movs	r3, #45	; 0x2d
 80062a0:	4276      	negs	r6, r6
 80062a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a6:	485a      	ldr	r0, [pc, #360]	; (8006410 <_printf_i+0x23c>)
 80062a8:	230a      	movs	r3, #10
 80062aa:	e012      	b.n	80062d2 <_printf_i+0xfe>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	6820      	ldr	r0, [r4, #0]
 80062b0:	1d19      	adds	r1, r3, #4
 80062b2:	6029      	str	r1, [r5, #0]
 80062b4:	0605      	lsls	r5, r0, #24
 80062b6:	d501      	bpl.n	80062bc <_printf_i+0xe8>
 80062b8:	681e      	ldr	r6, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <_printf_i+0xee>
 80062bc:	0641      	lsls	r1, r0, #25
 80062be:	d5fb      	bpl.n	80062b8 <_printf_i+0xe4>
 80062c0:	881e      	ldrh	r6, [r3, #0]
 80062c2:	4853      	ldr	r0, [pc, #332]	; (8006410 <_printf_i+0x23c>)
 80062c4:	2f6f      	cmp	r7, #111	; 0x6f
 80062c6:	bf0c      	ite	eq
 80062c8:	2308      	moveq	r3, #8
 80062ca:	230a      	movne	r3, #10
 80062cc:	2100      	movs	r1, #0
 80062ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d2:	6865      	ldr	r5, [r4, #4]
 80062d4:	60a5      	str	r5, [r4, #8]
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	bfa2      	ittt	ge
 80062da:	6821      	ldrge	r1, [r4, #0]
 80062dc:	f021 0104 	bicge.w	r1, r1, #4
 80062e0:	6021      	strge	r1, [r4, #0]
 80062e2:	b90e      	cbnz	r6, 80062e8 <_printf_i+0x114>
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	d04b      	beq.n	8006380 <_printf_i+0x1ac>
 80062e8:	4615      	mov	r5, r2
 80062ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ee:	fb03 6711 	mls	r7, r3, r1, r6
 80062f2:	5dc7      	ldrb	r7, [r0, r7]
 80062f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062f8:	4637      	mov	r7, r6
 80062fa:	42bb      	cmp	r3, r7
 80062fc:	460e      	mov	r6, r1
 80062fe:	d9f4      	bls.n	80062ea <_printf_i+0x116>
 8006300:	2b08      	cmp	r3, #8
 8006302:	d10b      	bne.n	800631c <_printf_i+0x148>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07de      	lsls	r6, r3, #31
 8006308:	d508      	bpl.n	800631c <_printf_i+0x148>
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4299      	cmp	r1, r3
 8006310:	bfde      	ittt	le
 8006312:	2330      	movle	r3, #48	; 0x30
 8006314:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006318:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800631c:	1b52      	subs	r2, r2, r5
 800631e:	6122      	str	r2, [r4, #16]
 8006320:	f8cd a000 	str.w	sl, [sp]
 8006324:	464b      	mov	r3, r9
 8006326:	aa03      	add	r2, sp, #12
 8006328:	4621      	mov	r1, r4
 800632a:	4640      	mov	r0, r8
 800632c:	f7ff fee4 	bl	80060f8 <_printf_common>
 8006330:	3001      	adds	r0, #1
 8006332:	d14a      	bne.n	80063ca <_printf_i+0x1f6>
 8006334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006338:	b004      	add	sp, #16
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f043 0320 	orr.w	r3, r3, #32
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	4833      	ldr	r0, [pc, #204]	; (8006414 <_printf_i+0x240>)
 8006348:	2778      	movs	r7, #120	; 0x78
 800634a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6829      	ldr	r1, [r5, #0]
 8006352:	061f      	lsls	r7, r3, #24
 8006354:	f851 6b04 	ldr.w	r6, [r1], #4
 8006358:	d402      	bmi.n	8006360 <_printf_i+0x18c>
 800635a:	065f      	lsls	r7, r3, #25
 800635c:	bf48      	it	mi
 800635e:	b2b6      	uxthmi	r6, r6
 8006360:	07df      	lsls	r7, r3, #31
 8006362:	bf48      	it	mi
 8006364:	f043 0320 	orrmi.w	r3, r3, #32
 8006368:	6029      	str	r1, [r5, #0]
 800636a:	bf48      	it	mi
 800636c:	6023      	strmi	r3, [r4, #0]
 800636e:	b91e      	cbnz	r6, 8006378 <_printf_i+0x1a4>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f023 0320 	bic.w	r3, r3, #32
 8006376:	6023      	str	r3, [r4, #0]
 8006378:	2310      	movs	r3, #16
 800637a:	e7a7      	b.n	80062cc <_printf_i+0xf8>
 800637c:	4824      	ldr	r0, [pc, #144]	; (8006410 <_printf_i+0x23c>)
 800637e:	e7e4      	b.n	800634a <_printf_i+0x176>
 8006380:	4615      	mov	r5, r2
 8006382:	e7bd      	b.n	8006300 <_printf_i+0x12c>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	6826      	ldr	r6, [r4, #0]
 8006388:	6961      	ldr	r1, [r4, #20]
 800638a:	1d18      	adds	r0, r3, #4
 800638c:	6028      	str	r0, [r5, #0]
 800638e:	0635      	lsls	r5, r6, #24
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	d501      	bpl.n	8006398 <_printf_i+0x1c4>
 8006394:	6019      	str	r1, [r3, #0]
 8006396:	e002      	b.n	800639e <_printf_i+0x1ca>
 8006398:	0670      	lsls	r0, r6, #25
 800639a:	d5fb      	bpl.n	8006394 <_printf_i+0x1c0>
 800639c:	8019      	strh	r1, [r3, #0]
 800639e:	2300      	movs	r3, #0
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	4615      	mov	r5, r2
 80063a4:	e7bc      	b.n	8006320 <_printf_i+0x14c>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	1d1a      	adds	r2, r3, #4
 80063aa:	602a      	str	r2, [r5, #0]
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	6862      	ldr	r2, [r4, #4]
 80063b0:	2100      	movs	r1, #0
 80063b2:	4628      	mov	r0, r5
 80063b4:	f7f9 ff14 	bl	80001e0 <memchr>
 80063b8:	b108      	cbz	r0, 80063be <_printf_i+0x1ea>
 80063ba:	1b40      	subs	r0, r0, r5
 80063bc:	6060      	str	r0, [r4, #4]
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	6123      	str	r3, [r4, #16]
 80063c2:	2300      	movs	r3, #0
 80063c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c8:	e7aa      	b.n	8006320 <_printf_i+0x14c>
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4649      	mov	r1, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	47d0      	blx	sl
 80063d4:	3001      	adds	r0, #1
 80063d6:	d0ad      	beq.n	8006334 <_printf_i+0x160>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	079b      	lsls	r3, r3, #30
 80063dc:	d413      	bmi.n	8006406 <_printf_i+0x232>
 80063de:	68e0      	ldr	r0, [r4, #12]
 80063e0:	9b03      	ldr	r3, [sp, #12]
 80063e2:	4298      	cmp	r0, r3
 80063e4:	bfb8      	it	lt
 80063e6:	4618      	movlt	r0, r3
 80063e8:	e7a6      	b.n	8006338 <_printf_i+0x164>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4632      	mov	r2, r6
 80063ee:	4649      	mov	r1, r9
 80063f0:	4640      	mov	r0, r8
 80063f2:	47d0      	blx	sl
 80063f4:	3001      	adds	r0, #1
 80063f6:	d09d      	beq.n	8006334 <_printf_i+0x160>
 80063f8:	3501      	adds	r5, #1
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	9903      	ldr	r1, [sp, #12]
 80063fe:	1a5b      	subs	r3, r3, r1
 8006400:	42ab      	cmp	r3, r5
 8006402:	dcf2      	bgt.n	80063ea <_printf_i+0x216>
 8006404:	e7eb      	b.n	80063de <_printf_i+0x20a>
 8006406:	2500      	movs	r5, #0
 8006408:	f104 0619 	add.w	r6, r4, #25
 800640c:	e7f5      	b.n	80063fa <_printf_i+0x226>
 800640e:	bf00      	nop
 8006410:	08006d6c 	.word	0x08006d6c
 8006414:	08006d7d 	.word	0x08006d7d

08006418 <__sflush_r>:
 8006418:	898a      	ldrh	r2, [r1, #12]
 800641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	0710      	lsls	r0, r2, #28
 8006422:	460c      	mov	r4, r1
 8006424:	d458      	bmi.n	80064d8 <__sflush_r+0xc0>
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	dc05      	bgt.n	8006438 <__sflush_r+0x20>
 800642c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	dc02      	bgt.n	8006438 <__sflush_r+0x20>
 8006432:	2000      	movs	r0, #0
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800643a:	2e00      	cmp	r6, #0
 800643c:	d0f9      	beq.n	8006432 <__sflush_r+0x1a>
 800643e:	2300      	movs	r3, #0
 8006440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006444:	682f      	ldr	r7, [r5, #0]
 8006446:	6a21      	ldr	r1, [r4, #32]
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	d032      	beq.n	80064b2 <__sflush_r+0x9a>
 800644c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	075a      	lsls	r2, r3, #29
 8006452:	d505      	bpl.n	8006460 <__sflush_r+0x48>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800645a:	b10b      	cbz	r3, 8006460 <__sflush_r+0x48>
 800645c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800645e:	1ac0      	subs	r0, r0, r3
 8006460:	2300      	movs	r3, #0
 8006462:	4602      	mov	r2, r0
 8006464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006466:	6a21      	ldr	r1, [r4, #32]
 8006468:	4628      	mov	r0, r5
 800646a:	47b0      	blx	r6
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	d106      	bne.n	8006480 <__sflush_r+0x68>
 8006472:	6829      	ldr	r1, [r5, #0]
 8006474:	291d      	cmp	r1, #29
 8006476:	d82b      	bhi.n	80064d0 <__sflush_r+0xb8>
 8006478:	4a29      	ldr	r2, [pc, #164]	; (8006520 <__sflush_r+0x108>)
 800647a:	410a      	asrs	r2, r1
 800647c:	07d6      	lsls	r6, r2, #31
 800647e:	d427      	bmi.n	80064d0 <__sflush_r+0xb8>
 8006480:	2200      	movs	r2, #0
 8006482:	6062      	str	r2, [r4, #4]
 8006484:	04d9      	lsls	r1, r3, #19
 8006486:	6922      	ldr	r2, [r4, #16]
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	d504      	bpl.n	8006496 <__sflush_r+0x7e>
 800648c:	1c42      	adds	r2, r0, #1
 800648e:	d101      	bne.n	8006494 <__sflush_r+0x7c>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b903      	cbnz	r3, 8006496 <__sflush_r+0x7e>
 8006494:	6560      	str	r0, [r4, #84]	; 0x54
 8006496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006498:	602f      	str	r7, [r5, #0]
 800649a:	2900      	cmp	r1, #0
 800649c:	d0c9      	beq.n	8006432 <__sflush_r+0x1a>
 800649e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d002      	beq.n	80064ac <__sflush_r+0x94>
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff fbce 	bl	8005c48 <_free_r>
 80064ac:	2000      	movs	r0, #0
 80064ae:	6360      	str	r0, [r4, #52]	; 0x34
 80064b0:	e7c0      	b.n	8006434 <__sflush_r+0x1c>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	1c41      	adds	r1, r0, #1
 80064ba:	d1c8      	bne.n	800644e <__sflush_r+0x36>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0c5      	beq.n	800644e <__sflush_r+0x36>
 80064c2:	2b1d      	cmp	r3, #29
 80064c4:	d001      	beq.n	80064ca <__sflush_r+0xb2>
 80064c6:	2b16      	cmp	r3, #22
 80064c8:	d101      	bne.n	80064ce <__sflush_r+0xb6>
 80064ca:	602f      	str	r7, [r5, #0]
 80064cc:	e7b1      	b.n	8006432 <__sflush_r+0x1a>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	e7ad      	b.n	8006434 <__sflush_r+0x1c>
 80064d8:	690f      	ldr	r7, [r1, #16]
 80064da:	2f00      	cmp	r7, #0
 80064dc:	d0a9      	beq.n	8006432 <__sflush_r+0x1a>
 80064de:	0793      	lsls	r3, r2, #30
 80064e0:	680e      	ldr	r6, [r1, #0]
 80064e2:	bf08      	it	eq
 80064e4:	694b      	ldreq	r3, [r1, #20]
 80064e6:	600f      	str	r7, [r1, #0]
 80064e8:	bf18      	it	ne
 80064ea:	2300      	movne	r3, #0
 80064ec:	eba6 0807 	sub.w	r8, r6, r7
 80064f0:	608b      	str	r3, [r1, #8]
 80064f2:	f1b8 0f00 	cmp.w	r8, #0
 80064f6:	dd9c      	ble.n	8006432 <__sflush_r+0x1a>
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064fc:	4643      	mov	r3, r8
 80064fe:	463a      	mov	r2, r7
 8006500:	4628      	mov	r0, r5
 8006502:	47b0      	blx	r6
 8006504:	2800      	cmp	r0, #0
 8006506:	dc06      	bgt.n	8006516 <__sflush_r+0xfe>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006514:	e78e      	b.n	8006434 <__sflush_r+0x1c>
 8006516:	4407      	add	r7, r0
 8006518:	eba8 0800 	sub.w	r8, r8, r0
 800651c:	e7e9      	b.n	80064f2 <__sflush_r+0xda>
 800651e:	bf00      	nop
 8006520:	dfbffffe 	.word	0xdfbffffe

08006524 <_fflush_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	690b      	ldr	r3, [r1, #16]
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b913      	cbnz	r3, 8006534 <_fflush_r+0x10>
 800652e:	2500      	movs	r5, #0
 8006530:	4628      	mov	r0, r5
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	b118      	cbz	r0, 800653e <_fflush_r+0x1a>
 8006536:	6a03      	ldr	r3, [r0, #32]
 8006538:	b90b      	cbnz	r3, 800653e <_fflush_r+0x1a>
 800653a:	f7ff f9ef 	bl	800591c <__sinit>
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f3      	beq.n	800652e <_fflush_r+0xa>
 8006546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d404      	bmi.n	8006556 <_fflush_r+0x32>
 800654c:	0599      	lsls	r1, r3, #22
 800654e:	d402      	bmi.n	8006556 <_fflush_r+0x32>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f7ff fb4b 	bl	8005bec <__retarget_lock_acquire_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	4621      	mov	r1, r4
 800655a:	f7ff ff5d 	bl	8006418 <__sflush_r>
 800655e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006560:	07da      	lsls	r2, r3, #31
 8006562:	4605      	mov	r5, r0
 8006564:	d4e4      	bmi.n	8006530 <_fflush_r+0xc>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	d4e1      	bmi.n	8006530 <_fflush_r+0xc>
 800656c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656e:	f7ff fb3e 	bl	8005bee <__retarget_lock_release_recursive>
 8006572:	e7dd      	b.n	8006530 <_fflush_r+0xc>

08006574 <fiprintf>:
 8006574:	b40e      	push	{r1, r2, r3}
 8006576:	b503      	push	{r0, r1, lr}
 8006578:	4601      	mov	r1, r0
 800657a:	ab03      	add	r3, sp, #12
 800657c:	4805      	ldr	r0, [pc, #20]	; (8006594 <fiprintf+0x20>)
 800657e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006582:	6800      	ldr	r0, [r0, #0]
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	f000 f891 	bl	80066ac <_vfiprintf_r>
 800658a:	b002      	add	sp, #8
 800658c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006590:	b003      	add	sp, #12
 8006592:	4770      	bx	lr
 8006594:	20000068 	.word	0x20000068

08006598 <memmove>:
 8006598:	4288      	cmp	r0, r1
 800659a:	b510      	push	{r4, lr}
 800659c:	eb01 0402 	add.w	r4, r1, r2
 80065a0:	d902      	bls.n	80065a8 <memmove+0x10>
 80065a2:	4284      	cmp	r4, r0
 80065a4:	4623      	mov	r3, r4
 80065a6:	d807      	bhi.n	80065b8 <memmove+0x20>
 80065a8:	1e43      	subs	r3, r0, #1
 80065aa:	42a1      	cmp	r1, r4
 80065ac:	d008      	beq.n	80065c0 <memmove+0x28>
 80065ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b6:	e7f8      	b.n	80065aa <memmove+0x12>
 80065b8:	4402      	add	r2, r0
 80065ba:	4601      	mov	r1, r0
 80065bc:	428a      	cmp	r2, r1
 80065be:	d100      	bne.n	80065c2 <memmove+0x2a>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ca:	e7f7      	b.n	80065bc <memmove+0x24>

080065cc <_sbrk_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_sbrk_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa f9b2 	bl	8000940 <_sbrk>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_sbrk_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_sbrk_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	2000129c 	.word	0x2000129c

080065ec <abort>:
 80065ec:	b508      	push	{r3, lr}
 80065ee:	2006      	movs	r0, #6
 80065f0:	f000 fa34 	bl	8006a5c <raise>
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7fa f92b 	bl	8000850 <_exit>

080065fa <_realloc_r>:
 80065fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	4680      	mov	r8, r0
 8006600:	4614      	mov	r4, r2
 8006602:	460e      	mov	r6, r1
 8006604:	b921      	cbnz	r1, 8006610 <_realloc_r+0x16>
 8006606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	4611      	mov	r1, r2
 800660c:	f7ff bb90 	b.w	8005d30 <_malloc_r>
 8006610:	b92a      	cbnz	r2, 800661e <_realloc_r+0x24>
 8006612:	f7ff fb19 	bl	8005c48 <_free_r>
 8006616:	4625      	mov	r5, r4
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661e:	f000 fa39 	bl	8006a94 <_malloc_usable_size_r>
 8006622:	4284      	cmp	r4, r0
 8006624:	4607      	mov	r7, r0
 8006626:	d802      	bhi.n	800662e <_realloc_r+0x34>
 8006628:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800662c:	d812      	bhi.n	8006654 <_realloc_r+0x5a>
 800662e:	4621      	mov	r1, r4
 8006630:	4640      	mov	r0, r8
 8006632:	f7ff fb7d 	bl	8005d30 <_malloc_r>
 8006636:	4605      	mov	r5, r0
 8006638:	2800      	cmp	r0, #0
 800663a:	d0ed      	beq.n	8006618 <_realloc_r+0x1e>
 800663c:	42bc      	cmp	r4, r7
 800663e:	4622      	mov	r2, r4
 8006640:	4631      	mov	r1, r6
 8006642:	bf28      	it	cs
 8006644:	463a      	movcs	r2, r7
 8006646:	f7ff fad3 	bl	8005bf0 <memcpy>
 800664a:	4631      	mov	r1, r6
 800664c:	4640      	mov	r0, r8
 800664e:	f7ff fafb 	bl	8005c48 <_free_r>
 8006652:	e7e1      	b.n	8006618 <_realloc_r+0x1e>
 8006654:	4635      	mov	r5, r6
 8006656:	e7df      	b.n	8006618 <_realloc_r+0x1e>

08006658 <__sfputc_r>:
 8006658:	6893      	ldr	r3, [r2, #8]
 800665a:	3b01      	subs	r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	b410      	push	{r4}
 8006660:	6093      	str	r3, [r2, #8]
 8006662:	da08      	bge.n	8006676 <__sfputc_r+0x1e>
 8006664:	6994      	ldr	r4, [r2, #24]
 8006666:	42a3      	cmp	r3, r4
 8006668:	db01      	blt.n	800666e <__sfputc_r+0x16>
 800666a:	290a      	cmp	r1, #10
 800666c:	d103      	bne.n	8006676 <__sfputc_r+0x1e>
 800666e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006672:	f000 b935 	b.w	80068e0 <__swbuf_r>
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	1c58      	adds	r0, r3, #1
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	7019      	strb	r1, [r3, #0]
 800667e:	4608      	mov	r0, r1
 8006680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006684:	4770      	bx	lr

08006686 <__sfputs_r>:
 8006686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	4614      	mov	r4, r2
 800668e:	18d5      	adds	r5, r2, r3
 8006690:	42ac      	cmp	r4, r5
 8006692:	d101      	bne.n	8006698 <__sfputs_r+0x12>
 8006694:	2000      	movs	r0, #0
 8006696:	e007      	b.n	80066a8 <__sfputs_r+0x22>
 8006698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669c:	463a      	mov	r2, r7
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffda 	bl	8006658 <__sfputc_r>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d1f3      	bne.n	8006690 <__sfputs_r+0xa>
 80066a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066ac <_vfiprintf_r>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	460d      	mov	r5, r1
 80066b2:	b09d      	sub	sp, #116	; 0x74
 80066b4:	4614      	mov	r4, r2
 80066b6:	4698      	mov	r8, r3
 80066b8:	4606      	mov	r6, r0
 80066ba:	b118      	cbz	r0, 80066c4 <_vfiprintf_r+0x18>
 80066bc:	6a03      	ldr	r3, [r0, #32]
 80066be:	b90b      	cbnz	r3, 80066c4 <_vfiprintf_r+0x18>
 80066c0:	f7ff f92c 	bl	800591c <__sinit>
 80066c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	d405      	bmi.n	80066d6 <_vfiprintf_r+0x2a>
 80066ca:	89ab      	ldrh	r3, [r5, #12]
 80066cc:	059a      	lsls	r2, r3, #22
 80066ce:	d402      	bmi.n	80066d6 <_vfiprintf_r+0x2a>
 80066d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066d2:	f7ff fa8b 	bl	8005bec <__retarget_lock_acquire_recursive>
 80066d6:	89ab      	ldrh	r3, [r5, #12]
 80066d8:	071b      	lsls	r3, r3, #28
 80066da:	d501      	bpl.n	80066e0 <_vfiprintf_r+0x34>
 80066dc:	692b      	ldr	r3, [r5, #16]
 80066de:	b99b      	cbnz	r3, 8006708 <_vfiprintf_r+0x5c>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 f93a 	bl	800695c <__swsetup_r>
 80066e8:	b170      	cbz	r0, 8006708 <_vfiprintf_r+0x5c>
 80066ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ec:	07dc      	lsls	r4, r3, #31
 80066ee:	d504      	bpl.n	80066fa <_vfiprintf_r+0x4e>
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f4:	b01d      	add	sp, #116	; 0x74
 80066f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	0598      	lsls	r0, r3, #22
 80066fe:	d4f7      	bmi.n	80066f0 <_vfiprintf_r+0x44>
 8006700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006702:	f7ff fa74 	bl	8005bee <__retarget_lock_release_recursive>
 8006706:	e7f3      	b.n	80066f0 <_vfiprintf_r+0x44>
 8006708:	2300      	movs	r3, #0
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	2320      	movs	r3, #32
 800670e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006712:	f8cd 800c 	str.w	r8, [sp, #12]
 8006716:	2330      	movs	r3, #48	; 0x30
 8006718:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80068cc <_vfiprintf_r+0x220>
 800671c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006720:	f04f 0901 	mov.w	r9, #1
 8006724:	4623      	mov	r3, r4
 8006726:	469a      	mov	sl, r3
 8006728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672c:	b10a      	cbz	r2, 8006732 <_vfiprintf_r+0x86>
 800672e:	2a25      	cmp	r2, #37	; 0x25
 8006730:	d1f9      	bne.n	8006726 <_vfiprintf_r+0x7a>
 8006732:	ebba 0b04 	subs.w	fp, sl, r4
 8006736:	d00b      	beq.n	8006750 <_vfiprintf_r+0xa4>
 8006738:	465b      	mov	r3, fp
 800673a:	4622      	mov	r2, r4
 800673c:	4629      	mov	r1, r5
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ffa1 	bl	8006686 <__sfputs_r>
 8006744:	3001      	adds	r0, #1
 8006746:	f000 80a9 	beq.w	800689c <_vfiprintf_r+0x1f0>
 800674a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800674c:	445a      	add	r2, fp
 800674e:	9209      	str	r2, [sp, #36]	; 0x24
 8006750:	f89a 3000 	ldrb.w	r3, [sl]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80a1 	beq.w	800689c <_vfiprintf_r+0x1f0>
 800675a:	2300      	movs	r3, #0
 800675c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006764:	f10a 0a01 	add.w	sl, sl, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	9307      	str	r3, [sp, #28]
 800676c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006770:	931a      	str	r3, [sp, #104]	; 0x68
 8006772:	4654      	mov	r4, sl
 8006774:	2205      	movs	r2, #5
 8006776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677a:	4854      	ldr	r0, [pc, #336]	; (80068cc <_vfiprintf_r+0x220>)
 800677c:	f7f9 fd30 	bl	80001e0 <memchr>
 8006780:	9a04      	ldr	r2, [sp, #16]
 8006782:	b9d8      	cbnz	r0, 80067bc <_vfiprintf_r+0x110>
 8006784:	06d1      	lsls	r1, r2, #27
 8006786:	bf44      	itt	mi
 8006788:	2320      	movmi	r3, #32
 800678a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678e:	0713      	lsls	r3, r2, #28
 8006790:	bf44      	itt	mi
 8006792:	232b      	movmi	r3, #43	; 0x2b
 8006794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006798:	f89a 3000 	ldrb.w	r3, [sl]
 800679c:	2b2a      	cmp	r3, #42	; 0x2a
 800679e:	d015      	beq.n	80067cc <_vfiprintf_r+0x120>
 80067a0:	9a07      	ldr	r2, [sp, #28]
 80067a2:	4654      	mov	r4, sl
 80067a4:	2000      	movs	r0, #0
 80067a6:	f04f 0c0a 	mov.w	ip, #10
 80067aa:	4621      	mov	r1, r4
 80067ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067b0:	3b30      	subs	r3, #48	; 0x30
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d94d      	bls.n	8006852 <_vfiprintf_r+0x1a6>
 80067b6:	b1b0      	cbz	r0, 80067e6 <_vfiprintf_r+0x13a>
 80067b8:	9207      	str	r2, [sp, #28]
 80067ba:	e014      	b.n	80067e6 <_vfiprintf_r+0x13a>
 80067bc:	eba0 0308 	sub.w	r3, r0, r8
 80067c0:	fa09 f303 	lsl.w	r3, r9, r3
 80067c4:	4313      	orrs	r3, r2
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	46a2      	mov	sl, r4
 80067ca:	e7d2      	b.n	8006772 <_vfiprintf_r+0xc6>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	1d19      	adds	r1, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9103      	str	r1, [sp, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbb      	ittet	lt
 80067d8:	425b      	neglt	r3, r3
 80067da:	f042 0202 	orrlt.w	r2, r2, #2
 80067de:	9307      	strge	r3, [sp, #28]
 80067e0:	9307      	strlt	r3, [sp, #28]
 80067e2:	bfb8      	it	lt
 80067e4:	9204      	strlt	r2, [sp, #16]
 80067e6:	7823      	ldrb	r3, [r4, #0]
 80067e8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ea:	d10c      	bne.n	8006806 <_vfiprintf_r+0x15a>
 80067ec:	7863      	ldrb	r3, [r4, #1]
 80067ee:	2b2a      	cmp	r3, #42	; 0x2a
 80067f0:	d134      	bne.n	800685c <_vfiprintf_r+0x1b0>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	9203      	str	r2, [sp, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfb8      	it	lt
 80067fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006802:	3402      	adds	r4, #2
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80068dc <_vfiprintf_r+0x230>
 800680a:	7821      	ldrb	r1, [r4, #0]
 800680c:	2203      	movs	r2, #3
 800680e:	4650      	mov	r0, sl
 8006810:	f7f9 fce6 	bl	80001e0 <memchr>
 8006814:	b138      	cbz	r0, 8006826 <_vfiprintf_r+0x17a>
 8006816:	9b04      	ldr	r3, [sp, #16]
 8006818:	eba0 000a 	sub.w	r0, r0, sl
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	4082      	lsls	r2, r0
 8006820:	4313      	orrs	r3, r2
 8006822:	3401      	adds	r4, #1
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800682a:	4829      	ldr	r0, [pc, #164]	; (80068d0 <_vfiprintf_r+0x224>)
 800682c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006830:	2206      	movs	r2, #6
 8006832:	f7f9 fcd5 	bl	80001e0 <memchr>
 8006836:	2800      	cmp	r0, #0
 8006838:	d03f      	beq.n	80068ba <_vfiprintf_r+0x20e>
 800683a:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <_vfiprintf_r+0x228>)
 800683c:	bb1b      	cbnz	r3, 8006886 <_vfiprintf_r+0x1da>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	3307      	adds	r3, #7
 8006842:	f023 0307 	bic.w	r3, r3, #7
 8006846:	3308      	adds	r3, #8
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684c:	443b      	add	r3, r7
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	e768      	b.n	8006724 <_vfiprintf_r+0x78>
 8006852:	fb0c 3202 	mla	r2, ip, r2, r3
 8006856:	460c      	mov	r4, r1
 8006858:	2001      	movs	r0, #1
 800685a:	e7a6      	b.n	80067aa <_vfiprintf_r+0xfe>
 800685c:	2300      	movs	r3, #0
 800685e:	3401      	adds	r4, #1
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	4619      	mov	r1, r3
 8006864:	f04f 0c0a 	mov.w	ip, #10
 8006868:	4620      	mov	r0, r4
 800686a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800686e:	3a30      	subs	r2, #48	; 0x30
 8006870:	2a09      	cmp	r2, #9
 8006872:	d903      	bls.n	800687c <_vfiprintf_r+0x1d0>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0c6      	beq.n	8006806 <_vfiprintf_r+0x15a>
 8006878:	9105      	str	r1, [sp, #20]
 800687a:	e7c4      	b.n	8006806 <_vfiprintf_r+0x15a>
 800687c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006880:	4604      	mov	r4, r0
 8006882:	2301      	movs	r3, #1
 8006884:	e7f0      	b.n	8006868 <_vfiprintf_r+0x1bc>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <_vfiprintf_r+0x22c>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	4630      	mov	r0, r6
 8006892:	f3af 8000 	nop.w
 8006896:	4607      	mov	r7, r0
 8006898:	1c78      	adds	r0, r7, #1
 800689a:	d1d6      	bne.n	800684a <_vfiprintf_r+0x19e>
 800689c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800689e:	07d9      	lsls	r1, r3, #31
 80068a0:	d405      	bmi.n	80068ae <_vfiprintf_r+0x202>
 80068a2:	89ab      	ldrh	r3, [r5, #12]
 80068a4:	059a      	lsls	r2, r3, #22
 80068a6:	d402      	bmi.n	80068ae <_vfiprintf_r+0x202>
 80068a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068aa:	f7ff f9a0 	bl	8005bee <__retarget_lock_release_recursive>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	065b      	lsls	r3, r3, #25
 80068b2:	f53f af1d 	bmi.w	80066f0 <_vfiprintf_r+0x44>
 80068b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b8:	e71c      	b.n	80066f4 <_vfiprintf_r+0x48>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <_vfiprintf_r+0x22c>)
 80068c2:	a904      	add	r1, sp, #16
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff fc85 	bl	80061d4 <_printf_i>
 80068ca:	e7e4      	b.n	8006896 <_vfiprintf_r+0x1ea>
 80068cc:	08006d5b 	.word	0x08006d5b
 80068d0:	08006d65 	.word	0x08006d65
 80068d4:	00000000 	.word	0x00000000
 80068d8:	08006687 	.word	0x08006687
 80068dc:	08006d61 	.word	0x08006d61

080068e0 <__swbuf_r>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	460e      	mov	r6, r1
 80068e4:	4614      	mov	r4, r2
 80068e6:	4605      	mov	r5, r0
 80068e8:	b118      	cbz	r0, 80068f2 <__swbuf_r+0x12>
 80068ea:	6a03      	ldr	r3, [r0, #32]
 80068ec:	b90b      	cbnz	r3, 80068f2 <__swbuf_r+0x12>
 80068ee:	f7ff f815 	bl	800591c <__sinit>
 80068f2:	69a3      	ldr	r3, [r4, #24]
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	071a      	lsls	r2, r3, #28
 80068fa:	d525      	bpl.n	8006948 <__swbuf_r+0x68>
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	b31b      	cbz	r3, 8006948 <__swbuf_r+0x68>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	6922      	ldr	r2, [r4, #16]
 8006904:	1a98      	subs	r0, r3, r2
 8006906:	6963      	ldr	r3, [r4, #20]
 8006908:	b2f6      	uxtb	r6, r6
 800690a:	4283      	cmp	r3, r0
 800690c:	4637      	mov	r7, r6
 800690e:	dc04      	bgt.n	800691a <__swbuf_r+0x3a>
 8006910:	4621      	mov	r1, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f7ff fe06 	bl	8006524 <_fflush_r>
 8006918:	b9e0      	cbnz	r0, 8006954 <__swbuf_r+0x74>
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	3b01      	subs	r3, #1
 800691e:	60a3      	str	r3, [r4, #8]
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	6022      	str	r2, [r4, #0]
 8006926:	701e      	strb	r6, [r3, #0]
 8006928:	6962      	ldr	r2, [r4, #20]
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	429a      	cmp	r2, r3
 800692e:	d004      	beq.n	800693a <__swbuf_r+0x5a>
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	07db      	lsls	r3, r3, #31
 8006934:	d506      	bpl.n	8006944 <__swbuf_r+0x64>
 8006936:	2e0a      	cmp	r6, #10
 8006938:	d104      	bne.n	8006944 <__swbuf_r+0x64>
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f7ff fdf1 	bl	8006524 <_fflush_r>
 8006942:	b938      	cbnz	r0, 8006954 <__swbuf_r+0x74>
 8006944:	4638      	mov	r0, r7
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006948:	4621      	mov	r1, r4
 800694a:	4628      	mov	r0, r5
 800694c:	f000 f806 	bl	800695c <__swsetup_r>
 8006950:	2800      	cmp	r0, #0
 8006952:	d0d5      	beq.n	8006900 <__swbuf_r+0x20>
 8006954:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006958:	e7f4      	b.n	8006944 <__swbuf_r+0x64>
	...

0800695c <__swsetup_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4b2a      	ldr	r3, [pc, #168]	; (8006a08 <__swsetup_r+0xac>)
 8006960:	4605      	mov	r5, r0
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	460c      	mov	r4, r1
 8006966:	b118      	cbz	r0, 8006970 <__swsetup_r+0x14>
 8006968:	6a03      	ldr	r3, [r0, #32]
 800696a:	b90b      	cbnz	r3, 8006970 <__swsetup_r+0x14>
 800696c:	f7fe ffd6 	bl	800591c <__sinit>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006976:	0718      	lsls	r0, r3, #28
 8006978:	d422      	bmi.n	80069c0 <__swsetup_r+0x64>
 800697a:	06d9      	lsls	r1, r3, #27
 800697c:	d407      	bmi.n	800698e <__swsetup_r+0x32>
 800697e:	2309      	movs	r3, #9
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800698c:	e034      	b.n	80069f8 <__swsetup_r+0x9c>
 800698e:	0758      	lsls	r0, r3, #29
 8006990:	d512      	bpl.n	80069b8 <__swsetup_r+0x5c>
 8006992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006994:	b141      	cbz	r1, 80069a8 <__swsetup_r+0x4c>
 8006996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800699a:	4299      	cmp	r1, r3
 800699c:	d002      	beq.n	80069a4 <__swsetup_r+0x48>
 800699e:	4628      	mov	r0, r5
 80069a0:	f7ff f952 	bl	8005c48 <_free_r>
 80069a4:	2300      	movs	r3, #0
 80069a6:	6363      	str	r3, [r4, #52]	; 0x34
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	2300      	movs	r3, #0
 80069b2:	6063      	str	r3, [r4, #4]
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f043 0308 	orr.w	r3, r3, #8
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	b94b      	cbnz	r3, 80069d8 <__swsetup_r+0x7c>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ce:	d003      	beq.n	80069d8 <__swsetup_r+0x7c>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f88c 	bl	8006af0 <__smakebuf_r>
 80069d8:	89a0      	ldrh	r0, [r4, #12]
 80069da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069de:	f010 0301 	ands.w	r3, r0, #1
 80069e2:	d00a      	beq.n	80069fa <__swsetup_r+0x9e>
 80069e4:	2300      	movs	r3, #0
 80069e6:	60a3      	str	r3, [r4, #8]
 80069e8:	6963      	ldr	r3, [r4, #20]
 80069ea:	425b      	negs	r3, r3
 80069ec:	61a3      	str	r3, [r4, #24]
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	b943      	cbnz	r3, 8006a04 <__swsetup_r+0xa8>
 80069f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069f6:	d1c4      	bne.n	8006982 <__swsetup_r+0x26>
 80069f8:	bd38      	pop	{r3, r4, r5, pc}
 80069fa:	0781      	lsls	r1, r0, #30
 80069fc:	bf58      	it	pl
 80069fe:	6963      	ldrpl	r3, [r4, #20]
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	e7f4      	b.n	80069ee <__swsetup_r+0x92>
 8006a04:	2000      	movs	r0, #0
 8006a06:	e7f7      	b.n	80069f8 <__swsetup_r+0x9c>
 8006a08:	20000068 	.word	0x20000068

08006a0c <_raise_r>:
 8006a0c:	291f      	cmp	r1, #31
 8006a0e:	b538      	push	{r3, r4, r5, lr}
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	d904      	bls.n	8006a20 <_raise_r+0x14>
 8006a16:	2316      	movs	r3, #22
 8006a18:	6003      	str	r3, [r0, #0]
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a22:	b112      	cbz	r2, 8006a2a <_raise_r+0x1e>
 8006a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a28:	b94b      	cbnz	r3, 8006a3e <_raise_r+0x32>
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f830 	bl	8006a90 <_getpid_r>
 8006a30:	462a      	mov	r2, r5
 8006a32:	4601      	mov	r1, r0
 8006a34:	4620      	mov	r0, r4
 8006a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a3a:	f000 b817 	b.w	8006a6c <_kill_r>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d00a      	beq.n	8006a58 <_raise_r+0x4c>
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	d103      	bne.n	8006a4e <_raise_r+0x42>
 8006a46:	2316      	movs	r3, #22
 8006a48:	6003      	str	r3, [r0, #0]
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	e7e7      	b.n	8006a1e <_raise_r+0x12>
 8006a4e:	2400      	movs	r4, #0
 8006a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a54:	4628      	mov	r0, r5
 8006a56:	4798      	blx	r3
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e7e0      	b.n	8006a1e <_raise_r+0x12>

08006a5c <raise>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	; (8006a68 <raise+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f7ff bfd3 	b.w	8006a0c <_raise_r>
 8006a66:	bf00      	nop
 8006a68:	20000068 	.word	0x20000068

08006a6c <_kill_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	; (8006a8c <_kill_r+0x20>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f7f9 fed9 	bl	8000830 <_kill>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d102      	bne.n	8006a88 <_kill_r+0x1c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b103      	cbz	r3, 8006a88 <_kill_r+0x1c>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2000129c 	.word	0x2000129c

08006a90 <_getpid_r>:
 8006a90:	f7f9 bec6 	b.w	8000820 <_getpid>

08006a94 <_malloc_usable_size_r>:
 8006a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a98:	1f18      	subs	r0, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfbc      	itt	lt
 8006a9e:	580b      	ldrlt	r3, [r1, r0]
 8006aa0:	18c0      	addlt	r0, r0, r3
 8006aa2:	4770      	bx	lr

08006aa4 <__swhatbuf_r>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aac:	2900      	cmp	r1, #0
 8006aae:	b096      	sub	sp, #88	; 0x58
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	461e      	mov	r6, r3
 8006ab4:	da0d      	bge.n	8006ad2 <__swhatbuf_r+0x2e>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006abc:	f04f 0100 	mov.w	r1, #0
 8006ac0:	bf0c      	ite	eq
 8006ac2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ac6:	2340      	movne	r3, #64	; 0x40
 8006ac8:	2000      	movs	r0, #0
 8006aca:	6031      	str	r1, [r6, #0]
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	b016      	add	sp, #88	; 0x58
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	466a      	mov	r2, sp
 8006ad4:	f000 f848 	bl	8006b68 <_fstat_r>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	dbec      	blt.n	8006ab6 <__swhatbuf_r+0x12>
 8006adc:	9901      	ldr	r1, [sp, #4]
 8006ade:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ae2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ae6:	4259      	negs	r1, r3
 8006ae8:	4159      	adcs	r1, r3
 8006aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aee:	e7eb      	b.n	8006ac8 <__swhatbuf_r+0x24>

08006af0 <__smakebuf_r>:
 8006af0:	898b      	ldrh	r3, [r1, #12]
 8006af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af4:	079d      	lsls	r5, r3, #30
 8006af6:	4606      	mov	r6, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	d507      	bpl.n	8006b0c <__smakebuf_r+0x1c>
 8006afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	2301      	movs	r3, #1
 8006b06:	6163      	str	r3, [r4, #20]
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	ab01      	add	r3, sp, #4
 8006b0e:	466a      	mov	r2, sp
 8006b10:	f7ff ffc8 	bl	8006aa4 <__swhatbuf_r>
 8006b14:	9900      	ldr	r1, [sp, #0]
 8006b16:	4605      	mov	r5, r0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff f909 	bl	8005d30 <_malloc_r>
 8006b1e:	b948      	cbnz	r0, 8006b34 <__smakebuf_r+0x44>
 8006b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b24:	059a      	lsls	r2, r3, #22
 8006b26:	d4ef      	bmi.n	8006b08 <__smakebuf_r+0x18>
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	e7e3      	b.n	8006afc <__smakebuf_r+0xc>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	6020      	str	r0, [r4, #0]
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	9b00      	ldr	r3, [sp, #0]
 8006b40:	6163      	str	r3, [r4, #20]
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	6120      	str	r0, [r4, #16]
 8006b46:	b15b      	cbz	r3, 8006b60 <__smakebuf_r+0x70>
 8006b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 f81d 	bl	8006b8c <_isatty_r>
 8006b52:	b128      	cbz	r0, 8006b60 <__smakebuf_r+0x70>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	431d      	orrs	r5, r3
 8006b64:	81a5      	strh	r5, [r4, #12]
 8006b66:	e7cf      	b.n	8006b08 <__smakebuf_r+0x18>

08006b68 <_fstat_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	; (8006b88 <_fstat_r+0x20>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	f7f9 feba 	bl	80008ee <_fstat>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d102      	bne.n	8006b84 <_fstat_r+0x1c>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	b103      	cbz	r3, 8006b84 <_fstat_r+0x1c>
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	bf00      	nop
 8006b88:	2000129c 	.word	0x2000129c

08006b8c <_isatty_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d06      	ldr	r5, [pc, #24]	; (8006ba8 <_isatty_r+0x1c>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7f9 feb9 	bl	800090e <_isatty>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_isatty_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_isatty_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	2000129c 	.word	0x2000129c

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr

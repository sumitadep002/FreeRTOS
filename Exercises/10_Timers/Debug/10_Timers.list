
10_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad4  08005ad4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005ad4  08005ad4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ad4  08005ad4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000162c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000163c  2000163c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013060  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d6d  00000000  00000000  000330e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001088  00000000  00000000  00035e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce2  00000000  00000000  00036ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b67  00000000  00000000  00037bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001418d  00000000  00000000  00059721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cac7e  00000000  00000000  0006d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004480  00000000  00000000  0013852c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  0013c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059f0 	.word	0x080059f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080059f0 	.word	0x080059f0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	20000280 	.word	0x20000280
 8000234:	200002d4 	.word	0x200002d4

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b083      	sub	sp, #12
 800023c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 faa1 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f845 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f8cd 	bl	80003e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f89b 	bl	8000384 <MX_USART1_UART_Init>
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  Timer_Periodic_Handle= xTimerCreate("PeriodicTimer", 1000, pdTRUE, NULL, Periodic_Callback);
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <main+0x80>)
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800025a:	4818      	ldr	r0, [pc, #96]	; (80002bc <main+0x84>)
 800025c:	f004 fc64 	bl	8004b28 <xTimerCreate>
 8000260:	4603      	mov	r3, r0
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <main+0x88>)
 8000264:	6013      	str	r3, [r2, #0]
  Timer_Non_Periodic_Handle = xTimerCreate("NonPeriodicTimer", 4000, pdFALSE, NULL, Non_Periodic_Callback);
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0x8c>)
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2300      	movs	r3, #0
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000272:	4815      	ldr	r0, [pc, #84]	; (80002c8 <main+0x90>)
 8000274:	f004 fc58 	bl	8004b28 <xTimerCreate>
 8000278:	4603      	mov	r3, r0
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <main+0x94>)
 800027c:	6013      	str	r3, [r2, #0]
  xTimerStart(Timer_Non_Periodic_Handle,4000);
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <main+0x94>)
 8000280:	681c      	ldr	r4, [r3, #0]
 8000282:	f003 ffc3 	bl	800420c <xTaskGetTickCount>
 8000286:	4602      	mov	r2, r0
 8000288:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	2101      	movs	r1, #1
 8000292:	4620      	mov	r0, r4
 8000294:	f004 fc9c 	bl	8004bd0 <xTimerGenericCommand>
  xTimerStart(Timer_Periodic_Handle,500);
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <main+0x88>)
 800029a:	681c      	ldr	r4, [r3, #0]
 800029c:	f003 ffb6 	bl	800420c <xTaskGetTickCount>
 80002a0:	4602      	mov	r2, r0
 80002a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4620      	mov	r0, r4
 80002ae:	f004 fc8f 	bl	8004bd0 <xTimerGenericCommand>
  vTaskStartScheduler();
 80002b2:	f003 fe9b 	bl	8003fec <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x7e>
 80002b8:	0800049d 	.word	0x0800049d
 80002bc:	08005a08 	.word	0x08005a08
 80002c0:	20000760 	.word	0x20000760
 80002c4:	08000449 	.word	0x08000449
 80002c8:	08005a18 	.word	0x08005a18
 80002cc:	2000075c 	.word	0x2000075c

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b096      	sub	sp, #88	; 0x58
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 fb4c 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 031c 	add.w	r3, r7, #28
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	615a      	str	r2, [r3, #20]
 8000304:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fce9 	bl	8000cfc <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000330:	f000 f8e0 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034a:	f107 031c 	add.w	r3, r7, #28
 800034e:	2101      	movs	r1, #1
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fd11 	bl	8001d78 <HAL_RCC_ClockConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800035c:	f000 f8ca 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000360:	2301      	movs	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4618      	mov	r0, r3
 800036c:	f001 ff6c 	bl	8002248 <HAL_RCCEx_PeriphCLKConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000376:	f000 f8bd 	bl	80004f4 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3758      	adds	r7, #88	; 0x58
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_USART1_UART_Init+0x58>)
 800038a:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <MX_USART1_UART_Init+0x5c>)
 800038c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_USART1_UART_Init+0x58>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART1_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_USART1_UART_Init+0x58>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_USART1_UART_Init+0x58>)
 80003c8:	f002 fb10 	bl	80029ec <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003d2:	f000 f88f 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200006d4 	.word	0x200006d4
 80003e0:	40013800 	.word	0x40013800

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_GPIO_Init+0x5c>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <MX_GPIO_Init+0x5c>)
 80003fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000402:	6153      	str	r3, [r2, #20]
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_GPIO_Init+0x5c>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, orange_Pin|green_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000416:	480b      	ldr	r0, [pc, #44]	; (8000444 <MX_GPIO_Init+0x60>)
 8000418:	f000 fc3e 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : orange_Pin green_Pin */
  GPIO_InitStruct.Pin = orange_Pin|green_Pin;
 800041c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_GPIO_Init+0x60>)
 8000434:	f000 fabe 	bl	80009b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	48000400 	.word	0x48000400

08000448 <Non_Periodic_Callback>:

/* USER CODE BEGIN 4 */
void Non_Periodic_Callback(TimerHandle_t handle)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b085      	sub	sp, #20
 800044c:	af02      	add	r7, sp, #8
 800044e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(orange_GPIO_Port,orange_Pin);
 8000450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <Non_Periodic_Callback+0x44>)
 8000456:	f000 fc37 	bl	8000cc8 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)"This line will be printed every 4 seconds\r\n", sizeof("This line will be printed every 4 seconds\r\n")-1, HAL_MAX_DELAY);
 800045a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045e:	222b      	movs	r2, #43	; 0x2b
 8000460:	490b      	ldr	r1, [pc, #44]	; (8000490 <Non_Periodic_Callback+0x48>)
 8000462:	480c      	ldr	r0, [pc, #48]	; (8000494 <Non_Periodic_Callback+0x4c>)
 8000464:	f002 fb10 	bl	8002a88 <HAL_UART_Transmit>
	xTimerStart(Timer_Non_Periodic_Handle,4000);
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <Non_Periodic_Callback+0x50>)
 800046a:	681c      	ldr	r4, [r3, #0]
 800046c:	f003 fece 	bl	800420c <xTaskGetTickCount>
 8000470:	4602      	mov	r2, r0
 8000472:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	2300      	movs	r3, #0
 800047a:	2101      	movs	r1, #1
 800047c:	4620      	mov	r0, r4
 800047e:	f004 fba7 	bl	8004bd0 <xTimerGenericCommand>
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bd90      	pop	{r4, r7, pc}
 800048a:	bf00      	nop
 800048c:	48000400 	.word	0x48000400
 8000490:	08005a2c 	.word	0x08005a2c
 8000494:	200006d4 	.word	0x200006d4
 8000498:	2000075c 	.word	0x2000075c

0800049c <Periodic_Callback>:
void Periodic_Callback(TimerHandle_t handle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4806      	ldr	r0, [pc, #24]	; (80004c4 <Periodic_Callback+0x28>)
 80004aa:	f000 fc0d 	bl	8000cc8 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)"This line will be printed every 1 seconds\r\n", sizeof("This line will be printed every 1 seconds\r\n")-1, HAL_MAX_DELAY);
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b2:	222b      	movs	r2, #43	; 0x2b
 80004b4:	4904      	ldr	r1, [pc, #16]	; (80004c8 <Periodic_Callback+0x2c>)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <Periodic_Callback+0x30>)
 80004b8:	f002 fae6 	bl	8002a88 <HAL_UART_Transmit>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	48000400 	.word	0x48000400
 80004c8:	08005a58 	.word	0x08005a58
 80004cc:	200006d4 	.word	0x200006d4

080004d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d101      	bne.n	80004e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004e2:	f000 f965 	bl	80007b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40001000 	.word	0x40001000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_MspInit+0x4c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <HAL_MspInit+0x4c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_MspInit+0x4c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <HAL_MspInit+0x4c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <HAL_MspInit+0x4c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_MspInit+0x4c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	210f      	movs	r1, #15
 800053a:	f06f 0001 	mvn.w	r0, #1
 800053e:	f000 fa0f 	bl	8000960 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a17      	ldr	r2, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x7c>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d127      	bne.n	80005c2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <HAL_UART_MspInit+0x80>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <HAL_UART_MspInit+0x80>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_UART_MspInit+0x80>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_UART_MspInit+0x80>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <HAL_UART_MspInit+0x80>)
 8000590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_UART_MspInit+0x80>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005a2:	23c0      	movs	r3, #192	; 0xc0
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005b2:	2307      	movs	r3, #7
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_UART_MspInit+0x84>)
 80005be:	f000 f9f9 	bl	80009b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40013800 	.word	0x40013800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000400 	.word	0x48000400

080005d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005e8:	4b33      	ldr	r3, [pc, #204]	; (80006b8 <HAL_InitTick+0xe0>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a32      	ldr	r2, [pc, #200]	; (80006b8 <HAL_InitTick+0xe0>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <HAL_InitTick+0xe0>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000600:	f107 0210 	add.w	r2, r7, #16
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fdea 	bl	80021e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	2b00      	cmp	r3, #0
 8000618:	d103      	bne.n	8000622 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800061a:	f001 fd9f 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800061e:	6378      	str	r0, [r7, #52]	; 0x34
 8000620:	e004      	b.n	800062c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000622:	f001 fd9b 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8000626:	4603      	mov	r3, r0
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800062c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <HAL_InitTick+0xe4>)
 8000630:	fba2 2303 	umull	r2, r3, r2, r3
 8000634:	0c9b      	lsrs	r3, r3, #18
 8000636:	3b01      	subs	r3, #1
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <HAL_InitTick+0xe8>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <HAL_InitTick+0xec>)
 800063e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <HAL_InitTick+0xe8>)
 8000642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000646:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <HAL_InitTick+0xe8>)
 800064a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_InitTick+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_InitTick+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_InitTick+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000660:	4817      	ldr	r0, [pc, #92]	; (80006c0 <HAL_InitTick+0xe8>)
 8000662:	f001 ff27 	bl	80024b4 <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800066c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000670:	2b00      	cmp	r3, #0
 8000672:	d11b      	bne.n	80006ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000674:	4812      	ldr	r0, [pc, #72]	; (80006c0 <HAL_InitTick+0xe8>)
 8000676:	f001 ff7f 	bl	8002578 <HAL_TIM_Base_Start_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000680:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000684:	2b00      	cmp	r3, #0
 8000686:	d111      	bne.n	80006ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000688:	2036      	movs	r0, #54	; 0x36
 800068a:	f000 f985 	bl	8000998 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d808      	bhi.n	80006a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	2036      	movs	r0, #54	; 0x36
 800069a:	f000 f961 	bl	8000960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <HAL_InitTick+0xf0>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	e002      	b.n	80006ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3738      	adds	r7, #56	; 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	431bde83 	.word	0x431bde83
 80006c0:	20000764 	.word	0x20000764
 80006c4:	40001000 	.word	0x40001000
 80006c8:	20000004 	.word	0x20000004

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <TIM6_DAC1_IRQHandler+0x10>)
 80006fe:	f001 ff97 	bl	8002630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000764 	.word	0x20000764

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f005 f915 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd69 	bl	8000238 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000774:	08005adc 	.word	0x08005adc
  ldr r2, =_sbss
 8000778:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800077c:	2000163c 	.word	0x2000163c

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f8d8 	bl	800094a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	200f      	movs	r0, #15
 800079c:	f7ff ff1c 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff feae 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x20>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_IncTick+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_IncTick+0x24>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200007b0 	.word	0x200007b0

080007d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;  
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_GetTick+0x14>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200007b0 	.word	0x200007b0

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <__NVIC_EnableIRQ+0x38>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff4c 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000972:	f7ff ff61 	bl	8000838 <__NVIC_GetPriorityGrouping>
 8000976:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	6978      	ldr	r0, [r7, #20]
 800097e:	f7ff ffb1 	bl	80008e4 <NVIC_EncodePriority>
 8000982:	4602      	mov	r2, r0
 8000984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff80 	bl	8000890 <__NVIC_SetPriority>
}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff54 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e14e      	b.n	8000c62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8140 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d005      	beq.n	80009f4 <HAL_GPIO_Init+0x40>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d017      	beq.n	8000a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 809a 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d013      	beq.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2d4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d00d      	beq.n	8000b90 <HAL_GPIO_Init+0x1dc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x1d8>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a44      	ldr	r2, [pc, #272]	; (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d101      	bne.n	8000b88 <HAL_GPIO_Init+0x1d4>
 8000b84:	2303      	movs	r3, #3
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b88:	2305      	movs	r3, #5
 8000b8a:	e004      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b94:	2300      	movs	r3, #0
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	f002 0203 	and.w	r2, r2, #3
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4093      	lsls	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba6:	4937      	ldr	r1, [pc, #220]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aea9 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	041a      	lsls	r2, r3, #16
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43d9      	mvns	r1, r3
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	400b      	ands	r3, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f001 b823 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 817d 	beq.w	8001032 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d38:	4bbc      	ldr	r3, [pc, #752]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d00c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	4bb9      	ldr	r3, [pc, #740]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d15c      	bne.n	8000e0a <HAL_RCC_OscConfig+0x10e>
 8000d50:	4bb6      	ldr	r3, [pc, #728]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5c:	d155      	bne.n	8000e0a <HAL_RCC_OscConfig+0x10e>
 8000d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d76:	fab3 f383 	clz	r3, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	095b      	lsrs	r3, r3, #5
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <HAL_RCC_OscConfig+0x94>
 8000d8a:	4ba8      	ldr	r3, [pc, #672]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	e015      	b.n	8000dbc <HAL_RCC_OscConfig+0xc0>
 8000d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000db8:	4b9c      	ldr	r3, [pc, #624]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dc8:	fa92 f2a2 	rbit	r2, r2
 8000dcc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	f002 021f 	and.w	r2, r2, #31
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 811f 	beq.w	8001030 <HAL_RCC_OscConfig+0x334>
 8000df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8116 	bne.w	8001030 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f000 bfaf 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1a:	d106      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12e>
 8000e1c:	4b83      	ldr	r3, [pc, #524]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a82      	ldr	r2, [pc, #520]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e036      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x158>
 8000e3a:	4b7c      	ldr	r3, [pc, #496]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7b      	ldr	r2, [pc, #492]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b79      	ldr	r3, [pc, #484]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a78      	ldr	r2, [pc, #480]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e021      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x184>
 8000e66:	4b71      	ldr	r3, [pc, #452]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a70      	ldr	r2, [pc, #448]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b6e      	ldr	r3, [pc, #440]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a6d      	ldr	r2, [pc, #436]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e00b      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e80:	4b6a      	ldr	r3, [pc, #424]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a69      	ldr	r2, [pc, #420]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b67      	ldr	r3, [pc, #412]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a66      	ldr	r2, [pc, #408]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e98:	4b64      	ldr	r3, [pc, #400]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	f023 020f 	bic.w	r2, r3, #15
 8000ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	495f      	ldr	r1, [pc, #380]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d059      	beq.n	8000f76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fc89 	bl	80007d8 <HAL_GetTick>
 8000ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e00a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fc84 	bl	80007d8 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d902      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f000 bf43 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 8000ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ef6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d102      	bne.n	8000f14 <HAL_RCC_OscConfig+0x218>
 8000f0e:	4b47      	ldr	r3, [pc, #284]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	e015      	b.n	8000f40 <HAL_RCC_OscConfig+0x244>
 8000f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f18:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f44:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f4c:	fa92 f2a2 	rbit	r2, r2
 8000f50:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f58:	fab2 f282 	clz	r2, r2
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f042 0220 	orr.w	r2, r2, #32
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	f002 021f 	and.w	r2, r2, #31
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ab      	beq.n	8000ecc <HAL_RCC_OscConfig+0x1d0>
 8000f74:	e05d      	b.n	8001032 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc2f 	bl	80007d8 <HAL_GetTick>
 8000f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fc2a 	bl	80007d8 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b64      	cmp	r3, #100	; 0x64
 8000f8e:	d902      	bls.n	8000f96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f000 bee9 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 8000f96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2cc>
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e015      	b.n	8000ff4 <HAL_RCC_OscConfig+0x2f8>
 8000fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fcc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fe4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ffc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001000:	fa92 f2a2 	rbit	r2, r2
 8001004:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001008:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800100c:	fab2 f282 	clz	r2, r2
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ab      	bne.n	8000f80 <HAL_RCC_OscConfig+0x284>
 8001028:	e003      	b.n	8001032 <HAL_RCC_OscConfig+0x336>
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 817d 	beq.w	8001342 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001048:	4ba6      	ldr	r3, [pc, #664]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001054:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d172      	bne.n	8001146 <HAL_RCC_OscConfig+0x44a>
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d16c      	bne.n	8001146 <HAL_RCC_OscConfig+0x44a>
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800107e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x3a0>
 8001096:	4b93      	ldr	r3, [pc, #588]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	e013      	b.n	80010c4 <HAL_RCC_OscConfig+0x3c8>
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010c0:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2202      	movs	r2, #2
 80010c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010ce:	fa92 f2a2 	rbit	r2, r2
 80010d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f002 021f 	and.w	r2, r2, #31
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00a      	beq.n	800110c <HAL_RCC_OscConfig+0x410>
 80010f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d002      	beq.n	800110c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	f000 be2e 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	21f8      	movs	r1, #248	; 0xf8
 8001122:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800112a:	fa91 f1a1 	rbit	r1, r1
 800112e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001132:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001136:	fab1 f181 	clz	r1, r1
 800113a:	b2c9      	uxtb	r1, r1
 800113c:	408b      	lsls	r3, r1
 800113e:	4969      	ldr	r1, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001144:	e0fd      	b.n	8001342 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8088 	beq.w	8001268 <HAL_RCC_OscConfig+0x56c>
 8001158:	2301      	movs	r3, #1
 800115a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800116a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	461a      	mov	r2, r3
 8001180:	2301      	movs	r3, #1
 8001182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fb28 	bl	80007d8 <HAL_GetTick>
 8001188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fb23 	bl	80007d8 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d902      	bls.n	80011a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	f000 bde2 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4d8>
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	e013      	b.n	80011fc <HAL_RCC_OscConfig+0x500>
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	2202      	movs	r2, #2
 80011fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001202:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001206:	fa92 f2a2 	rbit	r2, r2
 800120a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800120e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f042 0220 	orr.w	r2, r2, #32
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f002 021f 	and.w	r2, r2, #31
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0af      	beq.n	800118e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	21f8      	movs	r1, #248	; 0xf8
 8001244:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800124c:	fa91 f1a1 	rbit	r1, r1
 8001250:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001254:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001258:	fab1 f181 	clz	r1, r1
 800125c:	b2c9      	uxtb	r1, r1
 800125e:	408b      	lsls	r3, r1
 8001260:	4920      	ldr	r1, [pc, #128]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
 8001266:	e06c      	b.n	8001342 <HAL_RCC_OscConfig+0x646>
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800127a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001288:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	2300      	movs	r3, #0
 8001292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff faa0 	bl	80007d8 <HAL_GetTick>
 8001298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fa9b 	bl	80007d8 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d902      	bls.n	80012b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f000 bd5a 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d104      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5ec>
 80012de:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e015      	b.n	8001310 <HAL_RCC_OscConfig+0x614>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001300:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800130c:	4bc8      	ldr	r3, [pc, #800]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2202      	movs	r2, #2
 8001312:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001316:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001322:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	f042 0220 	orr.w	r2, r2, #32
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f002 021f 	and.w	r2, r2, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ad      	bne.n	800129e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8110 	beq.w	8001578 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d079      	beq.n	800145c <HAL_RCC_OscConfig+0x760>
 8001368:	2301      	movs	r3, #1
 800136a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800137a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4bab      	ldr	r3, [pc, #684]	; (8001634 <HAL_RCC_OscConfig+0x938>)
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	461a      	mov	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fa21 	bl	80007d8 <HAL_GetTick>
 8001396:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fa1c 	bl	80007d8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d902      	bls.n	80013b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f000 bcdb 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800140a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001418:	2102      	movs	r1, #2
 800141a:	6019      	str	r1, [r3, #0]
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f1a3 	rbit	r1, r3
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001432:	6019      	str	r1, [r3, #0]
  return result;
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0a0      	beq.n	800139c <HAL_RCC_OscConfig+0x6a0>
 800145a:	e08d      	b.n	8001578 <HAL_RCC_OscConfig+0x87c>
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800147e:	601a      	str	r2, [r3, #0]
  return result;
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001488:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x938>)
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	2300      	movs	r3, #0
 800149c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff f99b 	bl	80007d8 <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff f996 	bl	80007d8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d902      	bls.n	80014be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f000 bc55 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014c6:	2202      	movs	r2, #2
 80014c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001528:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 800152c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001536:	2102      	movs	r1, #2
 8001538:	6019      	str	r1, [r3, #0]
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f1a3 	rbit	r1, r3
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001550:	6019      	str	r1, [r3, #0]
  return result;
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d197      	bne.n	80014a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 81a1 	beq.w	80018d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d116      	bne.n	80015ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	61d3      	str	r3, [r2, #28]
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11a      	bne.n	8001610 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff f8f7 	bl	80007d8 <HAL_GetTick>
 80015ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	e009      	b.n	8001604 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f0:	f7ff f8f2 	bl	80007d8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	; 0x64
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e3b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x93c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x940>
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a02      	ldr	r2, [pc, #8]	; (8001630 <HAL_RCC_OscConfig+0x934>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e03c      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	10908120 	.word	0x10908120
 8001638:	40007000 	.word	0x40007000
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x96a>
 800164c:	4bc1      	ldr	r3, [pc, #772]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4ac0      	ldr	r2, [pc, #768]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4bbe      	ldr	r3, [pc, #760]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4abd      	ldr	r2, [pc, #756]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 8001666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x994>
 8001676:	4bb7      	ldr	r3, [pc, #732]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4ab6      	ldr	r2, [pc, #728]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4bb4      	ldr	r3, [pc, #720]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4ab3      	ldr	r2, [pc, #716]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 8001690:	4bb0      	ldr	r3, [pc, #704]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4aaf      	ldr	r2, [pc, #700]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4bad      	ldr	r3, [pc, #692]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4aac      	ldr	r2, [pc, #688]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8081 	beq.w	80017bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f88d 	bl	80007d8 <HAL_GetTick>
 80016be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff f888 	bl	80007d8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e345      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800172c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0xa4c>
 8001742:	4b84      	ldr	r3, [pc, #528]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	e013      	b.n	8001770 <HAL_RCC_OscConfig+0xa74>
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001774:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001778:	2102      	movs	r1, #2
 800177a:	6011      	str	r1, [r2, #0]
 800177c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001780:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fa92 f1a2 	rbit	r1, r2
 800178a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800178e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001792:	6011      	str	r1, [r2, #0]
  return result;
 8001794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001798:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d084      	beq.n	80016c4 <HAL_RCC_OscConfig+0x9c8>
 80017ba:	e07f      	b.n	80018bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f80c 	bl	80007d8 <HAL_GetTick>
 80017c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f807 	bl	80007d8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e2c4      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001824:	601a      	str	r2, [r3, #0]
  return result;
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800182e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0xb4e>
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0xb76>
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001876:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800187a:	2102      	movs	r1, #2
 800187c:	6011      	str	r1, [r2, #0]
 800187e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001882:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fa92 f1a2 	rbit	r1, r2
 800188c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001890:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001894:	6011      	str	r1, [r2, #0]
  return result;
 8001896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	fab2 f282 	clz	r2, r2
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	f002 021f 	and.w	r2, r2, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d184      	bne.n	80017c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8242 	beq.w	8001d66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	f000 8213 	beq.w	8001d16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 8162 	bne.w	8001bc6 <HAL_RCC_OscConfig+0xeca>
 8001902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001906:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800190a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800190e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001930:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800193c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	461a      	mov	r2, r3
 8001944:	2300      	movs	r3, #0
 8001946:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7fe ff46 	bl	80007d8 <HAL_GetTick>
 800194c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	e00c      	b.n	800196c <HAL_RCC_OscConfig+0xc70>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7fe ff3e 	bl	80007d8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1fd      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800199a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0xcba>
 80019b0:	4bb0      	ldr	r3, [pc, #704]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e027      	b.n	8001a06 <HAL_RCC_OscConfig+0xd0a>
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	4b9c      	ldr	r3, [pc, #624]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a12:	6011      	str	r1, [r2, #0]
 8001a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a18:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fa92 f1a2 	rbit	r1, r2
 8001a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a2a:	6011      	str	r1, [r2, #0]
  return result;
 8001a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d182      	bne.n	8001958 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	497f      	ldr	r1, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a9e:	601a      	str	r2, [r3, #0]
  return result;
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2301      	movs	r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fe8a 	bl	80007d8 <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe fe85 	bl	80007d8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e144      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0xe2c>
 8001b22:	4b54      	ldr	r3, [pc, #336]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e027      	b.n	8001b78 <HAL_RCC_OscConfig+0xe7c>
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b84:	6011      	str	r1, [r2, #0]
 8001b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fa92 f1a2 	rbit	r1, r2
 8001b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b98:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b9c:	6011      	str	r1, [r2, #0]
  return result;
 8001b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	fab2 f282 	clz	r2, r2
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d082      	beq.n	8001aca <HAL_RCC_OscConfig+0xdce>
 8001bc4:	e0cf      	b.n	8001d66 <HAL_RCC_OscConfig+0x106a>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bf4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	461a      	mov	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fde4 	bl	80007d8 <HAL_GetTick>
 8001c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e009      	b.n	8001c2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe fddf 	bl	80007d8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e09e      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d104      	bne.n	8001c78 <HAL_RCC_OscConfig+0xf7c>
 8001c6e:	4b01      	ldr	r3, [pc, #4]	; (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e029      	b.n	8001cc8 <HAL_RCC_OscConfig+0xfcc>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x1078>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ccc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cda:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fa92 f1a2 	rbit	r1, r2
 8001ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cec:	6011      	str	r1, [r2, #0]
  return result;
 8001cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d180      	bne.n	8001c16 <HAL_RCC_OscConfig+0xf1a>
 8001d14:	e027      	b.n	8001d66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e01e      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_OscConfig+0x1078>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b09e      	sub	sp, #120	; 0x78
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e162      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b8d      	ldr	r3, [pc, #564]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	498b      	ldr	r1, [pc, #556]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e14a      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	497f      	ldr	r1, [pc, #508]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80dc 	beq.w	8001fa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d13c      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xf6>
 8001df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xa6>
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e00f      	b.n	8001e3e <HAL_RCC_ClockConfig+0xc6>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	663b      	str	r3, [r7, #96]	; 0x60
 8001e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e46:	fa92 f2a2 	rbit	r2, r2
 8001e4a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f002 021f 	and.w	r2, r2, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d17b      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0f3      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d13c      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x178>
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x128>
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
 8001ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	647b      	str	r3, [r7, #68]	; 0x44
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d13a      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b2      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x1a0>
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e00d      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1bc>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2202      	movs	r2, #2
 8001f36:	61ba      	str	r2, [r7, #24]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	fa92 f2a2 	rbit	r2, r2
 8001f3e:	617a      	str	r2, [r7, #20]
  return result;
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f042 0220 	orr.w	r2, r2, #32
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e079      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	491a      	ldr	r1, [pc, #104]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fc30 	bl	80007d8 <HAL_GetTick>
 8001f78:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fc2c 	bl	80007d8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e061      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d214      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e040      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	491a      	ldr	r1, [pc, #104]	; (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4912      	ldr	r1, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201a:	f000 f829 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002028:	22f0      	movs	r2, #240	; 0xf0
 800202a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	60fa      	str	r2, [r7, #12]
  return result;
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	40d3      	lsrs	r3, r2
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x2ec>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	fa21 f303 	lsr.w	r3, r1, r3
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_RCC_ClockConfig+0x2f0>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x2f4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fac2 	bl	80005d8 <HAL_InitTick>
  
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3778      	adds	r7, #120	; 0x78
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	08005a9c 	.word	0x08005a9c
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b08b      	sub	sp, #44	; 0x2c
 8002074:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x30>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x36>
 800209e:	e03c      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a2:	623b      	str	r3, [r7, #32]
      break;
 80020a4:	e03c      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	607a      	str	r2, [r7, #4]
  return result;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	220f      	movs	r2, #15
 80020d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	60fa      	str	r2, [r7, #12]
  return result;
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	40d3      	lsrs	r3, r2
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	e004      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 800211c:	623b      	str	r3, [r7, #32]
      break;
 800211e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002120:	6a3b      	ldr	r3, [r7, #32]
}
 8002122:	4618      	mov	r0, r3
 8002124:	372c      	adds	r7, #44	; 0x2c
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	08005ab4 	.word	0x08005ab4
 800213c:	08005ac4 	.word	0x08005ac4
 8002140:	003d0900 	.word	0x003d0900

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_GetHCLKFreq+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002162:	f7ff ffef 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002170:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002174:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	fa92 f2a2 	rbit	r2, r2
 800217c:	603a      	str	r2, [r7, #0]
  return result;
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	fab2 f282 	clz	r2, r2
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	40d3      	lsrs	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_RCC_GetPCLK1Freq+0x40>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	08005aac 	.word	0x08005aac

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021a6:	f7ff ffcd 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 80021aa:	4601      	mov	r1, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	603a      	str	r2, [r7, #0]
  return result;
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08005aac 	.word	0x08005aac

080021e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	220f      	movs	r2, #15
 80021f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_GetClockConfig+0x5c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_RCC_GetClockConfig+0x60>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0207 	and.w	r2, r3, #7
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b092      	sub	sp, #72	; 0x48
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80cd 	beq.w	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226c:	4b8e      	ldr	r3, [pc, #568]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10e      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a8a      	ldr	r2, [pc, #552]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b82      	ldr	r3, [pc, #520]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a81      	ldr	r2, [pc, #516]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fa93 	bl	80007d8 <HAL_GetTick>
 80022b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe fa8f 	bl	80007d8 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0ea      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d4:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d07d      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d076      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f2:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2301      	movs	r3, #1
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	461a      	mov	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002348:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800234a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d045      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fa40 	bl	80007d8 <HAL_GetTick>
 8002358:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe fa3c 	bl	80007d8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e095      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002372:	2302      	movs	r3, #2
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2302      	movs	r3, #2
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	61fb      	str	r3, [r7, #28]
  return result;
 800238a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d102      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	e007      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2202      	movs	r2, #2
 80023b8:	613a      	str	r2, [r7, #16]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	60fa      	str	r2, [r7, #12]
  return result;
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f002 021f 	and.w	r2, r2, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0bd      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	492e      	ldr	r1, [pc, #184]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4922      	ldr	r1, [pc, #136]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	4313      	orrs	r3, r2
 8002422:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f023 0210 	bic.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	491a      	ldr	r1, [pc, #104]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	4313      	orrs	r3, r2
 8002440:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4913      	ldr	r1, [pc, #76]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	4313      	orrs	r3, r2
 800245e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	490b      	ldr	r1, [pc, #44]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	4313      	orrs	r3, r2
 800247c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	4313      	orrs	r3, r2
 800249a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3748      	adds	r7, #72	; 0x48
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	10908100 	.word	0x10908100

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e049      	b.n	800255a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f841 	bl	8002562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 f9e4 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e040      	b.n	8002612 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_TIM_Base_Start_IT+0xa8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d009      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIM_Base_Start_IT+0xac>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_TIM_Base_Start_IT+0xb0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d115      	bne.n	80025fc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_TIM_Base_Start_IT+0xb4>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d015      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x96>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d011      	beq.n	800260e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fa:	e008      	b.n	800260e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e000      	b.n	8002610 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40014000 	.word	0x40014000
 800262c:	00010007 	.word	0x00010007

08002630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b02      	cmp	r3, #2
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0202 	mvn.w	r2, #2
 800265c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f905 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8f7 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f908 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0204 	mvn.w	r2, #4
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8db 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8cd 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8de 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0208 	mvn.w	r2, #8
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2204      	movs	r2, #4
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8b1 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8a3 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8b4 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b10      	cmp	r3, #16
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b10      	cmp	r3, #16
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f887 	bl	8002882 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f879 	bl	800286e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f88a 	bl	8002896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd fe8e 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8f2 	bl	80029c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d10e      	bne.n	800280e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d107      	bne.n	800280e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8e5 	bl	80029d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d10e      	bne.n	800283a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f838 	bl	80028aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d10e      	bne.n	8002866 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0220 	mvn.w	r2, #32
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8a5 	bl	80029b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a32      	ldr	r2, [pc, #200]	; (800299c <TIM_Base_SetConfig+0xdc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_Base_SetConfig+0x28>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0x28>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a2f      	ldr	r2, [pc, #188]	; (80029a0 <TIM_Base_SetConfig+0xe0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d108      	bne.n	80028fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <TIM_Base_SetConfig+0xdc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0x6a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0x6a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <TIM_Base_SetConfig+0xe0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x6a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <TIM_Base_SetConfig+0xe4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x6a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <TIM_Base_SetConfig+0xe8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x6a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <TIM_Base_SetConfig+0xec>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <TIM_Base_SetConfig+0xdc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_Base_SetConfig+0xc0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <TIM_Base_SetConfig+0xe4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_Base_SetConfig+0xc0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <TIM_Base_SetConfig+0xe8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_Base_SetConfig+0xc0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <TIM_Base_SetConfig+0xec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d103      	bne.n	8002988 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	615a      	str	r2, [r3, #20]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800

080029b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e040      	b.n	8002a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fd fd9e 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8b6 	bl	8002b9c <UART_SetConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9e0 	bl	8002e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fa67 	bl	8002f4c <UART_CheckIdleState>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d178      	bne.n	8002b92 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Transmit+0x24>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e071      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002abe:	f7fd fe8b 	bl	80007d8 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e030      	b.n	8002b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fac9 	bl	800309c <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e03c      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	3302      	adds	r3, #2
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e008      	b.n	8002b4a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b292      	uxth	r2, r2
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1c8      	bne.n	8002afa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2140      	movs	r1, #64	; 0x40
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa92 	bl	800309c <UART_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e005      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b8a      	ldr	r3, [pc, #552]	; (8002df0 <UART_SetConfig+0x254>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a78      	ldr	r2, [pc, #480]	; (8002df4 <UART_SetConfig+0x258>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d120      	bne.n	8002c5a <UART_SetConfig+0xbe>
 8002c18:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <UART_SetConfig+0x25c>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d817      	bhi.n	8002c54 <UART_SetConfig+0xb8>
 8002c24:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x90>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c4f 	.word	0x08002c4f
 8002c38:	08002c43 	.word	0x08002c43
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	e01d      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c42:	2302      	movs	r3, #2
 8002c44:	77fb      	strb	r3, [r7, #31]
 8002c46:	e01a      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e017      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e014      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c54:	2310      	movs	r3, #16
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e011      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a67      	ldr	r2, [pc, #412]	; (8002dfc <UART_SetConfig+0x260>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <UART_SetConfig+0xce>
 8002c64:	2300      	movs	r3, #0
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e009      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a64      	ldr	r2, [pc, #400]	; (8002e00 <UART_SetConfig+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <UART_SetConfig+0xde>
 8002c74:	2300      	movs	r3, #0
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e001      	b.n	8002c7e <UART_SetConfig+0xe2>
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d15a      	bne.n	8002d3e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002c88:	7ffb      	ldrb	r3, [r7, #31]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d827      	bhi.n	8002cde <UART_SetConfig+0x142>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <UART_SetConfig+0xf8>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	08002cc9 	.word	0x08002cc9
 8002ca0:	08002cdf 	.word	0x08002cdf
 8002ca4:	08002ccf 	.word	0x08002ccf
 8002ca8:	08002cdf 	.word	0x08002cdf
 8002cac:	08002cdf 	.word	0x08002cdf
 8002cb0:	08002cdf 	.word	0x08002cdf
 8002cb4:	08002cd7 	.word	0x08002cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7ff fa50 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002cbc:	61b8      	str	r0, [r7, #24]
        break;
 8002cbe:	e013      	b.n	8002ce8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc0:	f7ff fa6e 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 8002cc4:	61b8      	str	r0, [r7, #24]
        break;
 8002cc6:	e00f      	b.n	8002ce8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc8:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <UART_SetConfig+0x268>)
 8002cca:	61bb      	str	r3, [r7, #24]
        break;
 8002ccc:	e00c      	b.n	8002ce8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cce:	f7ff f9cf 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002cd2:	61b8      	str	r0, [r7, #24]
        break;
 8002cd4:	e008      	b.n	8002ce8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cda:	61bb      	str	r3, [r7, #24]
        break;
 8002cdc:	e004      	b.n	8002ce8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d074      	beq.n	8002dd8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	005a      	lsls	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	d916      	bls.n	8002d38 <UART_SetConfig+0x19c>
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d212      	bcs.n	8002d38 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f023 030f 	bic.w	r3, r3, #15
 8002d1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	89fa      	ldrh	r2, [r7, #14]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	e04f      	b.n	8002dd8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77bb      	strb	r3, [r7, #30]
 8002d3c:	e04c      	b.n	8002dd8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d828      	bhi.n	8002d96 <UART_SetConfig+0x1fa>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <UART_SetConfig+0x1b0>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d71 	.word	0x08002d71
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	08002d81 	.word	0x08002d81
 8002d58:	08002d97 	.word	0x08002d97
 8002d5c:	08002d87 	.word	0x08002d87
 8002d60:	08002d97 	.word	0x08002d97
 8002d64:	08002d97 	.word	0x08002d97
 8002d68:	08002d97 	.word	0x08002d97
 8002d6c:	08002d8f 	.word	0x08002d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d70:	f7ff f9f4 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002d74:	61b8      	str	r0, [r7, #24]
        break;
 8002d76:	e013      	b.n	8002da0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff fa12 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	61b8      	str	r0, [r7, #24]
        break;
 8002d7e:	e00f      	b.n	8002da0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <UART_SetConfig+0x268>)
 8002d82:	61bb      	str	r3, [r7, #24]
        break;
 8002d84:	e00c      	b.n	8002da0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d86:	f7ff f973 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002d8a:	61b8      	str	r0, [r7, #24]
        break;
 8002d8c:	e008      	b.n	8002da0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d92:	61bb      	str	r3, [r7, #24]
        break;
 8002d94:	e004      	b.n	8002da0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d018      	beq.n	8002dd8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	085a      	lsrs	r2, r3, #1
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d909      	bls.n	8002dd4 <UART_SetConfig+0x238>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc6:	d205      	bcs.n	8002dd4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	e001      	b.n	8002dd8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002de4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	efff69f3 	.word	0xefff69f3
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40004800 	.word	0x40004800
 8002e04:	007a1200 	.word	0x007a1200

08002e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01a      	beq.n	8002f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f06:	d10a      	bne.n	8002f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b098      	sub	sp, #96	; 0x60
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f5c:	f7fd fc3c 	bl	80007d8 <HAL_GetTick>
 8002f60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d12e      	bne.n	8002fce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f88c 	bl	800309c <UART_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d021      	beq.n	8002fce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002faa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e6      	bne.n	8002f8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e062      	b.n	8003094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d149      	bne.n	8003070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f856 	bl	800309c <UART_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03c      	beq.n	8003070 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	623b      	str	r3, [r7, #32]
   return(result);
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800301a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e6      	bne.n	8002ff6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3308      	adds	r3, #8
 800302e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	60fb      	str	r3, [r7, #12]
   return(result);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	61fa      	str	r2, [r7, #28]
 800304a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	617b      	str	r3, [r7, #20]
   return(result);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e011      	b.n	8003094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3758      	adds	r7, #88	; 0x58
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ac:	e049      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b4:	d045      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fd fb8f 	bl	80007d8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <UART_WaitOnFlagUntilTimeout+0x30>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e048      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d031      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d110      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f838 	bl	800316a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2208      	movs	r2, #8
 80030fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e029      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311c:	d111      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f81e 	bl	800316a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e00f      	b.n	8003162 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4013      	ands	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	429a      	cmp	r2, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	429a      	cmp	r2, r3
 800315e:	d0a6      	beq.n	80030ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b095      	sub	sp, #84	; 0x54
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
 8003192:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e6      	bne.n	8003172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d118      	bne.n	8003212 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f023 0310 	bic.w	r3, r3, #16
 80031f4:	647b      	str	r3, [r7, #68]	; 0x44
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	613b      	str	r3, [r7, #16]
   return(result);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e6      	bne.n	80031e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003226:	bf00      	nop
 8003228:	3754      	adds	r7, #84	; 0x54
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f103 0208 	add.w	r2, r3, #8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f103 0208 	add.w	r2, r3, #8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 0208 	add.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ea:	d103      	bne.n	80032f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e00c      	b.n	800330e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3308      	adds	r3, #8
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e002      	b.n	8003302 <vListInsert+0x2e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d2f6      	bcs.n	80032fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6852      	ldr	r2, [r2, #4]
 8003366:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d103      	bne.n	800337a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033c6:	f001 ffdd 	bl	8005384 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	3b01      	subs	r3, #1
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	441a      	add	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	22ff      	movs	r2, #255	; 0xff
 8003412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d114      	bne.n	8003446 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01a      	beq.n	800345a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3310      	adds	r3, #16
 8003428:	4618      	mov	r0, r3
 800342a:	f001 f869 	bl	8004500 <xTaskRemoveFromEventList>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <xQueueGenericReset+0xcc>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	e009      	b.n	800345a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3310      	adds	r3, #16
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fef1 	bl	8003232 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff feec 	bl	8003232 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800345a:	f001 ffc3 	bl	80053e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800345e:	2301      	movs	r3, #1
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	; 0x38
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <xQueueGenericCreateStatic+0x52>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <xQueueGenericCreateStatic+0x56>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueGenericCreateStatic+0x58>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	623b      	str	r3, [r7, #32]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <xQueueGenericCreateStatic+0x7e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <xQueueGenericCreateStatic+0x82>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueGenericCreateStatic+0x84>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	61fb      	str	r3, [r7, #28]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800350a:	2348      	movs	r3, #72	; 0x48
 800350c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b48      	cmp	r3, #72	; 0x48
 8003512:	d00a      	beq.n	800352a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	61bb      	str	r3, [r7, #24]
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800353c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f805 	bl	800355a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003552:	4618      	mov	r0, r3
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e002      	b.n	800357c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003588:	2101      	movs	r1, #1
 800358a:	69b8      	ldr	r0, [r7, #24]
 800358c:	f7ff ff06 	bl	800339c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xQueueGenericSend+0x32>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <xQueueGenericSend+0x40>
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <xQueueGenericSend+0x44>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <xQueueGenericSend+0x46>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <xQueueGenericSend+0x60>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <xQueueGenericSend+0x6e>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <xQueueGenericSend+0x72>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueGenericSend+0x74>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueGenericSend+0x8e>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	623b      	str	r3, [r7, #32]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003626:	f001 f92d 	bl	8004884 <xTaskGetSchedulerState>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <xQueueGenericSend+0x9e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueGenericSend+0xa2>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueGenericSend+0xa4>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xQueueGenericSend+0xbe>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	61fb      	str	r3, [r7, #28]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003656:	f001 fe95 	bl	8005384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <xQueueGenericSend+0xd4>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d129      	bne.n	80036c0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003672:	f000 fa07 	bl	8003a84 <prvCopyDataToQueue>
 8003676:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	3324      	adds	r3, #36	; 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ff3b 	bl	8004500 <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003690:	4b3f      	ldr	r3, [pc, #252]	; (8003790 <xQueueGenericSend+0x1f8>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	e00a      	b.n	80036b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <xQueueGenericSend+0x1f8>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036b8:	f001 fe94 	bl	80053e4 <vPortExitCritical>
				return pdPASS;
 80036bc:	2301      	movs	r3, #1
 80036be:	e063      	b.n	8003788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036c6:	f001 fe8d 	bl	80053e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e05c      	b.n	8003788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 ff73 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036e2:	f001 fe7f 	bl	80053e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036e6:	f000 fce7 	bl	80040b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ea:	f001 fe4b 	bl	8005384 <vPortEnterCritical>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d103      	bne.n	8003704 <xQueueGenericSend+0x16c>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x182>
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371a:	f001 fe63 	bl	80053e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800371e:	1d3a      	adds	r2, r7, #4
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff62 	bl	80045f0 <xTaskCheckForTimeOut>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d124      	bne.n	800377c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003734:	f000 fa9e 	bl	8003c74 <prvIsQueueFull>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	3310      	adds	r3, #16
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fe8a 	bl	8004460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374e:	f000 fa29 	bl	8003ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003752:	f000 fcbf 	bl	80040d4 <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f af7c 	bne.w	8003656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <xQueueGenericSend+0x1f8>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e772      	b.n	8003656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003772:	f000 fa17 	bl	8003ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003776:	f000 fcad 	bl	80040d4 <xTaskResumeAll>
 800377a:	e76c      	b.n	8003656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 fa11 	bl	8003ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003782:	f000 fca7 	bl	80040d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003786:	2300      	movs	r3, #0
		}
	}
}
 8003788:	4618      	mov	r0, r3
 800378a:	3738      	adds	r7, #56	; 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08e      	sub	sp, #56	; 0x38
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <xQueueGenericSendFromISR+0x3c>
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <xQueueGenericSendFromISR+0x40>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <xQueueGenericSendFromISR+0x42>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	623b      	str	r3, [r7, #32]
}
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSendFromISR+0x6a>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSendFromISR+0x6e>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSendFromISR+0x70>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	61fb      	str	r3, [r7, #28]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381e:	f001 fe93 	bl	8005548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003822:	f3ef 8211 	mrs	r2, BASEPRI
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	61ba      	str	r2, [r7, #24]
 8003838:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800383a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <xQueueGenericSendFromISR+0xbc>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d12c      	bne.n	80038aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003860:	f000 f910 	bl	8003a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003864:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d112      	bne.n	8003894 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	3324      	adds	r3, #36	; 0x24
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fe40 	bl	8004500 <xTaskRemoveFromEventList>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e007      	b.n	80038a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003898:	3301      	adds	r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	b25a      	sxtb	r2, r3
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038a8:	e001      	b.n	80038ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3738      	adds	r7, #56	; 0x38
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	; 0x30
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <xQueueReceive+0x30>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	623b      	str	r3, [r7, #32]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <xQueueReceive+0x3e>
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <xQueueReceive+0x42>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <xQueueReceive+0x44>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xQueueReceive+0x5e>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	61fb      	str	r3, [r7, #28]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003922:	f000 ffaf 	bl	8004884 <xTaskGetSchedulerState>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <xQueueReceive+0x6e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <xQueueReceive+0x72>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <xQueueReceive+0x74>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueReceive+0x8e>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	61bb      	str	r3, [r7, #24]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003952:	f001 fd17 	bl	8005384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01f      	beq.n	80039a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003966:	f000 f8f7 	bl	8003b58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	1e5a      	subs	r2, r3, #1
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00f      	beq.n	800399a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	3310      	adds	r3, #16
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fdbe 	bl	8004500 <xTaskRemoveFromEventList>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800398a:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <xQueueReceive+0x1bc>)
 800398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800399a:	f001 fd23 	bl	80053e4 <vPortExitCritical>
				return pdPASS;
 800399e:	2301      	movs	r3, #1
 80039a0:	e069      	b.n	8003a76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039a8:	f001 fd1c 	bl	80053e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e062      	b.n	8003a76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b6:	f107 0310 	add.w	r3, r7, #16
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fe02 	bl	80045c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039c4:	f001 fd0e 	bl	80053e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c8:	f000 fb76 	bl	80040b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039cc:	f001 fcda 	bl	8005384 <vPortEnterCritical>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039dc:	d103      	bne.n	80039e6 <xQueueReceive+0x122>
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f2:	d103      	bne.n	80039fc <xQueueReceive+0x138>
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039fc:	f001 fcf2 	bl	80053e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a00:	1d3a      	adds	r2, r7, #4
 8003a02:	f107 0310 	add.w	r3, r7, #16
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fdf1 	bl	80045f0 <xTaskCheckForTimeOut>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d123      	bne.n	8003a5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a16:	f000 f917 	bl	8003c48 <prvIsQueueEmpty>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d017      	beq.n	8003a50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	3324      	adds	r3, #36	; 0x24
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fd19 	bl	8004460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a30:	f000 f8b8 	bl	8003ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a34:	f000 fb4e 	bl	80040d4 <xTaskResumeAll>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d189      	bne.n	8003952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <xQueueReceive+0x1bc>)
 8003a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	e780      	b.n	8003952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a52:	f000 f8a7 	bl	8003ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a56:	f000 fb3d 	bl	80040d4 <xTaskResumeAll>
 8003a5a:	e77a      	b.n	8003952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5e:	f000 f8a1 	bl	8003ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a62:	f000 fb37 	bl	80040d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a68:	f000 f8ee 	bl	8003c48 <prvIsQueueEmpty>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f43f af6f 	beq.w	8003952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3730      	adds	r7, #48	; 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d14d      	bne.n	8003b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ff06 	bl	80048c0 <xTaskPriorityDisinherit>
 8003ab4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	e043      	b.n	8003b46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d119      	bne.n	8003af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6898      	ldr	r0, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	461a      	mov	r2, r3
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	f001 ff80 	bl	80059d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d32b      	bcc.n	8003b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	e026      	b.n	8003b46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68d8      	ldr	r0, [r3, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	461a      	mov	r2, r3
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	f001 ff66 	bl	80059d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	425b      	negs	r3, r3
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d207      	bcs.n	8003b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	425b      	negs	r3, r3
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d105      	bne.n	8003b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b4e:	697b      	ldr	r3, [r7, #20]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	441a      	add	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d303      	bcc.n	8003b8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68d9      	ldr	r1, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	461a      	mov	r2, r3
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f001 ff1c 	bl	80059d4 <memcpy>
	}
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bac:	f001 fbea 	bl	8005384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bb8:	e011      	b.n	8003bde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d012      	beq.n	8003be8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3324      	adds	r3, #36	; 0x24
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fc9a 	bl	8004500 <xTaskRemoveFromEventList>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bd2:	f000 fd6f 	bl	80046b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	dce9      	bgt.n	8003bba <prvUnlockQueue+0x16>
 8003be6:	e000      	b.n	8003bea <prvUnlockQueue+0x46>
					break;
 8003be8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bf2:	f001 fbf7 	bl	80053e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bf6:	f001 fbc5 	bl	8005384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c02:	e011      	b.n	8003c28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3310      	adds	r3, #16
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fc75 	bl	8004500 <xTaskRemoveFromEventList>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c1c:	f000 fd4a 	bl	80046b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	dce9      	bgt.n	8003c04 <prvUnlockQueue+0x60>
 8003c30:	e000      	b.n	8003c34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c3c:	f001 fbd2 	bl	80053e4 <vPortExitCritical>
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c50:	f001 fb98 	bl	8005384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e001      	b.n	8003c66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c66:	f001 fbbd 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c7c:	f001 fb82 	bl	8005384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d102      	bne.n	8003c92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e001      	b.n	8003c96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c96:	f001 fba5 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e014      	b.n	8003cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <vQueueAddToRegistry+0x50>)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cc0:	490c      	ldr	r1, [pc, #48]	; (8003cf4 <vQueueAddToRegistry+0x50>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <vQueueAddToRegistry+0x50>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cd6:	e006      	b.n	8003ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	d9e7      	bls.n	8003cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	200007b4 	.word	0x200007b4

08003cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d08:	f001 fb3c 	bl	8005384 <vPortEnterCritical>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d18:	d103      	bne.n	8003d22 <vQueueWaitForMessageRestricted+0x2a>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d28:	b25b      	sxtb	r3, r3
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2e:	d103      	bne.n	8003d38 <vQueueWaitForMessageRestricted+0x40>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d38:	f001 fb54 	bl	80053e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fbab 	bl	80044a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff26 	bl	8003ba4 <prvUnlockQueue>
	}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	; 0x38
 8003d64:	af04      	add	r7, sp, #16
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	61fb      	str	r3, [r7, #28]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003da6:	2354      	movs	r3, #84	; 0x54
 8003da8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b54      	cmp	r3, #84	; 0x54
 8003dae:	d00a      	beq.n	8003dc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	61bb      	str	r3, [r7, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01e      	beq.n	8003e0a <xTaskCreateStatic+0xaa>
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01b      	beq.n	8003e0a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003de4:	2300      	movs	r3, #0
 8003de6:	9303      	str	r3, [sp, #12]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f80b 	bl	8003e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e04:	f000 f888 	bl	8003f18 <prvAddNewTaskToReadyList>
 8003e08:	e001      	b.n	8003e0e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e0e:	697b      	ldr	r3, [r7, #20]
	}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3728      	adds	r7, #40	; 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e30:	3b01      	subs	r3, #1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f023 0307 	bic.w	r3, r3, #7
 8003e3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	617b      	str	r3, [r7, #20]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e012      	b.n	8003e8c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	7819      	ldrb	r1, [r3, #0]
 8003e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	3334      	adds	r3, #52	; 0x34
 8003e76:	460a      	mov	r2, r1
 8003e78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d9e9      	bls.n	8003e66 <prvInitialiseNewTask+0x4e>
 8003e92:	e000      	b.n	8003e96 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003e94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d901      	bls.n	8003ea8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f9d7 	bl	8003272 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f9d2 	bl	8003272 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f1c3 0207 	rsb	r2, r3, #7
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68f9      	ldr	r1, [r7, #12]
 8003ef6:	69b8      	ldr	r0, [r7, #24]
 8003ef8:	f001 f91a 	bl	8005130 <pxPortInitialiseStack>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f20:	f001 fa30 	bl	8005384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <prvAddNewTaskToReadyList+0xb8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <prvAddNewTaskToReadyList+0xb8>)
 8003f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f2e:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <prvAddNewTaskToReadyList+0xbc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f36:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <prvAddNewTaskToReadyList+0xbc>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <prvAddNewTaskToReadyList+0xb8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d110      	bne.n	8003f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f44:	f000 fbda 	bl	80046fc <prvInitialiseTaskLists>
 8003f48:	e00d      	b.n	8003f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f4a:	4b23      	ldr	r3, [pc, #140]	; (8003fd8 <prvAddNewTaskToReadyList+0xc0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <prvAddNewTaskToReadyList+0xbc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d802      	bhi.n	8003f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f60:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <prvAddNewTaskToReadyList+0xbc>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <prvAddNewTaskToReadyList+0xc4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <prvAddNewTaskToReadyList+0xc4>)
 8003f6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	2201      	movs	r2, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <prvAddNewTaskToReadyList+0xc8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <prvAddNewTaskToReadyList+0xc8>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <prvAddNewTaskToReadyList+0xcc>)
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7ff f977 	bl	800328c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f9e:	f001 fa21 	bl	80053e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <prvAddNewTaskToReadyList+0xc0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00e      	beq.n	8003fc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <prvAddNewTaskToReadyList+0xbc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d207      	bcs.n	8003fc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <prvAddNewTaskToReadyList+0xd0>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	200008f4 	.word	0x200008f4
 8003fd4:	200007f4 	.word	0x200007f4
 8003fd8:	20000900 	.word	0x20000900
 8003fdc:	20000910 	.word	0x20000910
 8003fe0:	200008fc 	.word	0x200008fc
 8003fe4:	200007f8 	.word	0x200007f8
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	1d39      	adds	r1, r7, #4
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc f8e4 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	9202      	str	r2, [sp, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	460a      	mov	r2, r1
 800401a:	4921      	ldr	r1, [pc, #132]	; (80040a0 <vTaskStartScheduler+0xb4>)
 800401c:	4821      	ldr	r0, [pc, #132]	; (80040a4 <vTaskStartScheduler+0xb8>)
 800401e:	f7ff fe9f 	bl	8003d60 <xTaskCreateStatic>
 8004022:	4603      	mov	r3, r0
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <vTaskStartScheduler+0xbc>)
 8004026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <vTaskStartScheduler+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e001      	b.n	800403a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d102      	bne.n	8004046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004040:	f000 fd2a 	bl	8004a98 <xTimerCreateTimerTask>
 8004044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d116      	bne.n	800407a <vTaskStartScheduler+0x8e>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	613b      	str	r3, [r7, #16]
}
 800405e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <vTaskStartScheduler+0xc0>)
 8004062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <vTaskStartScheduler+0xc4>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <vTaskStartScheduler+0xc8>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004074:	f001 f8e4 	bl	8005240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004078:	e00e      	b.n	8004098 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004080:	d10a      	bne.n	8004098 <vTaskStartScheduler+0xac>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60fb      	str	r3, [r7, #12]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vTaskStartScheduler+0xaa>
}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08005a84 	.word	0x08005a84
 80040a4:	080046cd 	.word	0x080046cd
 80040a8:	20000918 	.word	0x20000918
 80040ac:	20000914 	.word	0x20000914
 80040b0:	20000900 	.word	0x20000900
 80040b4:	200008f8 	.word	0x200008f8

080040b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <vTaskSuspendAll+0x18>)
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	2000091c 	.word	0x2000091c

080040d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040e2:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <xTaskResumeAll+0x114>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xTaskResumeAll+0x2c>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	603b      	str	r3, [r7, #0]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004100:	f001 f940 	bl	8005384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <xTaskResumeAll+0x114>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a37      	ldr	r2, [pc, #220]	; (80041e8 <xTaskResumeAll+0x114>)
 800410c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <xTaskResumeAll+0x114>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d161      	bne.n	80041da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004116:	4b35      	ldr	r3, [pc, #212]	; (80041ec <xTaskResumeAll+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d05d      	beq.n	80041da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800411e:	e02e      	b.n	800417e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004120:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <xTaskResumeAll+0x11c>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f90a 	bl	8003346 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff f905 	bl	8003346 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2201      	movs	r2, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <xTaskResumeAll+0x120>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <xTaskResumeAll+0x120>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <xTaskResumeAll+0x124>)
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7ff f891 	bl	800328c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <xTaskResumeAll+0x128>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <xTaskResumeAll+0x12c>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800417e:	4b1c      	ldr	r3, [pc, #112]	; (80041f0 <xTaskResumeAll+0x11c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cc      	bne.n	8004120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800418c:	f000 fb54 	bl	8004838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <xTaskResumeAll+0x130>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800419c:	f000 f846 	bl	800422c <xTaskIncrementTick>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <xTaskResumeAll+0x12c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f1      	bne.n	800419c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <xTaskResumeAll+0x130>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <xTaskResumeAll+0x12c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041ca:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <xTaskResumeAll+0x134>)
 80041cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041da:	f001 f903 	bl	80053e4 <vPortExitCritical>

	return xAlreadyYielded;
 80041de:	68bb      	ldr	r3, [r7, #8]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2000091c 	.word	0x2000091c
 80041ec:	200008f4 	.word	0x200008f4
 80041f0:	200008b4 	.word	0x200008b4
 80041f4:	200008fc 	.word	0x200008fc
 80041f8:	200007f8 	.word	0x200007f8
 80041fc:	200007f4 	.word	0x200007f4
 8004200:	20000908 	.word	0x20000908
 8004204:	20000904 	.word	0x20000904
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <xTaskGetTickCount+0x1c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004218:	687b      	ldr	r3, [r7, #4]
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	200008f8 	.word	0x200008f8

0800422c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004236:	4b51      	ldr	r3, [pc, #324]	; (800437c <xTaskIncrementTick+0x150>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 808d 	bne.w	800435a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <xTaskIncrementTick+0x154>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004248:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <xTaskIncrementTick+0x154>)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d120      	bne.n	8004296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <xTaskIncrementTick+0x158>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <xTaskIncrementTick+0x48>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	603b      	str	r3, [r7, #0]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskIncrementTick+0x46>
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <xTaskIncrementTick+0x158>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b43      	ldr	r3, [pc, #268]	; (8004388 <xTaskIncrementTick+0x15c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <xTaskIncrementTick+0x158>)
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4a41      	ldr	r2, [pc, #260]	; (8004388 <xTaskIncrementTick+0x15c>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b40      	ldr	r3, [pc, #256]	; (800438c <xTaskIncrementTick+0x160>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a3f      	ldr	r2, [pc, #252]	; (800438c <xTaskIncrementTick+0x160>)
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	f000 fad1 	bl	8004838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <xTaskIncrementTick+0x164>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d34d      	bcc.n	800433c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a0:	4b38      	ldr	r3, [pc, #224]	; (8004384 <xTaskIncrementTick+0x158>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <xTaskIncrementTick+0x82>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <xTaskIncrementTick+0x84>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <xTaskIncrementTick+0x164>)
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ba:	601a      	str	r2, [r3, #0]
					break;
 80042bc:	e03e      	b.n	800433c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <xTaskIncrementTick+0x158>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d203      	bcs.n	80042de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042d6:	4a2e      	ldr	r2, [pc, #184]	; (8004390 <xTaskIncrementTick+0x164>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]
						break;
 80042dc:	e02e      	b.n	800433c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f82f 	bl	8003346 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3318      	adds	r3, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f826 	bl	8003346 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	2201      	movs	r2, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <xTaskIncrementTick+0x168>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <xTaskIncrementTick+0x168>)
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <xTaskIncrementTick+0x16c>)
 800431a:	441a      	add	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7fe ffb2 	bl	800328c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <xTaskIncrementTick+0x170>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	429a      	cmp	r2, r3
 8004334:	d3b4      	bcc.n	80042a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433a:	e7b1      	b.n	80042a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <xTaskIncrementTick+0x170>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	4915      	ldr	r1, [pc, #84]	; (8004398 <xTaskIncrementTick+0x16c>)
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d907      	bls.n	8004364 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e004      	b.n	8004364 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <xTaskIncrementTick+0x174>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <xTaskIncrementTick+0x174>)
 8004362:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <xTaskIncrementTick+0x178>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004370:	697b      	ldr	r3, [r7, #20]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000091c 	.word	0x2000091c
 8004380:	200008f8 	.word	0x200008f8
 8004384:	200008ac 	.word	0x200008ac
 8004388:	200008b0 	.word	0x200008b0
 800438c:	2000090c 	.word	0x2000090c
 8004390:	20000914 	.word	0x20000914
 8004394:	200008fc 	.word	0x200008fc
 8004398:	200007f8 	.word	0x200007f8
 800439c:	200007f4 	.word	0x200007f4
 80043a0:	20000904 	.word	0x20000904
 80043a4:	20000908 	.word	0x20000908

080043a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <vTaskSwitchContext+0xa4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <vTaskSwitchContext+0xa8>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043bc:	e03f      	b.n	800443e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <vTaskSwitchContext+0xa8>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <vTaskSwitchContext+0xac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	f1c3 031f 	rsb	r3, r3, #31
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	491f      	ldr	r1, [pc, #124]	; (8004458 <vTaskSwitchContext+0xb0>)
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <vTaskSwitchContext+0x5c>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	607b      	str	r3, [r7, #4]
}
 8004400:	bf00      	nop
 8004402:	e7fe      	b.n	8004402 <vTaskSwitchContext+0x5a>
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <vTaskSwitchContext+0xb0>)
 8004410:	4413      	add	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3308      	adds	r3, #8
 8004426:	429a      	cmp	r2, r3
 8004428:	d104      	bne.n	8004434 <vTaskSwitchContext+0x8c>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <vTaskSwitchContext+0xb4>)
 800443c:	6013      	str	r3, [r2, #0]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000091c 	.word	0x2000091c
 8004450:	20000908 	.word	0x20000908
 8004454:	200008fc 	.word	0x200008fc
 8004458:	200007f8 	.word	0x200007f8
 800445c:	200007f4 	.word	0x200007f4

08004460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60fb      	str	r3, [r7, #12]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <vTaskPlaceOnEventList+0x44>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3318      	adds	r3, #24
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe ff20 	bl	80032d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004494:	2101      	movs	r1, #1
 8004496:	6838      	ldr	r0, [r7, #0]
 8004498:	f000 fa98 	bl	80049cc <prvAddCurrentTaskToDelayedList>
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	200007f4 	.word	0x200007f4

080044a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	617b      	str	r3, [r7, #20]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <vTaskPlaceOnEventListRestricted+0x54>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3318      	adds	r3, #24
 80044d6:	4619      	mov	r1, r3
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7fe fed7 	bl	800328c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80044e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	68b8      	ldr	r0, [r7, #8]
 80044ee:	f000 fa6d 	bl	80049cc <prvAddCurrentTaskToDelayedList>
	}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200007f4 	.word	0x200007f4

08004500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	3318      	adds	r3, #24
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe ff08 	bl	8003346 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <xTaskRemoveFromEventList+0xac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11c      	bne.n	8004578 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe feff 	bl	8003346 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	409a      	lsls	r2, r3
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <xTaskRemoveFromEventList+0xb0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <xTaskRemoveFromEventList+0xb0>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <xTaskRemoveFromEventList+0xb4>)
 8004568:	441a      	add	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7fe fe8b 	bl	800328c <vListInsertEnd>
 8004576:	e005      	b.n	8004584 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3318      	adds	r3, #24
 800457c:	4619      	mov	r1, r3
 800457e:	480e      	ldr	r0, [pc, #56]	; (80045b8 <xTaskRemoveFromEventList+0xb8>)
 8004580:	f7fe fe84 	bl	800328c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <xTaskRemoveFromEventList+0xbc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	429a      	cmp	r2, r3
 8004590:	d905      	bls.n	800459e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004592:	2301      	movs	r3, #1
 8004594:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <xTaskRemoveFromEventList+0xc0>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e001      	b.n	80045a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80045a2:	697b      	ldr	r3, [r7, #20]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000091c 	.word	0x2000091c
 80045b0:	200008fc 	.word	0x200008fc
 80045b4:	200007f8 	.word	0x200007f8
 80045b8:	200008b4 	.word	0x200008b4
 80045bc:	200007f4 	.word	0x200007f4
 80045c0:	20000908 	.word	0x20000908

080045c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <vTaskInternalSetTimeOutState+0x24>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <vTaskInternalSetTimeOutState+0x28>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	2000090c 	.word	0x2000090c
 80045ec:	200008f8 	.word	0x200008f8

080045f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004632:	f000 fea7 	bl	8005384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <xTaskCheckForTimeOut+0xbc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464e:	d102      	bne.n	8004656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e023      	b.n	800469e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <xTaskCheckForTimeOut+0xc0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d007      	beq.n	8004672 <xTaskCheckForTimeOut+0x82>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e015      	b.n	800469e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	d20b      	bcs.n	8004694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff9b 	bl	80045c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e004      	b.n	800469e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800469a:	2301      	movs	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800469e:	f000 fea1 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 80046a2:	69fb      	ldr	r3, [r7, #28]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200008f8 	.word	0x200008f8
 80046b0:	2000090c 	.word	0x2000090c

080046b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <vTaskMissedYield+0x14>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	20000908 	.word	0x20000908

080046cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046d4:	f000 f852 	bl	800477c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <prvIdleTask+0x28>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d9f9      	bls.n	80046d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <prvIdleTask+0x2c>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046f0:	e7f0      	b.n	80046d4 <prvIdleTask+0x8>
 80046f2:	bf00      	nop
 80046f4:	200007f8 	.word	0x200007f8
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e00c      	b.n	8004722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <prvInitialiseTaskLists+0x60>)
 8004714:	4413      	add	r3, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fd8b 	bl	8003232 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d9ef      	bls.n	8004708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004728:	480d      	ldr	r0, [pc, #52]	; (8004760 <prvInitialiseTaskLists+0x64>)
 800472a:	f7fe fd82 	bl	8003232 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800472e:	480d      	ldr	r0, [pc, #52]	; (8004764 <prvInitialiseTaskLists+0x68>)
 8004730:	f7fe fd7f 	bl	8003232 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004734:	480c      	ldr	r0, [pc, #48]	; (8004768 <prvInitialiseTaskLists+0x6c>)
 8004736:	f7fe fd7c 	bl	8003232 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800473a:	480c      	ldr	r0, [pc, #48]	; (800476c <prvInitialiseTaskLists+0x70>)
 800473c:	f7fe fd79 	bl	8003232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004740:	480b      	ldr	r0, [pc, #44]	; (8004770 <prvInitialiseTaskLists+0x74>)
 8004742:	f7fe fd76 	bl	8003232 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <prvInitialiseTaskLists+0x78>)
 8004748:	4a05      	ldr	r2, [pc, #20]	; (8004760 <prvInitialiseTaskLists+0x64>)
 800474a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <prvInitialiseTaskLists+0x7c>)
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <prvInitialiseTaskLists+0x68>)
 8004750:	601a      	str	r2, [r3, #0]
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	200007f8 	.word	0x200007f8
 8004760:	20000884 	.word	0x20000884
 8004764:	20000898 	.word	0x20000898
 8004768:	200008b4 	.word	0x200008b4
 800476c:	200008c8 	.word	0x200008c8
 8004770:	200008e0 	.word	0x200008e0
 8004774:	200008ac 	.word	0x200008ac
 8004778:	200008b0 	.word	0x200008b0

0800477c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004782:	e019      	b.n	80047b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004784:	f000 fdfe 	bl	8005384 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <prvCheckTasksWaitingTermination+0x50>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fdd6 	bl	8003346 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <prvCheckTasksWaitingTermination+0x54>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3b01      	subs	r3, #1
 80047a0:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <prvCheckTasksWaitingTermination+0x54>)
 80047a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047ae:	f000 fe19 	bl	80053e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f810 	bl	80047d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <prvCheckTasksWaitingTermination+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e1      	bne.n	8004784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200008c8 	.word	0x200008c8
 80047d0:	200008f4 	.word	0x200008f4
 80047d4:	200008dc 	.word	0x200008dc

080047d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 ffae 	bl	8005750 <vPortFree>
				vPortFree( pxTCB );
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 ffab 	bl	8005750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047fa:	e018      	b.n	800482e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004802:	2b01      	cmp	r3, #1
 8004804:	d103      	bne.n	800480e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ffa2 	bl	8005750 <vPortFree>
	}
 800480c:	e00f      	b.n	800482e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004814:	2b02      	cmp	r3, #2
 8004816:	d00a      	beq.n	800482e <prvDeleteTCB+0x56>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	60fb      	str	r3, [r7, #12]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <prvDeleteTCB+0x54>
	}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <prvResetNextTaskUnblockTime+0x44>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <prvResetNextTaskUnblockTime+0x14>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <prvResetNextTaskUnblockTime+0x16>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvResetNextTaskUnblockTime+0x48>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004858:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800485a:	e008      	b.n	800486e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800485c:	4b07      	ldr	r3, [pc, #28]	; (800487c <prvResetNextTaskUnblockTime+0x44>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4a05      	ldr	r2, [pc, #20]	; (8004880 <prvResetNextTaskUnblockTime+0x48>)
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	200008ac 	.word	0x200008ac
 8004880:	20000914 	.word	0x20000914

08004884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <xTaskGetSchedulerState+0x34>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004892:	2301      	movs	r3, #1
 8004894:	607b      	str	r3, [r7, #4]
 8004896:	e008      	b.n	80048aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <xTaskGetSchedulerState+0x38>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048a0:	2302      	movs	r3, #2
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	e001      	b.n	80048aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048aa:	687b      	ldr	r3, [r7, #4]
	}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20000900 	.word	0x20000900
 80048bc:	2000091c 	.word	0x2000091c

080048c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d06e      	beq.n	80049b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048d6:	4b3a      	ldr	r3, [pc, #232]	; (80049c0 <xTaskPriorityDisinherit+0x100>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d00a      	beq.n	80048f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	60bb      	str	r3, [r7, #8]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	1e5a      	subs	r2, r3, #1
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	429a      	cmp	r2, r3
 8004928:	d044      	beq.n	80049b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d140      	bne.n	80049b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fd05 	bl	8003346 <uxListRemove>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	491f      	ldr	r1, [pc, #124]	; (80049c4 <xTaskPriorityDisinherit+0x104>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <xTaskPriorityDisinherit+0xae>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	2201      	movs	r2, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <xTaskPriorityDisinherit+0x108>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4013      	ands	r3, r2
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <xTaskPriorityDisinherit+0x108>)
 800496c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f1c3 0207 	rsb	r2, r3, #7
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <xTaskPriorityDisinherit+0x108>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <xTaskPriorityDisinherit+0x108>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <xTaskPriorityDisinherit+0x104>)
 80049a2:	441a      	add	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fc6e 	bl	800328c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049b4:	697b      	ldr	r3, [r7, #20]
	}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200007f4 	.word	0x200007f4
 80049c4:	200007f8 	.word	0x200007f8
 80049c8:	200008fc 	.word	0x200008fc

080049cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <prvAddCurrentTaskToDelayedList+0xb0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049dc:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fcaf 	bl	8003346 <uxListRemove>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	2201      	movs	r2, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4013      	ands	r3, r2
 8004a02:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0c:	d10a      	bne.n	8004a24 <prvAddCurrentTaskToDelayedList+0x58>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a14:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	481a      	ldr	r0, [pc, #104]	; (8004a88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a1e:	f7fe fc35 	bl	800328c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a22:	e026      	b.n	8004a72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d209      	bcs.n	8004a50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fe fc43 	bl	80032d4 <vListInsert>
}
 8004a4e:	e010      	b.n	8004a72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe fc39 	bl	80032d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d202      	bcs.n	8004a72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a6c:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6013      	str	r3, [r2, #0]
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200008f8 	.word	0x200008f8
 8004a80:	200007f4 	.word	0x200007f4
 8004a84:	200008fc 	.word	0x200008fc
 8004a88:	200008e0 	.word	0x200008e0
 8004a8c:	200008b0 	.word	0x200008b0
 8004a90:	200008ac 	.word	0x200008ac
 8004a94:	20000914 	.word	0x20000914

08004a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aa2:	f000 fb05 	bl	80050b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <xTimerCreateTimerTask+0x80>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d021      	beq.n	8004af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ab6:	1d3a      	adds	r2, r7, #4
 8004ab8:	f107 0108 	add.w	r1, r7, #8
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fb fb9f 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	9202      	str	r2, [sp, #8]
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	4910      	ldr	r1, [pc, #64]	; (8004b1c <xTimerCreateTimerTask+0x84>)
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <xTimerCreateTimerTask+0x88>)
 8004adc:	f7ff f940 	bl	8003d60 <xTaskCreateStatic>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <xTimerCreateTimerTask+0x8c>)
 8004ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <xTimerCreateTimerTask+0x8c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	613b      	str	r3, [r7, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000950 	.word	0x20000950
 8004b1c:	08005a8c 	.word	0x08005a8c
 8004b20:	08004ced 	.word	0x08004ced
 8004b24:	20000954 	.word	0x20000954

08004b28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004b36:	202c      	movs	r0, #44	; 0x2c
 8004b38:	f000 fd46 	bl	80055c8 <pvPortMalloc>
 8004b3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00d      	beq.n	8004b60 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f809 	bl	8004b6a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004b60:	697b      	ldr	r3, [r7, #20]
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	617b      	str	r3, [r7, #20]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d015      	beq.n	8004bc6 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004b9a:	f000 fa89 	bl	80050b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fb56 	bl	8003272 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	623b      	str	r3, [r7, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <xTimerGenericCommand+0x98>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02a      	beq.n	8004c5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	dc18      	bgt.n	8004c4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c18:	f7ff fe34 	bl	8004884 <xTaskGetSchedulerState>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d109      	bne.n	8004c36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <xTimerGenericCommand+0x98>)
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f107 0114 	add.w	r1, r7, #20
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	f7fe fcb3 	bl	8003598 <xQueueGenericSend>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24
 8004c34:	e012      	b.n	8004c5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <xTimerGenericCommand+0x98>)
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f107 0114 	add.w	r1, r7, #20
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2200      	movs	r2, #0
 8004c42:	f7fe fca9 	bl	8003598 <xQueueGenericSend>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24
 8004c48:	e008      	b.n	8004c5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <xTimerGenericCommand+0x98>)
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	f107 0114 	add.w	r1, r7, #20
 8004c52:	2300      	movs	r3, #0
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	f7fe fd9d 	bl	8003794 <xQueueGenericSendFromISR>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3728      	adds	r7, #40	; 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000950 	.word	0x20000950

08004c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <prvProcessExpiredTimer+0x7c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fb5e 	bl	8003346 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d122      	bne.n	8004cd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	18d1      	adds	r1, r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f000 f8c8 	bl	8004e34 <prvInsertTimerInActiveList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f7ff ff8b 	bl	8004bd0 <xTimerGenericCommand>
 8004cba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	4798      	blx	r3
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000948 	.word	0x20000948

08004cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cf4:	f107 0308 	add.w	r3, r7, #8
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f857 	bl	8004dac <prvGetNextExpireTime>
 8004cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4619      	mov	r1, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f803 	bl	8004d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d0a:	f000 f8d5 	bl	8004eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d0e:	e7f1      	b.n	8004cf4 <prvTimerTask+0x8>

08004d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d1a:	f7ff f9cd 	bl	80040b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f866 	bl	8004df4 <prvSampleTimeNow>
 8004d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d130      	bne.n	8004d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <prvProcessTimerOrBlockTask+0x3c>
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d806      	bhi.n	8004d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d3e:	f7ff f9c9 	bl	80040d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff91 	bl	8004c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d4a:	e024      	b.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <prvProcessTimerOrBlockTask+0x90>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <prvProcessTimerOrBlockTask+0x94>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7fe ffc1 	bl	8003cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d76:	f7ff f9ad 	bl	80040d4 <xTaskResumeAll>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <prvProcessTimerOrBlockTask+0x98>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
}
 8004d90:	e001      	b.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d92:	f7ff f99f 	bl	80040d4 <xTaskResumeAll>
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000094c 	.word	0x2000094c
 8004da4:	20000950 	.word	0x20000950
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <prvGetNextExpireTime+0x44>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvGetNextExpireTime+0x44>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e001      	b.n	8004de2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004de2:	68fb      	ldr	r3, [r7, #12]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000948 	.word	0x20000948

08004df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dfc:	f7ff fa06 	bl	800420c <xTaskGetTickCount>
 8004e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <prvSampleTimeNow+0x3c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d205      	bcs.n	8004e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e0c:	f000 f8ee 	bl	8004fec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e1e:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <prvSampleTimeNow+0x3c>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000958 	.word	0x20000958

08004e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d812      	bhi.n	8004e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e01b      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <prvInsertTimerInActiveList+0x7c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fe fa2b 	bl	80032d4 <vListInsert>
 8004e7e:	e012      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d206      	bcs.n	8004e96 <prvInsertTimerInActiveList+0x62>
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e007      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvInsertTimerInActiveList+0x80>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fa17 	bl	80032d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ea6:	697b      	ldr	r3, [r7, #20]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000094c 	.word	0x2000094c
 8004eb4:	20000948 	.word	0x20000948

08004eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ebe:	e081      	b.n	8004fc4 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	db7e      	blt.n	8004fc4 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fa35 	bl	8003346 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff88 	bl	8004df4 <prvSampleTimeNow>
 8004ee4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	d86a      	bhi.n	8004fc2 <prvProcessReceivedCommands+0x10a>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <prvProcessReceivedCommands+0x3c>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f1d 	.word	0x08004f1d
 8004f00:	08004fc5 	.word	0x08004fc5
 8004f04:	08004f79 	.word	0x08004f79
 8004f08:	08004fb1 	.word	0x08004fb1
 8004f0c:	08004f1d 	.word	0x08004f1d
 8004f10:	08004f1d 	.word	0x08004f1d
 8004f14:	08004fc5 	.word	0x08004fc5
 8004f18:	08004f79 	.word	0x08004f79
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	18d1      	adds	r1, r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a3a      	ldr	r2, [r7, #32]
 8004f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f2a:	f7ff ff83 	bl	8004e34 <prvInsertTimerInActiveList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d047      	beq.n	8004fc4 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d13f      	bne.n	8004fc4 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	441a      	add	r2, r3
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	2100      	movs	r1, #0
 8004f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f56:	f7ff fe3b 	bl	8004bd0 <xTimerGenericCommand>
 8004f5a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d130      	bne.n	8004fc4 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	61bb      	str	r3, [r7, #24]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	617b      	str	r3, [r7, #20]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	18d1      	adds	r1, r2, r3
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004faa:	f7ff ff43 	bl	8004e34 <prvInsertTimerInActiveList>
					break;
 8004fae:	e009      	b.n	8004fc4 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8004fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fbc:	f000 fbc8 	bl	8005750 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fc0:	e000      	b.n	8004fc4 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 8004fc2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <prvProcessReceivedCommands+0x130>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f107 0108 	add.w	r1, r7, #8
 8004fcc:	2200      	movs	r2, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fc78 	bl	80038c4 <xQueueReceive>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f47f af72 	bne.w	8004ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3728      	adds	r7, #40	; 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000950 	.word	0x20000950

08004fec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ff2:	e045      	b.n	8005080 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3304      	adds	r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe f99a 	bl	8003346 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d12e      	bne.n	8005080 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90e      	bls.n	8005052 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fe f942 	bl	80032d4 <vListInsert>
 8005050:	e016      	b.n	8005080 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	2100      	movs	r1, #0
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff fdb7 	bl	8004bd0 <xTimerGenericCommand>
 8005062:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <prvSwitchTimerLists+0x94>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1b4      	bne.n	8004ff4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <prvSwitchTimerLists+0xc0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <prvSwitchTimerLists+0xbc>)
 8005096:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005098:	4a04      	ldr	r2, [pc, #16]	; (80050ac <prvSwitchTimerLists+0xc0>)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6013      	str	r3, [r2, #0]
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000948 	.word	0x20000948
 80050ac:	2000094c 	.word	0x2000094c

080050b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050b6:	f000 f965 	bl	8005384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d120      	bne.n	8005104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050c2:	4814      	ldr	r0, [pc, #80]	; (8005114 <prvCheckForValidListAndQueue+0x64>)
 80050c4:	f7fe f8b5 	bl	8003232 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050c8:	4813      	ldr	r0, [pc, #76]	; (8005118 <prvCheckForValidListAndQueue+0x68>)
 80050ca:	f7fe f8b2 	bl	8003232 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <prvCheckForValidListAndQueue+0x6c>)
 80050d0:	4a10      	ldr	r2, [pc, #64]	; (8005114 <prvCheckForValidListAndQueue+0x64>)
 80050d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <prvCheckForValidListAndQueue+0x70>)
 80050d6:	4a10      	ldr	r2, [pc, #64]	; (8005118 <prvCheckForValidListAndQueue+0x68>)
 80050d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050da:	2300      	movs	r3, #0
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	4b11      	ldr	r3, [pc, #68]	; (8005124 <prvCheckForValidListAndQueue+0x74>)
 80050e0:	4a11      	ldr	r2, [pc, #68]	; (8005128 <prvCheckForValidListAndQueue+0x78>)
 80050e2:	210c      	movs	r1, #12
 80050e4:	200a      	movs	r0, #10
 80050e6:	f7fe f9c1 	bl	800346c <xQueueGenericCreateStatic>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	490b      	ldr	r1, [pc, #44]	; (800512c <prvCheckForValidListAndQueue+0x7c>)
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fdd0 	bl	8003ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005104:	f000 f96e 	bl	80053e4 <vPortExitCritical>
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000950 	.word	0x20000950
 8005114:	20000920 	.word	0x20000920
 8005118:	20000934 	.word	0x20000934
 800511c:	20000948 	.word	0x20000948
 8005120:	2000094c 	.word	0x2000094c
 8005124:	200009d4 	.word	0x200009d4
 8005128:	2000095c 	.word	0x2000095c
 800512c:	08005a94 	.word	0x08005a94

08005130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b04      	subs	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b04      	subs	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005160:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <pxPortInitialiseStack+0x64>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b14      	subs	r3, #20
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3b04      	subs	r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f06f 0202 	mvn.w	r2, #2
 800517e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3b20      	subs	r3, #32
 8005184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	08005199 	.word	0x08005199

08005198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <prvTaskExitError+0x54>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051aa:	d00a      	beq.n	80051c2 <prvTaskExitError+0x2a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60fb      	str	r3, [r7, #12]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <prvTaskExitError+0x28>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60bb      	str	r3, [r7, #8]
}
 80051d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051d6:	bf00      	nop
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0fc      	beq.n	80051d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	2000000c 	.word	0x2000000c

080051f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <pxCurrentTCBConst2>)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	6808      	ldr	r0, [r1, #0]
 80051f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	f380 8809 	msr	PSP, r0
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	4770      	bx	lr
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst2>:
 8005210:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <prvPortStartFirstTask+0x24>)
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	6800      	ldr	r0, [r0, #0]
 800521e:	f380 8808 	msr	MSP, r0
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8814 	msr	CONTROL, r0
 800522a:	b662      	cpsie	i
 800522c:	b661      	cpsie	f
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	df00      	svc	0
 8005238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800523a:	bf00      	nop
 800523c:	e000ed08 	.word	0xe000ed08

08005240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <xPortStartScheduler+0x120>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a46      	ldr	r2, [pc, #280]	; (8005364 <xPortStartScheduler+0x124>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10a      	bne.n	8005266 <xPortStartScheduler+0x26>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	613b      	str	r3, [r7, #16]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <xPortStartScheduler+0x120>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3f      	ldr	r2, [pc, #252]	; (8005368 <xPortStartScheduler+0x128>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10a      	bne.n	8005286 <xPortStartScheduler+0x46>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <xPortStartScheduler+0x12c>)
 8005288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <xPortStartScheduler+0x130>)
 80052ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <xPortStartScheduler+0x134>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b4:	e009      	b.n	80052ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <xPortStartScheduler+0x134>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <xPortStartScheduler+0x134>)
 80052be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d0ef      	beq.n	80052b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <xPortStartScheduler+0x134>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1c3 0307 	rsb	r3, r3, #7
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d00a      	beq.n	80052f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <xPortStartScheduler+0x134>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <xPortStartScheduler+0x134>)
 8005300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <xPortStartScheduler+0x134>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <xPortStartScheduler+0x134>)
 800530c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <xPortStartScheduler+0x138>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <xPortStartScheduler+0x138>)
 800531c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <xPortStartScheduler+0x138>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <xPortStartScheduler+0x138>)
 8005328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800532c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800532e:	f000 f8dd 	bl	80054ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <xPortStartScheduler+0x13c>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005338:	f000 f8fc 	bl	8005534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <xPortStartScheduler+0x140>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <xPortStartScheduler+0x140>)
 8005342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005348:	f7ff ff66 	bl	8005218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800534c:	f7ff f82c 	bl	80043a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005350:	f7ff ff22 	bl	8005198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	410fc271 	.word	0x410fc271
 8005368:	410fc270 	.word	0x410fc270
 800536c:	e000e400 	.word	0xe000e400
 8005370:	20000a1c 	.word	0x20000a1c
 8005374:	20000a20 	.word	0x20000a20
 8005378:	e000ed20 	.word	0xe000ed20
 800537c:	2000000c 	.word	0x2000000c
 8005380:	e000ef34 	.word	0xe000ef34

08005384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <vPortEnterCritical+0x58>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <vPortEnterCritical+0x58>)
 80053a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <vPortEnterCritical+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10f      	bne.n	80053d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortEnterCritical+0x5c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	603b      	str	r3, [r7, #0]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vPortEnterCritical+0x4a>
	}
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <vPortExitCritical+0x50>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vPortExitCritical+0x24>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	607b      	str	r3, [r7, #4]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortExitCritical+0x50>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <vPortExitCritical+0x50>)
 8005410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <vPortExitCritical+0x42>
 800541a:	2300      	movs	r3, #0
 800541c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f383 8811 	msr	BASEPRI, r3
}
 8005424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7fe ff9a 	bl	80043a8 <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
}
 80054c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054c2:	f7fe feb3 	bl	800422c <xTaskIncrementTick>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <SysTick_Handler+0x40>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f383 8811 	msr	BASEPRI, r3
}
 80054de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <vPortSetupTimerInterrupt+0x38>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <vPortSetupTimerInterrupt+0x3c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <vPortSetupTimerInterrupt+0x40>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <vPortSetupTimerInterrupt+0x44>)
 800550a:	3b01      	subs	r3, #1
 800550c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010
 8005524:	e000e018 	.word	0xe000e018
 8005528:	20000000 	.word	0x20000000
 800552c:	10624dd3 	.word	0x10624dd3
 8005530:	e000e014 	.word	0xe000e014

08005534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005544 <vPortEnableVFP+0x10>
 8005538:	6801      	ldr	r1, [r0, #0]
 800553a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553e:	6001      	str	r1, [r0, #0]
 8005540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005542:	bf00      	nop
 8005544:	e000ed88 	.word	0xe000ed88

08005548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800554e:	f3ef 8305 	mrs	r3, IPSR
 8005552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d914      	bls.n	8005584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <vPortValidateInterruptPriority+0x70>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005564:	4b15      	ldr	r3, [pc, #84]	; (80055bc <vPortValidateInterruptPriority+0x74>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	7afa      	ldrb	r2, [r7, #11]
 800556a:	429a      	cmp	r2, r3
 800556c:	d20a      	bcs.n	8005584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <vPortValidateInterruptPriority+0x78>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <vPortValidateInterruptPriority+0x7c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d90a      	bls.n	80055aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	603b      	str	r3, [r7, #0]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <vPortValidateInterruptPriority+0x60>
	}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e3f0 	.word	0xe000e3f0
 80055bc:	20000a1c 	.word	0x20000a1c
 80055c0:	e000ed0c 	.word	0xe000ed0c
 80055c4:	20000a20 	.word	0x20000a20

080055c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055d4:	f7fe fd70 	bl	80040b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055d8:	4b58      	ldr	r3, [pc, #352]	; (800573c <pvPortMalloc+0x174>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055e0:	f000 f910 	bl	8005804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055e4:	4b56      	ldr	r3, [pc, #344]	; (8005740 <pvPortMalloc+0x178>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 808e 	bne.w	800570e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01d      	beq.n	8005634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055f8:	2208      	movs	r2, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f023 0307 	bic.w	r3, r3, #7
 8005610:	3308      	adds	r3, #8
 8005612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <pvPortMalloc+0x6c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	617b      	str	r3, [r7, #20]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d069      	beq.n	800570e <pvPortMalloc+0x146>
 800563a:	4b42      	ldr	r3, [pc, #264]	; (8005744 <pvPortMalloc+0x17c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d864      	bhi.n	800570e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005644:	4b40      	ldr	r3, [pc, #256]	; (8005748 <pvPortMalloc+0x180>)
 8005646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005648:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <pvPortMalloc+0x180>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564e:	e004      	b.n	800565a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <pvPortMalloc+0xa4>
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f1      	bne.n	8005650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <pvPortMalloc+0x174>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	429a      	cmp	r2, r3
 8005674:	d04b      	beq.n	800570e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2208      	movs	r2, #8
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	2308      	movs	r3, #8
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	429a      	cmp	r2, r3
 8005696:	d91f      	bls.n	80056d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <pvPortMalloc+0xf8>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	613b      	str	r3, [r7, #16]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056d2:	69b8      	ldr	r0, [r7, #24]
 80056d4:	f000 f8f8 	bl	80058c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <pvPortMalloc+0x17c>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <pvPortMalloc+0x17c>)
 80056e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056e6:	4b17      	ldr	r3, [pc, #92]	; (8005744 <pvPortMalloc+0x17c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <pvPortMalloc+0x184>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <pvPortMalloc+0x17c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a15      	ldr	r2, [pc, #84]	; (800574c <pvPortMalloc+0x184>)
 80056f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <pvPortMalloc+0x178>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	431a      	orrs	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800570e:	f7fe fce1 	bl	80040d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <pvPortMalloc+0x16a>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <pvPortMalloc+0x168>
	return pvReturn;
 8005732:	69fb      	ldr	r3, [r7, #28]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000162c 	.word	0x2000162c
 8005740:	20001638 	.word	0x20001638
 8005744:	20001630 	.word	0x20001630
 8005748:	20001624 	.word	0x20001624
 800574c:	20001634 	.word	0x20001634

08005750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d048      	beq.n	80057f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005762:	2308      	movs	r3, #8
 8005764:	425b      	negs	r3, r3
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	4b21      	ldr	r3, [pc, #132]	; (80057fc <vPortFree+0xac>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <vPortFree+0x44>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <vPortFree+0x62>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60bb      	str	r3, [r7, #8]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <vPortFree+0xac>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d115      	bne.n	80057f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <vPortFree+0xac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	401a      	ands	r2, r3
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057d8:	f7fe fc6e 	bl	80040b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <vPortFree+0xb0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	4a06      	ldr	r2, [pc, #24]	; (8005800 <vPortFree+0xb0>)
 80057e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ea:	6938      	ldr	r0, [r7, #16]
 80057ec:	f000 f86c 	bl	80058c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057f0:	f7fe fc70 	bl	80040d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20001638 	.word	0x20001638
 8005800:	20001630 	.word	0x20001630

08005804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800580a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800580e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <prvHeapInit+0xac>)
 8005812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00c      	beq.n	8005838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3307      	adds	r3, #7
 8005822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0307 	bic.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <prvHeapInit+0xac>)
 8005834:	4413      	add	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800583c:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <prvHeapInit+0xb0>)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <prvHeapInit+0xb0>)
 8005844:	2200      	movs	r2, #0
 8005846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4413      	add	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005850:	2208      	movs	r2, #8
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0307 	bic.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <prvHeapInit+0xb4>)
 8005864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <prvHeapInit+0xb4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <prvHeapInit+0xb4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvHeapInit+0xb4>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <prvHeapInit+0xb8>)
 8005892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <prvHeapInit+0xbc>)
 800589a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <prvHeapInit+0xc0>)
 800589e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000a24 	.word	0x20000a24
 80058b4:	20001624 	.word	0x20001624
 80058b8:	2000162c 	.word	0x2000162c
 80058bc:	20001634 	.word	0x20001634
 80058c0:	20001630 	.word	0x20001630
 80058c4:	20001638 	.word	0x20001638

080058c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058d0:	4b28      	ldr	r3, [pc, #160]	; (8005974 <prvInsertBlockIntoFreeList+0xac>)
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e002      	b.n	80058dc <prvInsertBlockIntoFreeList+0x14>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d8f7      	bhi.n	80058d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	4413      	add	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d108      	bne.n	800590a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	441a      	add	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d118      	bne.n	8005950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <prvInsertBlockIntoFreeList+0xb0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d00d      	beq.n	8005946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e008      	b.n	8005958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <prvInsertBlockIntoFreeList+0xb0>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e003      	b.n	8005958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d002      	beq.n	8005966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20001624 	.word	0x20001624
 8005978:	2000162c 	.word	0x2000162c

0800597c <memset>:
 800597c:	4402      	add	r2, r0
 800597e:	4603      	mov	r3, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	; (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	; (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	; (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 f826 	bl	80059f0 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08005ad4 	.word	0x08005ad4
 80059c8:	08005ad4 	.word	0x08005ad4
 80059cc:	08005ad4 	.word	0x08005ad4
 80059d0:	08005ad8 	.word	0x08005ad8

080059d4 <memcpy>:
 80059d4:	440a      	add	r2, r1
 80059d6:	4291      	cmp	r1, r2
 80059d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059dc:	d100      	bne.n	80059e0 <memcpy+0xc>
 80059de:	4770      	bx	lr
 80059e0:	b510      	push	{r4, lr}
 80059e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ea:	4291      	cmp	r1, r2
 80059ec:	d1f9      	bne.n	80059e2 <memcpy+0xe>
 80059ee:	bd10      	pop	{r4, pc}

080059f0 <_init>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	bf00      	nop
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr

080059fc <_fini>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	bf00      	nop
 8005a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a02:	bc08      	pop	{r3}
 8005a04:	469e      	mov	lr, r3
 8005a06:	4770      	bx	lr

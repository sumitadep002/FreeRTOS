
Idle_Hook.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d4  080045d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080045d4  080045d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045d4  080045d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001094  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010a4  200010a4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010559  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026ac  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb8  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b7b  00000000  00000000  00033b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000214b8  00000000  00000000  000346bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000120ff  00000000  00000000  00055b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c989d  00000000  00000000  00067c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ca0  00000000  00000000  00131510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001351b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004544 	.word	0x08004544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004544 	.word	0x08004544

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
	...

080001f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <vApplicationGetIdleTaskMemory+0x2c>)
 8000200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <vApplicationGetIdleTaskMemory+0x30>)
 8000206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2280      	movs	r2, #128	; 0x80
 800020c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800020e:	bf00      	nop
 8000210:	3714      	adds	r7, #20
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c
 8000220:	20000080 	.word	0x20000080

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fa75 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f823 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8ab 	bl	800038c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f879 	bl	800032c <MX_USART1_UART_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xTaskCreate(vTask1_Handler, "task1", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 800023a:	2300      	movs	r3, #0
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2304      	movs	r3, #4
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2300      	movs	r3, #0
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	4908      	ldr	r1, [pc, #32]	; (8000268 <main+0x44>)
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x48>)
 800024a:	f003 f89a 	bl	8003382 <xTaskCreate>
  xTaskCreate(vTask2_Handler, "task2", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 800024e:	2300      	movs	r3, #0
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2303      	movs	r3, #3
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2300      	movs	r3, #0
 8000258:	2280      	movs	r2, #128	; 0x80
 800025a:	4905      	ldr	r1, [pc, #20]	; (8000270 <main+0x4c>)
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <main+0x50>)
 800025e:	f003 f890 	bl	8003382 <xTaskCreate>
  vTaskStartScheduler();
 8000262:	f003 f9f1 	bl	8003648 <vTaskStartScheduler>
  /* USER CODE END RTOS_QUEUES */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000266:	e7fe      	b.n	8000266 <main+0x42>
 8000268:	0800455c 	.word	0x0800455c
 800026c:	080003d5 	.word	0x080003d5
 8000270:	08004564 	.word	0x08004564
 8000274:	0800041d 	.word	0x0800041d

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 f930 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	463b      	mov	r3, r7
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fcad 	bl	8000c2c <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002d8:	f000 f8d6 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f2:	f107 031c 	add.w	r3, r7, #28
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fcd5 	bl	8001ca8 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000304:	f000 f8c0 	bl	8000488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000308:	2301      	movs	r3, #1
 800030a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800030c:	2300      	movs	r3, #0
 800030e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000310:	463b      	mov	r3, r7
 8000312:	4618      	mov	r0, r3
 8000314:	f001 ff30 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800031e:	f000 f8b3 	bl	8000488 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3758      	adds	r7, #88	; 0x58
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART1_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000370:	f002 fad4 	bl	800291c <HAL_UART_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800037a:	f000 f885 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000280 	.word	0x20000280
 8000388:	40013800 	.word	0x40013800

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_GPIO_Init+0x44>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <MX_GPIO_Init+0x44>)
 8000398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x44>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_GPIO_Init+0x44>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <MX_GPIO_Init+0x44>)
 80003b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_GPIO_Init+0x44>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <vTask1_Handler>:

/* USER CODE BEGIN 4 */
void vTask1_Handler(void *param)
{
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	char str[] = "Executing Task1\r\n";
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <vTask1_Handler+0x40>)
 80003de:	f107 040c 	add.w	r4, r7, #12
 80003e2:	461d      	mov	r5, r3
 80003e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e8:	682b      	ldr	r3, [r5, #0]
 80003ea:	8023      	strh	r3, [r4, #0]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff feed 	bl	80001d0 <strlen>
 80003f6:	4603      	mov	r3, r0
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	f107 010c 	add.w	r1, r7, #12
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <vTask1_Handler+0x44>)
 8000404:	f002 fad8 	bl	80029b8 <HAL_UART_Transmit>
		vTaskDelay(5000);
 8000408:	f241 3088 	movw	r0, #5000	; 0x1388
 800040c:	f003 f8e8 	bl	80035e0 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000410:	e7ec      	b.n	80003ec <vTask1_Handler+0x18>
 8000412:	bf00      	nop
 8000414:	0800456c 	.word	0x0800456c
 8000418:	20000280 	.word	0x20000280

0800041c <vTask2_Handler>:
	}
}
void vTask2_Handler(void *param)
{
 800041c:	b5b0      	push	{r4, r5, r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	char str[] = "Executing Task2\r\n";
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <vTask2_Handler+0x40>)
 8000426:	f107 040c 	add.w	r4, r7, #12
 800042a:	461d      	mov	r5, r3
 800042c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000430:	682b      	ldr	r3, [r5, #0]
 8000432:	8023      	strh	r3, [r4, #0]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff fec9 	bl	80001d0 <strlen>
 800043e:	4603      	mov	r3, r0
 8000440:	b29a      	uxth	r2, r3
 8000442:	f107 010c 	add.w	r1, r7, #12
 8000446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <vTask2_Handler+0x44>)
 800044c:	f002 fab4 	bl	80029b8 <HAL_UART_Transmit>
		vTaskDelay(5000);
 8000450:	f241 3088 	movw	r0, #5000	; 0x1388
 8000454:	f003 f8c4 	bl	80035e0 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000458:	e7ec      	b.n	8000434 <vTask2_Handler+0x18>
 800045a:	bf00      	nop
 800045c:	08004580 	.word	0x08004580
 8000460:	20000280 	.word	0x20000280

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f965 	bl	8000744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40001000 	.word	0x40001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <HAL_MspInit+0x4c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <HAL_MspInit+0x4c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <HAL_MspInit+0x4c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <HAL_MspInit+0x4c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <HAL_MspInit+0x4c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <HAL_MspInit+0x4c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	210f      	movs	r1, #15
 80004ce:	f06f 0001 	mvn.w	r0, #1
 80004d2:	f000 fa0f 	bl	80008f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_UART_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d127      	bne.n	8000556 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_UART_MspInit+0x80>)
 800050c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_UART_MspInit+0x80>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000536:	23c0      	movs	r3, #192	; 0xc0
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000546:	2307      	movs	r3, #7
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <HAL_UART_MspInit+0x84>)
 8000552:	f000 f9f9 	bl	8000948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3728      	adds	r7, #40	; 0x28
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40013800 	.word	0x40013800
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400

0800056c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800057c:	4b33      	ldr	r3, [pc, #204]	; (800064c <HAL_InitTick+0xe0>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	4a32      	ldr	r2, [pc, #200]	; (800064c <HAL_InitTick+0xe0>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	61d3      	str	r3, [r2, #28]
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <HAL_InitTick+0xe0>)
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	f003 0310 	and.w	r3, r3, #16
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000594:	f107 0210 	add.w	r2, r7, #16
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fdb8 	bl	8002114 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d103      	bne.n	80005b6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ae:	f001 fd6d 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80005b2:	6378      	str	r0, [r7, #52]	; 0x34
 80005b4:	e004      	b.n	80005c0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005b6:	f001 fd69 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80005ba:	4603      	mov	r3, r0
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c2:	4a23      	ldr	r2, [pc, #140]	; (8000650 <HAL_InitTick+0xe4>)
 80005c4:	fba2 2303 	umull	r2, r3, r2, r3
 80005c8:	0c9b      	lsrs	r3, r3, #18
 80005ca:	3b01      	subs	r3, #1
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <HAL_InitTick+0xe8>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <HAL_InitTick+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <HAL_InitTick+0xe8>)
 80005d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <HAL_InitTick+0xe8>)
 80005de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_InitTick+0xe8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <HAL_InitTick+0xe8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_InitTick+0xe8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005f4:	4817      	ldr	r0, [pc, #92]	; (8000654 <HAL_InitTick+0xe8>)
 80005f6:	f001 fef5 	bl	80023e4 <HAL_TIM_Base_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000600:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000604:	2b00      	cmp	r3, #0
 8000606:	d11b      	bne.n	8000640 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <HAL_InitTick+0xe8>)
 800060a:	f001 ff4d 	bl	80024a8 <HAL_TIM_Base_Start_IT>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000614:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000618:	2b00      	cmp	r3, #0
 800061a:	d111      	bne.n	8000640 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800061c:	2036      	movs	r0, #54	; 0x36
 800061e:	f000 f985 	bl	800092c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d808      	bhi.n	800063a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	2036      	movs	r0, #54	; 0x36
 800062e:	f000 f961 	bl	80008f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_InitTick+0xf0>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	e002      	b.n	8000640 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000640:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000644:	4618      	mov	r0, r3
 8000646:	3738      	adds	r7, #56	; 0x38
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	431bde83 	.word	0x431bde83
 8000654:	20000308 	.word	0x20000308
 8000658:	40001000 	.word	0x40001000
 800065c:	20000004 	.word	0x20000004

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <TIM6_DAC1_IRQHandler+0x10>)
 8000692:	f001 ff65 	bl	8002560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000308 	.word	0x20000308

080006a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <SystemInit+0x20>)
 80006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <SystemInit+0x20>)
 80006ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c8:	f7ff ffea 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490d      	ldr	r1, [pc, #52]	; (8000704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0a      	ldr	r4, [pc, #40]	; (8000710 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f2:	f003 ff03 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f6:	f7ff fd95 	bl	8000224 <main>

080006fa <LoopForever>:

LoopForever:
    b LoopForever
 80006fa:	e7fe      	b.n	80006fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000708:	080045dc 	.word	0x080045dc
  ldr r2, =_sbss
 800070c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000710:	200010a4 	.word	0x200010a4

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f8d8 	bl	80008de <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	200f      	movs	r0, #15
 8000730:	f7ff ff1c 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff feae 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x20>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_IncTick+0x24>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_IncTick+0x24>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008
 8000768:	20000354 	.word	0x20000354

0800076c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <HAL_GetTick+0x14>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000354 	.word	0x20000354

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db0b      	blt.n	8000812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <__NVIC_EnableIRQ+0x38>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100

08000824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	db0a      	blt.n	800084e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	490c      	ldr	r1, [pc, #48]	; (8000870 <__NVIC_SetPriority+0x4c>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	440b      	add	r3, r1
 8000848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800084c:	e00a      	b.n	8000864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_SetPriority+0x50>)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	3b04      	subs	r3, #4
 800085c:	0112      	lsls	r2, r2, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	440b      	add	r3, r1
 8000862:	761a      	strb	r2, [r3, #24]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	f1c3 0307 	rsb	r3, r3, #7
 8000892:	2b04      	cmp	r3, #4
 8000894:	bf28      	it	cs
 8000896:	2304      	movcs	r3, #4
 8000898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3304      	adds	r3, #4
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d902      	bls.n	80008a8 <NVIC_EncodePriority+0x30>
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3b03      	subs	r3, #3
 80008a6:	e000      	b.n	80008aa <NVIC_EncodePriority+0x32>
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43da      	mvns	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	401a      	ands	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	43d9      	mvns	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	4313      	orrs	r3, r2
         );
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3724      	adds	r7, #36	; 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff4c 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
 8000900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000906:	f7ff ff61 	bl	80007cc <__NVIC_GetPriorityGrouping>
 800090a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	6978      	ldr	r0, [r7, #20]
 8000912:	f7ff ffb1 	bl	8000878 <NVIC_EncodePriority>
 8000916:	4602      	mov	r2, r0
 8000918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff80 	bl	8000824 <__NVIC_SetPriority>
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff54 	bl	80007e8 <__NVIC_EnableIRQ>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000956:	e14e      	b.n	8000bf6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2101      	movs	r1, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 8140 	beq.w	8000bf0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d005      	beq.n	8000988 <HAL_GPIO_Init+0x40>
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	2b02      	cmp	r3, #2
 8000986:	d130      	bne.n	80009ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009be:	2201      	movs	r2, #1
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	091b      	lsrs	r3, r3, #4
 80009d4:	f003 0201 	and.w	r2, r3, #1
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d017      	beq.n	8000a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d123      	bne.n	8000a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	691a      	ldr	r2, [r3, #16]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	08da      	lsrs	r2, r3, #3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3208      	adds	r2, #8
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0203 	and.w	r2, r3, #3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 809a 	beq.w	8000bf0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <HAL_GPIO_Init+0x2cc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a54      	ldr	r2, [pc, #336]	; (8000c14 <HAL_GPIO_Init+0x2cc>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <HAL_GPIO_Init+0x2cc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ad4:	4a50      	ldr	r2, [pc, #320]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000afe:	d013      	beq.n	8000b28 <HAL_GPIO_Init+0x1e0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <HAL_GPIO_Init+0x2d4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d00d      	beq.n	8000b24 <HAL_GPIO_Init+0x1dc>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <HAL_GPIO_Init+0x2d8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d007      	beq.n	8000b20 <HAL_GPIO_Init+0x1d8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a44      	ldr	r2, [pc, #272]	; (8000c24 <HAL_GPIO_Init+0x2dc>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d101      	bne.n	8000b1c <HAL_GPIO_Init+0x1d4>
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x1e2>
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	e004      	b.n	8000b2a <HAL_GPIO_Init+0x1e2>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x1e2>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <HAL_GPIO_Init+0x1e2>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b3a:	4937      	ldr	r1, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6c:	4a2e      	ldr	r2, [pc, #184]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_GPIO_Init+0x2e0>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f47f aea9 	bne.w	8000958 <HAL_GPIO_Init+0x10>
  }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000800 	.word	0x48000800
 8000c24:	48000c00 	.word	0x48000c00
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	f001 b823 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 817d 	beq.w	8000f62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c68:	4bbc      	ldr	r3, [pc, #752]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d00c      	beq.n	8000c8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c74:	4bb9      	ldr	r3, [pc, #740]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d15c      	bne.n	8000d3a <HAL_RCC_OscConfig+0x10e>
 8000c80:	4bb6      	ldr	r3, [pc, #728]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d155      	bne.n	8000d3a <HAL_RCC_OscConfig+0x10e>
 8000c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ca2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca6:	fab3 f383 	clz	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	095b      	lsrs	r3, r3, #5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d102      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x94>
 8000cba:	4ba8      	ldr	r3, [pc, #672]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	e015      	b.n	8000cec <HAL_RCC_OscConfig+0xc0>
 8000cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ccc:	fa93 f3a3 	rbit	r3, r3
 8000cd0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cdc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ce8:	4b9c      	ldr	r3, [pc, #624]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cf0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000cf4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cf8:	fa92 f2a2 	rbit	r2, r2
 8000cfc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d00:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	f042 0220 	orr.w	r2, r2, #32
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	f002 021f 	and.w	r2, r2, #31
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 811f 	beq.w	8000f60 <HAL_RCC_OscConfig+0x334>
 8000d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8116 	bne.w	8000f60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f000 bfaf 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4a:	d106      	bne.n	8000d5a <HAL_RCC_OscConfig+0x12e>
 8000d4c:	4b83      	ldr	r3, [pc, #524]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a82      	ldr	r2, [pc, #520]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e036      	b.n	8000dc8 <HAL_RCC_OscConfig+0x19c>
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x158>
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7b      	ldr	r2, [pc, #492]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b79      	ldr	r3, [pc, #484]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a78      	ldr	r2, [pc, #480]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e021      	b.n	8000dc8 <HAL_RCC_OscConfig+0x19c>
 8000d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x184>
 8000d96:	4b71      	ldr	r3, [pc, #452]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a70      	ldr	r2, [pc, #448]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a6d      	ldr	r2, [pc, #436]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0x19c>
 8000db0:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a69      	ldr	r2, [pc, #420]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a66      	ldr	r2, [pc, #408]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dc8:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	f023 020f 	bic.w	r2, r3, #15
 8000dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	495f      	ldr	r1, [pc, #380]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d059      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fcbb 	bl	800076c <HAL_GetTick>
 8000df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e00a      	b.n	8000e12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fcb6 	bl	800076c <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b64      	cmp	r3, #100	; 0x64
 8000e0a:	d902      	bls.n	8000e12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f000 bf43 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 8000e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e16:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	095b      	lsrs	r3, r3, #5
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_RCC_OscConfig+0x218>
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	e015      	b.n	8000e70 <HAL_RCC_OscConfig+0x244>
 8000e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e48:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e74:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e78:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e7c:	fa92 f2a2 	rbit	r2, r2
 8000e80:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	f002 021f 	and.w	r2, r2, #31
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ab      	beq.n	8000dfc <HAL_RCC_OscConfig+0x1d0>
 8000ea4:	e05d      	b.n	8000f62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fc61 	bl	800076c <HAL_GetTick>
 8000eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	e00a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fc5c 	bl	800076c <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b64      	cmp	r3, #100	; 0x64
 8000ebe:	d902      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f000 bee9 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000eda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ede:	fab3 f383 	clz	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2cc>
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e015      	b.n	8000f24 <HAL_RCC_OscConfig+0x2f8>
 8000ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f28:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f30:	fa92 f2a2 	rbit	r2, r2
 8000f34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f3c:	fab2 f282 	clz	r2, r2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f002 021f 	and.w	r2, r2, #31
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ab      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x284>
 8000f58:	e003      	b.n	8000f62 <HAL_RCC_OscConfig+0x336>
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 817d 	beq.w	8001272 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f78:	4ba6      	ldr	r3, [pc, #664]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f84:	4ba3      	ldr	r3, [pc, #652]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d172      	bne.n	8001076 <HAL_RCC_OscConfig+0x44a>
 8000f90:	4ba0      	ldr	r3, [pc, #640]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d16c      	bne.n	8001076 <HAL_RCC_OscConfig+0x44a>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x3a0>
 8000fc6:	4b93      	ldr	r3, [pc, #588]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e013      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3c8>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fe4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ff0:	4b88      	ldr	r3, [pc, #544]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ffa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001006:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f002 021f 	and.w	r2, r2, #31
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <HAL_RCC_OscConfig+0x410>
 8001026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d002      	beq.n	800103c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f000 be2e 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	21f8      	movs	r1, #248	; 0xf8
 8001052:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001056:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800105a:	fa91 f1a1 	rbit	r1, r1
 800105e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001062:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001066:	fab1 f181 	clz	r1, r1
 800106a:	b2c9      	uxtb	r1, r1
 800106c:	408b      	lsls	r3, r1
 800106e:	4969      	ldr	r1, [pc, #420]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001074:	e0fd      	b.n	8001272 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 8088 	beq.w	8001198 <HAL_RCC_OscConfig+0x56c>
 8001088:	2301      	movs	r3, #1
 800108a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800109a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	461a      	mov	r2, r3
 80010b0:	2301      	movs	r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fb5a 	bl	800076c <HAL_GetTick>
 80010b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fb55 	bl	800076c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d902      	bls.n	80010d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f000 bde2 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_RCC_OscConfig+0x4d8>
 80010fe:	4b45      	ldr	r3, [pc, #276]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	e013      	b.n	800112c <HAL_RCC_OscConfig+0x500>
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800111c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	2202      	movs	r2, #2
 800112e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001132:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800113e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f002 021f 	and.w	r2, r2, #31
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0af      	beq.n	80010be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	21f8      	movs	r1, #248	; 0xf8
 8001174:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800117c:	fa91 f1a1 	rbit	r1, r1
 8001180:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001184:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001188:	fab1 f181 	clz	r1, r1
 800118c:	b2c9      	uxtb	r1, r1
 800118e:	408b      	lsls	r3, r1
 8001190:	4920      	ldr	r1, [pc, #128]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
 8001196:	e06c      	b.n	8001272 <HAL_RCC_OscConfig+0x646>
 8001198:	2301      	movs	r3, #1
 800119a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	461a      	mov	r2, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fad2 	bl	800076c <HAL_GetTick>
 80011c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011cc:	e00a      	b.n	80011e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ce:	f7ff facd 	bl	800076c <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d902      	bls.n	80011e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	f000 bd5a 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	095b      	lsrs	r3, r3, #5
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d104      	bne.n	8001218 <HAL_RCC_OscConfig+0x5ec>
 800120e:	4b01      	ldr	r3, [pc, #4]	; (8001214 <HAL_RCC_OscConfig+0x5e8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	e015      	b.n	8001240 <HAL_RCC_OscConfig+0x614>
 8001214:	40021000 	.word	0x40021000
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001230:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800123c:	4bc8      	ldr	r3, [pc, #800]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2202      	movs	r2, #2
 8001242:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001246:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800124a:	fa92 f2a2 	rbit	r2, r2
 800124e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001252:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001256:	fab2 f282 	clz	r2, r2
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f002 021f 	and.w	r2, r2, #31
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ad      	bne.n	80011ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8110 	beq.w	80014a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d079      	beq.n	800138c <HAL_RCC_OscConfig+0x760>
 8001298:	2301      	movs	r3, #1
 800129a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4bab      	ldr	r3, [pc, #684]	; (8001564 <HAL_RCC_OscConfig+0x938>)
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	461a      	mov	r2, r3
 80012be:	2301      	movs	r3, #1
 80012c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fa53 	bl	800076c <HAL_GetTick>
 80012c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fa4e 	bl	800076c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d902      	bls.n	80012e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	f000 bcdb 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012fc:	2202      	movs	r2, #2
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001304:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	fa93 f2a3 	rbit	r2, r3
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001320:	2202      	movs	r2, #2
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f2a3 	rbit	r2, r3
 8001332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001336:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800133a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001348:	2102      	movs	r1, #2
 800134a:	6019      	str	r1, [r3, #0]
 800134c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f1a3 	rbit	r1, r3
 800135a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001362:	6019      	str	r1, [r3, #0]
  return result;
 8001364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0a0      	beq.n	80012cc <HAL_RCC_OscConfig+0x6a0>
 800138a:	e08d      	b.n	80014a8 <HAL_RCC_OscConfig+0x87c>
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f2a3 	rbit	r2, r3
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ae:	601a      	str	r2, [r3, #0]
  return result;
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b68      	ldr	r3, [pc, #416]	; (8001564 <HAL_RCC_OscConfig+0x938>)
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	2300      	movs	r3, #0
 80013cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff f9cd 	bl	800076c <HAL_GetTick>
 80013d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff f9c8 	bl	800076c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d902      	bls.n	80013ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f000 bc55 	b.w	8001c98 <HAL_RCC_OscConfig+0x106c>
 80013ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001422:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f2a3 	rbit	r2, r3
 8001450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001454:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001458:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 800145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001466:	2102      	movs	r1, #2
 8001468:	6019      	str	r1, [r3, #0]
 800146a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f1a3 	rbit	r1, r3
 8001478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001480:	6019      	str	r1, [r3, #0]
  return result;
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d197      	bne.n	80013d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 81a1 	beq.w	8001800 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d116      	bne.n	80014fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	61d3      	str	r3, [r2, #28]
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x93c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11a      	bne.n	8001540 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_RCC_OscConfig+0x93c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <HAL_RCC_OscConfig+0x93c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff f929 	bl	800076c <HAL_GetTick>
 800151a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	e009      	b.n	8001534 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001520:	f7ff f924 	bl	800076c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e3b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x93c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ef      	beq.n	8001520 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10d      	bne.n	800156c <HAL_RCC_OscConfig+0x940>
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a02      	ldr	r2, [pc, #8]	; (8001560 <HAL_RCC_OscConfig+0x934>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e03c      	b.n	80015d8 <HAL_RCC_OscConfig+0x9ac>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	10908120 	.word	0x10908120
 8001568:	40007000 	.word	0x40007000
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x96a>
 800157c:	4bc1      	ldr	r3, [pc, #772]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4ac0      	ldr	r2, [pc, #768]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	4bbe      	ldr	r3, [pc, #760]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4abd      	ldr	r2, [pc, #756]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 800158e:	f023 0304 	bic.w	r3, r3, #4
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e020      	b.n	80015d8 <HAL_RCC_OscConfig+0x9ac>
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x994>
 80015a6:	4bb7      	ldr	r3, [pc, #732]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4ab6      	ldr	r2, [pc, #728]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4bb4      	ldr	r3, [pc, #720]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4ab3      	ldr	r2, [pc, #716]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x9ac>
 80015c0:	4bb0      	ldr	r3, [pc, #704]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4aaf      	ldr	r2, [pc, #700]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4bad      	ldr	r3, [pc, #692]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4aac      	ldr	r2, [pc, #688]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8081 	beq.w	80016ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f8bf 	bl	800076c <HAL_GetTick>
 80015ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff f8ba 	bl	800076c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e345      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001614:	2202      	movs	r2, #2
 8001616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001638:	2202      	movs	r2, #2
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f2a3 	rbit	r2, r3
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001652:	601a      	str	r2, [r3, #0]
  return result;
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800165c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0xa4c>
 8001672:	4b84      	ldr	r3, [pc, #528]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	e013      	b.n	80016a0 <HAL_RCC_OscConfig+0xa74>
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	4b79      	ldr	r3, [pc, #484]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016a8:	2102      	movs	r1, #2
 80016aa:	6011      	str	r1, [r2, #0]
 80016ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	fa92 f1a2 	rbit	r1, r2
 80016ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016c2:	6011      	str	r1, [r2, #0]
  return result;
 80016c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	fab2 f282 	clz	r2, r2
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	f002 021f 	and.w	r2, r2, #31
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d084      	beq.n	80015f4 <HAL_RCC_OscConfig+0x9c8>
 80016ea:	e07f      	b.n	80017ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f83e 	bl	800076c <HAL_GetTick>
 80016f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f839 	bl	800076c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2c4      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800175e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0xb4e>
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0xb76>
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017aa:	2102      	movs	r1, #2
 80017ac:	6011      	str	r1, [r2, #0]
 80017ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	fa92 f1a2 	rbit	r1, r2
 80017bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017c4:	6011      	str	r1, [r2, #0]
  return result;
 80017c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fab2 f282 	clz	r2, r2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f002 021f 	and.w	r2, r2, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d184      	bne.n	80016f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8242 	beq.w	8001c96 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_RCC_OscConfig+0xc58>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	f000 8213 	beq.w	8001c46 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 8162 	bne.w	8001af6 <HAL_RCC_OscConfig+0xeca>
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800183a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800183e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001856:	601a      	str	r2, [r3, #0]
  return result;
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001860:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800186c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	461a      	mov	r2, r3
 8001874:	2300      	movs	r3, #0
 8001876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7fe ff78 	bl	800076c <HAL_GetTick>
 800187c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	e00c      	b.n	800189c <HAL_RCC_OscConfig+0xc70>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe ff70 	bl	800076c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1fd      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018c0:	601a      	str	r2, [r3, #0]
  return result;
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_OscConfig+0xcba>
 80018e0:	4bb0      	ldr	r3, [pc, #704]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	e027      	b.n	8001936 <HAL_RCC_OscConfig+0xd0a>
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001906:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	4b9c      	ldr	r3, [pc, #624]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800193e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001942:	6011      	str	r1, [r2, #0]
 8001944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001948:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	fa92 f1a2 	rbit	r1, r2
 8001952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001956:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800195a:	6011      	str	r1, [r2, #0]
  return result;
 800195c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001960:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d182      	bne.n	8001888 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001982:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	430b      	orrs	r3, r1
 80019a4:	497f      	ldr	r1, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	461a      	mov	r2, r3
 80019ec:	2301      	movs	r3, #1
 80019ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7fe febc 	bl	800076c <HAL_GetTick>
 80019f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe feb7 	bl	800076c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e144      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a32:	601a      	str	r2, [r3, #0]
  return result;
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_OscConfig+0xe2c>
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e027      	b.n	8001aa8 <HAL_RCC_OscConfig+0xe7c>
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ab0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fa92 f1a2 	rbit	r1, r2
 8001ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001acc:	6011      	str	r1, [r2, #0]
  return result;
 8001ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f042 0220 	orr.w	r2, r2, #32
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f002 021f 	and.w	r2, r2, #31
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d082      	beq.n	80019fa <HAL_RCC_OscConfig+0xdce>
 8001af4:	e0cf      	b.n	8001c96 <HAL_RCC_OscConfig+0x106a>
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b1a:	601a      	str	r2, [r3, #0]
  return result;
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	461a      	mov	r2, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fe16 	bl	800076c <HAL_GetTick>
 8001b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe fe11 	bl	800076c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e09e      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d104      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xf7c>
 8001b9e:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <HAL_RCC_OscConfig+0xf78>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e029      	b.n	8001bf8 <HAL_RCC_OscConfig+0xfcc>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_OscConfig+0x1078>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	fa92 f1a2 	rbit	r1, r2
 8001c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c18:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c1c:	6011      	str	r1, [r2, #0]
  return result;
 8001c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d180      	bne.n	8001b46 <HAL_RCC_OscConfig+0xf1a>
 8001c44:	e027      	b.n	8001c96 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01e      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_OscConfig+0x1078>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b09e      	sub	sp, #120	; 0x78
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e162      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d910      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	498b      	ldr	r1, [pc, #556]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e14a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b82      	ldr	r3, [pc, #520]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	497f      	ldr	r1, [pc, #508]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80dc 	beq.w	8001ed4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d13c      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xf6>
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xa6>
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e00f      	b.n	8001d6e <HAL_RCC_ClockConfig+0xc6>
 8001d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d60:	663b      	str	r3, [r7, #96]	; 0x60
 8001d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d72:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d17b      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0f3      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d13c      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x178>
 8001da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001daa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x128>
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e00f      	b.n	8001df0 <HAL_RCC_ClockConfig+0x148>
 8001dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
 8001de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d13a      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0b2      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
 8001e20:	2302      	movs	r3, #2
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x1a0>
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e00d      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1bc>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	61ba      	str	r2, [r7, #24]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	fa92 f2a2 	rbit	r2, r2
 8001e6e:	617a      	str	r2, [r7, #20]
  return result;
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e079      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	491a      	ldr	r1, [pc, #104]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7fe fc62 	bl	800076c <HAL_GetTick>
 8001ea8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7fe fc5e 	bl	800076c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e061      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_RCC_ClockConfig+0x260>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d214      	bcs.n	8001f0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4906      	ldr	r1, [pc, #24]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_RCC_ClockConfig+0x25c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e040      	b.n	8001f86 <HAL_RCC_ClockConfig+0x2de>
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	491a      	ldr	r1, [pc, #104]	; (8001f90 <HAL_RCC_ClockConfig+0x2e8>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x2e8>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4912      	ldr	r1, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f4a:	f000 f829 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4601      	mov	r1, r0
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_ClockConfig+0x2e8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	22f0      	movs	r2, #240	; 0xf0
 8001f5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	fa92 f2a2 	rbit	r2, r2
 8001f62:	60fa      	str	r2, [r7, #12]
  return result;
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	40d3      	lsrs	r3, r2
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x2ec>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	fa21 f303 	lsr.w	r3, r1, r3
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_RCC_ClockConfig+0x2f0>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_ClockConfig+0x2f4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe faf4 	bl	800056c <HAL_InitTick>
  
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3778      	adds	r7, #120	; 0x78
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	0800459c 	.word	0x0800459c
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b08b      	sub	sp, #44	; 0x2c
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fce:	e03c      	b.n	800204a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd2:	623b      	str	r3, [r7, #32]
      break;
 8001fd4:	e03c      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fdc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fe0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	607a      	str	r2, [r7, #4]
  return result;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	40d3      	lsrs	r3, r2
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	220f      	movs	r2, #15
 8002004:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	60fa      	str	r2, [r7, #12]
  return result;
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	fab2 f282 	clz	r2, r2
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	40d3      	lsrs	r3, r2
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_RCC_GetSysClockFreq+0xcc>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc4>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	e004      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_RCC_GetSysClockFreq+0xd0>)
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	623b      	str	r3, [r7, #32]
      break;
 8002048:	e002      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204c:	623b      	str	r3, [r7, #32]
      break;
 800204e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002050:	6a3b      	ldr	r3, [r7, #32]
}
 8002052:	4618      	mov	r0, r3
 8002054:	372c      	adds	r7, #44	; 0x2c
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	007a1200 	.word	0x007a1200
 8002068:	080045b4 	.word	0x080045b4
 800206c:	080045c4 	.word	0x080045c4
 8002070:	003d0900 	.word	0x003d0900

08002074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000000 	.word	0x20000000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002092:	f7ff ffef 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002096:	4601      	mov	r1, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	fa92 f2a2 	rbit	r2, r2
 80020ac:	603a      	str	r2, [r7, #0]
  return result;
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	fab2 f282 	clz	r2, r2
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	40d3      	lsrs	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080045ac 	.word	0x080045ac

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80020d6:	f7ff ffcd 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020da:	4601      	mov	r1, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80020e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80020e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	603a      	str	r2, [r7, #0]
  return result;
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x40>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	080045ac 	.word	0x080045ac

08002114 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	220f      	movs	r2, #15
 8002122:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_GetClockConfig+0x5c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RCC_GetClockConfig+0x60>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0207 	and.w	r2, r3, #7
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b092      	sub	sp, #72	; 0x48
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80cd 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219c:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10e      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	61d3      	str	r3, [r2, #28]
 80021b4:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b85      	ldr	r3, [pc, #532]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d2:	4b82      	ldr	r3, [pc, #520]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a81      	ldr	r2, [pc, #516]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7fe fac5 	bl	800076c <HAL_GetTick>
 80021e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe fac1 	bl	800076c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ea      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b78      	ldr	r3, [pc, #480]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002204:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800220e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d07d      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800221e:	429a      	cmp	r2, r3
 8002220:	d076      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800222c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	2301      	movs	r3, #1
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800225e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	461a      	mov	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002278:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d045      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fa72 	bl	800076c <HAL_GetTick>
 8002288:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fa6e 	bl	800076c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e095      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x256>
 80022a2:	2302      	movs	r3, #2
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d102      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80022d0:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	e007      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	2202      	movs	r2, #2
 80022e8:	613a      	str	r2, [r7, #16]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	60fa      	str	r2, [r7, #12]
  return result;
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f002 021f 	and.w	r2, r2, #31
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f202 	lsl.w	r2, r1, r2
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0bd      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	492e      	ldr	r1, [pc, #184]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	4313      	orrs	r3, r2
 8002320:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002322:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4922      	ldr	r1, [pc, #136]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	4313      	orrs	r3, r2
 8002352:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f023 0210 	bic.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	491a      	ldr	r1, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	4313      	orrs	r3, r2
 8002370:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	4313      	orrs	r3, r2
 800238e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3748      	adds	r7, #72	; 0x48
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	10908100 	.word	0x10908100

080023e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e049      	b.n	800248a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f841 	bl	8002492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f000 f9e4 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e040      	b.n	8002542 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_TIM_Base_Start_IT+0xa8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00e      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x58>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d009      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x58>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIM_Base_Start_IT+0xac>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x58>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_TIM_Base_Start_IT+0xb0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d115      	bne.n	800252c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_TIM_Base_Start_IT+0xb4>)
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b06      	cmp	r3, #6
 8002510:	d015      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x96>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d011      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252a:	e008      	b.n	800253e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e000      	b.n	8002540 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40014000 	.word	0x40014000
 800255c:	00010007 	.word	0x00010007

08002560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d122      	bne.n	80025bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0202 	mvn.w	r2, #2
 800258c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f905 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8f7 	bl	800279e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f908 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d122      	bne.n	8002610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d11b      	bne.n	8002610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0204 	mvn.w	r2, #4
 80025e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8db 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8cd 	bl	800279e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8de 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d122      	bne.n	8002664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b08      	cmp	r3, #8
 800262a:	d11b      	bne.n	8002664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0208 	mvn.w	r2, #8
 8002634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2204      	movs	r2, #4
 800263a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8b1 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8a3 	bl	800279e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8b4 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b10      	cmp	r3, #16
 8002670:	d122      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b10      	cmp	r3, #16
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0210 	mvn.w	r2, #16
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2208      	movs	r2, #8
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f887 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f879 	bl	800279e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f88a 	bl	80027c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0201 	mvn.w	r2, #1
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fd fec0 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b80      	cmp	r3, #128	; 0x80
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8f2 	bl	80028f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271e:	d10e      	bne.n	800273e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b80      	cmp	r3, #128	; 0x80
 800272c:	d107      	bne.n	800273e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8e5 	bl	8002908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d10e      	bne.n	800276a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d107      	bne.n	800276a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f838 	bl	80027da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b20      	cmp	r3, #32
 8002776:	d10e      	bne.n	8002796 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	d107      	bne.n	8002796 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f06f 0220 	mvn.w	r2, #32
 800278e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f8a5 	bl	80028e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a32      	ldr	r2, [pc, #200]	; (80028cc <TIM_Base_SetConfig+0xdc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x28>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x28>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <TIM_Base_SetConfig+0xe0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <TIM_Base_SetConfig+0xdc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <TIM_Base_SetConfig+0x6a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d00f      	beq.n	800285a <TIM_Base_SetConfig+0x6a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <TIM_Base_SetConfig+0xe0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00b      	beq.n	800285a <TIM_Base_SetConfig+0x6a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <TIM_Base_SetConfig+0xe4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x6a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <TIM_Base_SetConfig+0xe8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x6a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a21      	ldr	r2, [pc, #132]	; (80028dc <TIM_Base_SetConfig+0xec>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <TIM_Base_SetConfig+0xdc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0xc0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <TIM_Base_SetConfig+0xe4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0xc0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <TIM_Base_SetConfig+0xe8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0xc0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <TIM_Base_SetConfig+0xec>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800

080028e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e040      	b.n	80029b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fdd0 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8b6 	bl	8002acc <UART_SetConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9e0 	bl	8002d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fa67 	bl	8002e7c <UART_CheckIdleState>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d178      	bne.n	8002ac2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_Transmit+0x24>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e071      	b.n	8002ac4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2221      	movs	r2, #33	; 0x21
 80029ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ee:	f7fd febd 	bl	800076c <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	88fa      	ldrh	r2, [r7, #6]
 80029f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d108      	bne.n	8002a20 <HAL_UART_Transmit+0x68>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e003      	b.n	8002a28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a28:	e030      	b.n	8002a8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fac9 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e03c      	b.n	8002ac4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	3302      	adds	r3, #2
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e008      	b.n	8002a7a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b292      	uxth	r2, r2
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1c8      	bne.n	8002a2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa92 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e005      	b.n	8002ac4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b8a      	ldr	r3, [pc, #552]	; (8002d20 <UART_SetConfig+0x254>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a78      	ldr	r2, [pc, #480]	; (8002d24 <UART_SetConfig+0x258>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d120      	bne.n	8002b8a <UART_SetConfig+0xbe>
 8002b48:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <UART_SetConfig+0x25c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d817      	bhi.n	8002b84 <UART_SetConfig+0xb8>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <UART_SetConfig+0x90>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b79 	.word	0x08002b79
 8002b64:	08002b7f 	.word	0x08002b7f
 8002b68:	08002b73 	.word	0x08002b73
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e01d      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b72:	2302      	movs	r3, #2
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e01a      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e017      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e014      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b84:	2310      	movs	r3, #16
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e011      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a67      	ldr	r2, [pc, #412]	; (8002d2c <UART_SetConfig+0x260>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d102      	bne.n	8002b9a <UART_SetConfig+0xce>
 8002b94:	2300      	movs	r3, #0
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e009      	b.n	8002bae <UART_SetConfig+0xe2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a64      	ldr	r2, [pc, #400]	; (8002d30 <UART_SetConfig+0x264>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <UART_SetConfig+0xde>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e001      	b.n	8002bae <UART_SetConfig+0xe2>
 8002baa:	2310      	movs	r3, #16
 8002bac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb6:	d15a      	bne.n	8002c6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002bb8:	7ffb      	ldrb	r3, [r7, #31]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d827      	bhi.n	8002c0e <UART_SetConfig+0x142>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <UART_SetConfig+0xf8>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002bf1 	.word	0x08002bf1
 8002bcc:	08002bf9 	.word	0x08002bf9
 8002bd0:	08002c0f 	.word	0x08002c0f
 8002bd4:	08002bff 	.word	0x08002bff
 8002bd8:	08002c0f 	.word	0x08002c0f
 8002bdc:	08002c0f 	.word	0x08002c0f
 8002be0:	08002c0f 	.word	0x08002c0f
 8002be4:	08002c07 	.word	0x08002c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff fa50 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8002bec:	61b8      	str	r0, [r7, #24]
        break;
 8002bee:	e013      	b.n	8002c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fa6e 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	61b8      	str	r0, [r7, #24]
        break;
 8002bf6:	e00f      	b.n	8002c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <UART_SetConfig+0x268>)
 8002bfa:	61bb      	str	r3, [r7, #24]
        break;
 8002bfc:	e00c      	b.n	8002c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7ff f9cf 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8002c02:	61b8      	str	r0, [r7, #24]
        break;
 8002c04:	e008      	b.n	8002c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0a:	61bb      	str	r3, [r7, #24]
        break;
 8002c0c:	e004      	b.n	8002c18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77bb      	strb	r3, [r7, #30]
        break;
 8002c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d074      	beq.n	8002d08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	005a      	lsls	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d916      	bls.n	8002c68 <UART_SetConfig+0x19c>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d212      	bcs.n	8002c68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f023 030f 	bic.w	r3, r3, #15
 8002c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	89fb      	ldrh	r3, [r7, #14]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	89fa      	ldrh	r2, [r7, #14]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	e04f      	b.n	8002d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77bb      	strb	r3, [r7, #30]
 8002c6c:	e04c      	b.n	8002d08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d828      	bhi.n	8002cc6 <UART_SetConfig+0x1fa>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <UART_SetConfig+0x1b0>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002ca1 	.word	0x08002ca1
 8002c80:	08002ca9 	.word	0x08002ca9
 8002c84:	08002cb1 	.word	0x08002cb1
 8002c88:	08002cc7 	.word	0x08002cc7
 8002c8c:	08002cb7 	.word	0x08002cb7
 8002c90:	08002cc7 	.word	0x08002cc7
 8002c94:	08002cc7 	.word	0x08002cc7
 8002c98:	08002cc7 	.word	0x08002cc7
 8002c9c:	08002cbf 	.word	0x08002cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7ff f9f4 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8002ca4:	61b8      	str	r0, [r7, #24]
        break;
 8002ca6:	e013      	b.n	8002cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca8:	f7ff fa12 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8002cac:	61b8      	str	r0, [r7, #24]
        break;
 8002cae:	e00f      	b.n	8002cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cb0:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <UART_SetConfig+0x268>)
 8002cb2:	61bb      	str	r3, [r7, #24]
        break;
 8002cb4:	e00c      	b.n	8002cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb6:	f7ff f973 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8002cba:	61b8      	str	r0, [r7, #24]
        break;
 8002cbc:	e008      	b.n	8002cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc2:	61bb      	str	r3, [r7, #24]
        break;
 8002cc4:	e004      	b.n	8002cd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8002cce:	bf00      	nop
    }

    if (pclk != 0U)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d018      	beq.n	8002d08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	085a      	lsrs	r2, r3, #1
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d909      	bls.n	8002d04 <UART_SetConfig+0x238>
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d205      	bcs.n	8002d04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e001      	b.n	8002d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	efff69f3 	.word	0xefff69f3
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40004800 	.word	0x40004800
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e36:	d10a      	bne.n	8002e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b098      	sub	sp, #96	; 0x60
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e8c:	f7fd fc6e 	bl	800076c <HAL_GetTick>
 8002e90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d12e      	bne.n	8002efe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f88c 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d021      	beq.n	8002efe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ece:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e6      	bne.n	8002eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e062      	b.n	8002fc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d149      	bne.n	8002fa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f856 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03c      	beq.n	8002fa0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	623b      	str	r3, [r7, #32]
   return(result);
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
 8002f46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e6      	bne.n	8002f26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3308      	adds	r3, #8
 8002f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f78:	61fa      	str	r2, [r7, #28]
 8002f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	e841 2300 	strex	r3, r2, [r1]
 8002f84:	617b      	str	r3, [r7, #20]
   return(result);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e5      	bne.n	8002f58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e011      	b.n	8002fc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3758      	adds	r7, #88	; 0x58
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	e049      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe4:	d045      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fd fbc1 	bl	800076c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e048      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d031      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b08      	cmp	r3, #8
 800301a:	d110      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2208      	movs	r2, #8
 8003022:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f838 	bl	800309a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2208      	movs	r2, #8
 800302e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e029      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304c:	d111      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f81e 	bl	800309a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d0a6      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309a:	b480      	push	{r7}
 800309c:	b095      	sub	sp, #84	; 0x54
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c0:	643b      	str	r3, [r7, #64]	; 0x40
 80030c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e6      	bne.n	80030a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3308      	adds	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3308      	adds	r3, #8
 80030f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e5      	bne.n	80030d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	2b01      	cmp	r3, #1
 800310e:	d118      	bne.n	8003142 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	60bb      	str	r3, [r7, #8]
   return(result);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	613b      	str	r3, [r7, #16]
   return(result);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e6      	bne.n	8003110 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003156:	bf00      	nop
 8003158:	3754      	adds	r7, #84	; 0x54
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f103 0208 	add.w	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f103 0208 	add.w	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f103 0208 	add.w	r2, r3, #8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321a:	d103      	bne.n	8003224 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e00c      	b.n	800323e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3308      	adds	r3, #8
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e002      	b.n	8003232 <vListInsert+0x2e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	d2f6      	bcs.n	800322c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6852      	ldr	r2, [r2, #4]
 8003296:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d103      	bne.n	80032aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08e      	sub	sp, #56	; 0x38
 80032ce:	af04      	add	r7, sp, #16
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032f0:	bf00      	nop
 80032f2:	e7fe      	b.n	80032f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <xTaskCreateStatic+0x46>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	61fb      	str	r3, [r7, #28]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003310:	2354      	movs	r3, #84	; 0x54
 8003312:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b54      	cmp	r3, #84	; 0x54
 8003318:	d00a      	beq.n	8003330 <xTaskCreateStatic+0x66>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	61bb      	str	r3, [r7, #24]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01e      	beq.n	8003374 <xTaskCreateStatic+0xaa>
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800334e:	2300      	movs	r3, #0
 8003350:	9303      	str	r3, [sp, #12]
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f850 	bl	800340c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800336c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800336e:	f000 f8cd 	bl	800350c <prvAddNewTaskToReadyList>
 8003372:	e001      	b.n	8003378 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003378:	697b      	ldr	r3, [r7, #20]
	}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003382:	b580      	push	{r7, lr}
 8003384:	b08c      	sub	sp, #48	; 0x30
 8003386:	af04      	add	r7, sp, #16
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fece 	bl	8004138 <pvPortMalloc>
 800339c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033a4:	2054      	movs	r0, #84	; 0x54
 80033a6:	f000 fec7 	bl	8004138 <pvPortMalloc>
 80033aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e005      	b.n	80033c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f000 ff80 	bl	80042c0 <vPortFree>
 80033c0:	e001      	b.n	80033c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f80e 	bl	800340c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033f0:	69f8      	ldr	r0, [r7, #28]
 80033f2:	f000 f88b 	bl	800350c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e002      	b.n	8003402 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003400:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003402:	69bb      	ldr	r3, [r7, #24]
	}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003424:	3b01      	subs	r3, #1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <prvInitialiseNewTask+0x48>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	617b      	str	r3, [r7, #20]
}
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	e012      	b.n	8003480 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	7819      	ldrb	r1, [r3, #0]
 8003462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	3334      	adds	r3, #52	; 0x34
 800346a:	460a      	mov	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d9e9      	bls.n	800345a <prvInitialiseNewTask+0x4e>
 8003486:	e000      	b.n	800348a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003488:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2b06      	cmp	r3, #6
 8003496:	d901      	bls.n	800349c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003498:	2306      	movs	r3, #6
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2200      	movs	r2, #0
 80034ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	3304      	adds	r3, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fe75 	bl	80031a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	3318      	adds	r3, #24
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fe70 	bl	80031a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	f1c3 0207 	rsb	r2, r3, #7
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	2200      	movs	r2, #0
 80034dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	68f9      	ldr	r1, [r7, #12]
 80034ea:	69b8      	ldr	r0, [r7, #24]
 80034ec:	f000 fc14 	bl	8003d18 <pxPortInitialiseStack>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003514:	f000 fd2e 	bl	8003f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <prvAddNewTaskToReadyList+0xb8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <prvAddNewTaskToReadyList+0xb8>)
 8003520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <prvAddNewTaskToReadyList+0xbc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800352a:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <prvAddNewTaskToReadyList+0xbc>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <prvAddNewTaskToReadyList+0xb8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d110      	bne.n	800355a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003538:	f000 fac4 	bl	8003ac4 <prvInitialiseTaskLists>
 800353c:	e00d      	b.n	800355a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <prvAddNewTaskToReadyList+0xc0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <prvAddNewTaskToReadyList+0xbc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d802      	bhi.n	800355a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003554:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <prvAddNewTaskToReadyList+0xbc>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <prvAddNewTaskToReadyList+0xc4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <prvAddNewTaskToReadyList+0xc4>)
 8003562:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2201      	movs	r2, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <prvAddNewTaskToReadyList+0xc8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <prvAddNewTaskToReadyList+0xc8>)
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <prvAddNewTaskToReadyList+0xcc>)
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f7ff fe15 	bl	80031bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003592:	f000 fd1f 	bl	8003fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <prvAddNewTaskToReadyList+0xc0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00e      	beq.n	80035bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <prvAddNewTaskToReadyList+0xbc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d207      	bcs.n	80035bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <prvAddNewTaskToReadyList+0xd0>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000458 	.word	0x20000458
 80035c8:	20000358 	.word	0x20000358
 80035cc:	20000464 	.word	0x20000464
 80035d0:	20000474 	.word	0x20000474
 80035d4:	20000460 	.word	0x20000460
 80035d8:	2000035c 	.word	0x2000035c
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d017      	beq.n	8003622 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <vTaskDelay+0x60>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <vTaskDelay+0x30>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60bb      	str	r3, [r7, #8]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003610:	f000 f87a 	bl	8003708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fb18 	bl	8003c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800361c:	f000 f882 	bl	8003724 <xTaskResumeAll>
 8003620:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <vTaskDelay+0x64>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000480 	.word	0x20000480
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003656:	463a      	mov	r2, r7
 8003658:	1d39      	adds	r1, r7, #4
 800365a:	f107 0308 	add.w	r3, r7, #8
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc fdc6 	bl	80001f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	9202      	str	r2, [sp, #8]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2300      	movs	r3, #0
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	460a      	mov	r2, r1
 8003676:	491e      	ldr	r1, [pc, #120]	; (80036f0 <vTaskStartScheduler+0xa8>)
 8003678:	481e      	ldr	r0, [pc, #120]	; (80036f4 <vTaskStartScheduler+0xac>)
 800367a:	f7ff fe26 	bl	80032ca <xTaskCreateStatic>
 800367e:	4603      	mov	r3, r0
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <vTaskStartScheduler+0xb0>)
 8003682:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <vTaskStartScheduler+0xb0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e001      	b.n	8003696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d116      	bne.n	80036ca <vTaskStartScheduler+0x82>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
}
 80036ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <vTaskStartScheduler+0xb4>)
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <vTaskStartScheduler+0xb8>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <vTaskStartScheduler+0xbc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036c4:	f000 fbb4 	bl	8003e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036c8:	e00e      	b.n	80036e8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d0:	d10a      	bne.n	80036e8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
}
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <vTaskStartScheduler+0x9e>
}
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	08004594 	.word	0x08004594
 80036f4:	08003a91 	.word	0x08003a91
 80036f8:	2000047c 	.word	0x2000047c
 80036fc:	20000478 	.word	0x20000478
 8003700:	20000464 	.word	0x20000464
 8003704:	2000045c 	.word	0x2000045c

08003708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <vTaskSuspendAll+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a03      	ldr	r2, [pc, #12]	; (8003720 <vTaskSuspendAll+0x18>)
 8003714:	6013      	str	r3, [r2, #0]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20000480 	.word	0x20000480

08003724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <xTaskResumeAll+0x114>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xTaskResumeAll+0x2c>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	603b      	str	r3, [r7, #0]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003750:	f000 fc10 	bl	8003f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003754:	4b38      	ldr	r3, [pc, #224]	; (8003838 <xTaskResumeAll+0x114>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3b01      	subs	r3, #1
 800375a:	4a37      	ldr	r2, [pc, #220]	; (8003838 <xTaskResumeAll+0x114>)
 800375c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <xTaskResumeAll+0x114>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d161      	bne.n	800382a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <xTaskResumeAll+0x118>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d05d      	beq.n	800382a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800376e:	e02e      	b.n	80037ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <xTaskResumeAll+0x11c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3318      	adds	r3, #24
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fd7a 	bl	8003276 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3304      	adds	r3, #4
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fd75 	bl	8003276 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2201      	movs	r2, #1
 8003792:	409a      	lsls	r2, r3
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <xTaskResumeAll+0x120>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4313      	orrs	r3, r2
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <xTaskResumeAll+0x120>)
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4a27      	ldr	r2, [pc, #156]	; (8003848 <xTaskResumeAll+0x124>)
 80037ac:	441a      	add	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f7ff fd01 	bl	80031bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <xTaskResumeAll+0x128>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <xTaskResumeAll+0x12c>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <xTaskResumeAll+0x11c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1cc      	bne.n	8003770 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037dc:	f000 fa10 	bl	8003c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <xTaskResumeAll+0x130>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ec:	f000 f836 	bl	800385c <xTaskIncrementTick>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <xTaskResumeAll+0x12c>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f1      	bne.n	80037ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <xTaskResumeAll+0x130>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <xTaskResumeAll+0x12c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003816:	2301      	movs	r3, #1
 8003818:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <xTaskResumeAll+0x134>)
 800381c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800382a:	f000 fbd3 	bl	8003fd4 <vPortExitCritical>

	return xAlreadyYielded;
 800382e:	68bb      	ldr	r3, [r7, #8]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000480 	.word	0x20000480
 800383c:	20000458 	.word	0x20000458
 8003840:	20000418 	.word	0x20000418
 8003844:	20000460 	.word	0x20000460
 8003848:	2000035c 	.word	0x2000035c
 800384c:	20000358 	.word	0x20000358
 8003850:	2000046c 	.word	0x2000046c
 8003854:	20000468 	.word	0x20000468
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <xTaskIncrementTick+0x150>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 808d 	bne.w	800398a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003870:	4b4f      	ldr	r3, [pc, #316]	; (80039b0 <xTaskIncrementTick+0x154>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003878:	4a4d      	ldr	r2, [pc, #308]	; (80039b0 <xTaskIncrementTick+0x154>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d120      	bne.n	80038c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <xTaskIncrementTick+0x158>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	603b      	str	r3, [r7, #0]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <xTaskIncrementTick+0x46>
 80038a4:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <xTaskIncrementTick+0x15c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4a41      	ldr	r2, [pc, #260]	; (80039b8 <xTaskIncrementTick+0x15c>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b40      	ldr	r3, [pc, #256]	; (80039bc <xTaskIncrementTick+0x160>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	4a3f      	ldr	r2, [pc, #252]	; (80039bc <xTaskIncrementTick+0x160>)
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	f000 f99d 	bl	8003c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038c6:	4b3e      	ldr	r3, [pc, #248]	; (80039c0 <xTaskIncrementTick+0x164>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d34d      	bcc.n	800396c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <xTaskIncrementTick+0x82>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <xTaskIncrementTick+0x84>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <xTaskIncrementTick+0x164>)
 80038e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ea:	601a      	str	r2, [r3, #0]
					break;
 80038ec:	e03e      	b.n	800396c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038ee:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <xTaskIncrementTick+0x158>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d203      	bcs.n	800390e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003906:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <xTaskIncrementTick+0x164>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6013      	str	r3, [r2, #0]
						break;
 800390c:	e02e      	b.n	800396c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fcaf 	bl	8003276 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3318      	adds	r3, #24
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fca6 	bl	8003276 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	2201      	movs	r2, #1
 8003930:	409a      	lsls	r2, r3
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <xTaskIncrementTick+0x168>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <xTaskIncrementTick+0x168>)
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <xTaskIncrementTick+0x16c>)
 800394a:	441a      	add	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f7ff fc32 	bl	80031bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <xTaskIncrementTick+0x170>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	429a      	cmp	r2, r3
 8003964:	d3b4      	bcc.n	80038d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800396a:	e7b1      	b.n	80038d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <xTaskIncrementTick+0x170>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003972:	4915      	ldr	r1, [pc, #84]	; (80039c8 <xTaskIncrementTick+0x16c>)
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d907      	bls.n	8003994 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003984:	2301      	movs	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e004      	b.n	8003994 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <xTaskIncrementTick+0x174>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <xTaskIncrementTick+0x174>)
 8003992:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <xTaskIncrementTick+0x178>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039a0:	697b      	ldr	r3, [r7, #20]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000480 	.word	0x20000480
 80039b0:	2000045c 	.word	0x2000045c
 80039b4:	20000410 	.word	0x20000410
 80039b8:	20000414 	.word	0x20000414
 80039bc:	20000470 	.word	0x20000470
 80039c0:	20000478 	.word	0x20000478
 80039c4:	20000460 	.word	0x20000460
 80039c8:	2000035c 	.word	0x2000035c
 80039cc:	20000358 	.word	0x20000358
 80039d0:	20000468 	.word	0x20000468
 80039d4:	2000046c 	.word	0x2000046c

080039d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <vTaskSwitchContext+0xa4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <vTaskSwitchContext+0xa8>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039ec:	e03f      	b.n	8003a6e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <vTaskSwitchContext+0xa8>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <vTaskSwitchContext+0xac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a02:	7afb      	ldrb	r3, [r7, #11]
 8003a04:	f1c3 031f 	rsb	r3, r3, #31
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	491f      	ldr	r1, [pc, #124]	; (8003a88 <vTaskSwitchContext+0xb0>)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <vTaskSwitchContext+0x5a>
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <vTaskSwitchContext+0xb0>)
 8003a40:	4413      	add	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3308      	adds	r3, #8
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d104      	bne.n	8003a64 <vTaskSwitchContext+0x8c>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <vTaskSwitchContext+0xb4>)
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000480 	.word	0x20000480
 8003a80:	2000046c 	.word	0x2000046c
 8003a84:	20000460 	.word	0x20000460
 8003a88:	2000035c 	.word	0x2000035c
 8003a8c:	20000358 	.word	0x20000358

08003a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a98:	f000 f854 	bl	8003b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <prvIdleTask+0x2c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d907      	bls.n	8003ab4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <prvIdleTask+0x30>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003ab4:	f7fc fb94 	bl	80001e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003ab8:	e7ee      	b.n	8003a98 <prvIdleTask+0x8>
 8003aba:	bf00      	nop
 8003abc:	2000035c 	.word	0x2000035c
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e00c      	b.n	8003aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <prvInitialiseTaskLists+0x60>)
 8003adc:	4413      	add	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fb3f 	bl	8003162 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d9ef      	bls.n	8003ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003af0:	480d      	ldr	r0, [pc, #52]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003af2:	f7ff fb36 	bl	8003162 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003af8:	f7ff fb33 	bl	8003162 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <prvInitialiseTaskLists+0x6c>)
 8003afe:	f7ff fb30 	bl	8003162 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <prvInitialiseTaskLists+0x70>)
 8003b04:	f7ff fb2d 	bl	8003162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <prvInitialiseTaskLists+0x74>)
 8003b0a:	f7ff fb2a 	bl	8003162 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <prvInitialiseTaskLists+0x78>)
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvInitialiseTaskLists+0x7c>)
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000035c 	.word	0x2000035c
 8003b28:	200003e8 	.word	0x200003e8
 8003b2c:	200003fc 	.word	0x200003fc
 8003b30:	20000418 	.word	0x20000418
 8003b34:	2000042c 	.word	0x2000042c
 8003b38:	20000444 	.word	0x20000444
 8003b3c:	20000410 	.word	0x20000410
 8003b40:	20000414 	.word	0x20000414

08003b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b4a:	e019      	b.n	8003b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b4c:	f000 fa12 	bl	8003f74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <prvCheckTasksWaitingTermination+0x50>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fb8a 	bl	8003276 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b76:	f000 fa2d 	bl	8003fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f810 	bl	8003ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e1      	bne.n	8003b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000042c 	.word	0x2000042c
 8003b98:	20000458 	.word	0x20000458
 8003b9c:	20000440 	.word	0x20000440

08003ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fb82 	bl	80042c0 <vPortFree>
				vPortFree( pxTCB );
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fb7f 	bl	80042c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bc2:	e018      	b.n	8003bf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d103      	bne.n	8003bd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fb76 	bl	80042c0 <vPortFree>
	}
 8003bd4:	e00f      	b.n	8003bf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d00a      	beq.n	8003bf6 <prvDeleteTCB+0x56>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60fb      	str	r3, [r7, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <prvDeleteTCB+0x54>
	}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <prvResetNextTaskUnblockTime+0x44>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <prvResetNextTaskUnblockTime+0x14>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <prvResetNextTaskUnblockTime+0x16>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <prvResetNextTaskUnblockTime+0x48>)
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c22:	e008      	b.n	8003c36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <prvResetNextTaskUnblockTime+0x44>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <prvResetNextTaskUnblockTime+0x48>)
 8003c34:	6013      	str	r3, [r2, #0]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000410 	.word	0x20000410
 8003c48:	20000478 	.word	0x20000478

08003c4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fb07 	bl	8003276 <uxListRemove>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2201      	movs	r2, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4013      	ands	r3, r2
 8003c82:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c8c:	d10a      	bne.n	8003ca4 <prvAddCurrentTaskToDelayedList+0x58>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	481a      	ldr	r0, [pc, #104]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c9e:	f7ff fa8d 	bl	80031bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ca2:	e026      	b.n	8003cf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d209      	bcs.n	8003cd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7ff fa9b 	bl	8003204 <vListInsert>
}
 8003cce:	e010      	b.n	8003cf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f7ff fa91 	bl	8003204 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d202      	bcs.n	8003cf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cec:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6013      	str	r3, [r2, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000045c 	.word	0x2000045c
 8003d00:	20000358 	.word	0x20000358
 8003d04:	20000460 	.word	0x20000460
 8003d08:	20000444 	.word	0x20000444
 8003d0c:	20000414 	.word	0x20000414
 8003d10:	20000410 	.word	0x20000410
 8003d14:	20000478 	.word	0x20000478

08003d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b04      	subs	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b04      	subs	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d48:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <pxPortInitialiseStack+0x64>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b14      	subs	r3, #20
 8003d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f06f 0202 	mvn.w	r2, #2
 8003d66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b20      	subs	r3, #32
 8003d6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	08003d81 	.word	0x08003d81

08003d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <prvTaskExitError+0x54>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d92:	d00a      	beq.n	8003daa <prvTaskExitError+0x2a>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <prvTaskExitError+0x28>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
}
 8003dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dbe:	bf00      	nop
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0fc      	beq.n	8003dc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	2000000c 	.word	0x2000000c
	...

08003de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <pxCurrentTCBConst2>)
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	f380 8809 	msr	PSP, r0
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8811 	msr	BASEPRI, r0
 8003dfa:	4770      	bx	lr
 8003dfc:	f3af 8000 	nop.w

08003e00 <pxCurrentTCBConst2>:
 8003e00:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop

08003e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <prvPortStartFirstTask+0x24>)
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	6800      	ldr	r0, [r0, #0]
 8003e0e:	f380 8808 	msr	MSP, r0
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8814 	msr	CONTROL, r0
 8003e1a:	b662      	cpsie	i
 8003e1c:	b661      	cpsie	f
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	df00      	svc	0
 8003e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e2a:	bf00      	nop
 8003e2c:	e000ed08 	.word	0xe000ed08

08003e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <xPortStartScheduler+0x120>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a46      	ldr	r2, [pc, #280]	; (8003f54 <xPortStartScheduler+0x124>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10a      	bne.n	8003e56 <xPortStartScheduler+0x26>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	613b      	str	r3, [r7, #16]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <xPortStartScheduler+0x120>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <xPortStartScheduler+0x128>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10a      	bne.n	8003e76 <xPortStartScheduler+0x46>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60fb      	str	r3, [r7, #12]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e76:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <xPortStartScheduler+0x12c>)
 8003e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <xPortStartScheduler+0x130>)
 8003e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e9e:	4b31      	ldr	r3, [pc, #196]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea4:	e009      	b.n	8003eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <xPortStartScheduler+0x134>)
 8003eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d0ef      	beq.n	8003ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ec6:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d00a      	beq.n	8003ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	60bb      	str	r3, [r7, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <xPortStartScheduler+0x134>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <xPortStartScheduler+0x134>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <xPortStartScheduler+0x134>)
 8003efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <xPortStartScheduler+0x138>)
 8003f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f1e:	f000 f8dd 	bl	80040dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <xPortStartScheduler+0x13c>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f28:	f000 f8fc 	bl	8004124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <xPortStartScheduler+0x140>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <xPortStartScheduler+0x140>)
 8003f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f38:	f7ff ff66 	bl	8003e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f3c:	f7ff fd4c 	bl	80039d8 <vTaskSwitchContext>
	prvTaskExitError();
 8003f40:	f7ff ff1e 	bl	8003d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00
 8003f54:	410fc271 	.word	0x410fc271
 8003f58:	410fc270 	.word	0x410fc270
 8003f5c:	e000e400 	.word	0xe000e400
 8003f60:	20000484 	.word	0x20000484
 8003f64:	20000488 	.word	0x20000488
 8003f68:	e000ed20 	.word	0xe000ed20
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	e000ef34 	.word	0xe000ef34

08003f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	607b      	str	r3, [r7, #4]
}
 8003f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <vPortEnterCritical+0x58>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10f      	bne.n	8003fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <vPortEnterCritical+0x5c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	603b      	str	r3, [r7, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vPortEnterCritical+0x4a>
	}
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <vPortExitCritical+0x50>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <vPortExitCritical+0x24>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	607b      	str	r3, [r7, #4]
}
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <vPortExitCritical+0x50>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <vPortExitCritical+0x50>)
 8004000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <vPortExitCritical+0x50>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <vPortExitCritical+0x42>
 800400a:	2300      	movs	r3, #0
 800400c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
	...

08004030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004030:	f3ef 8009 	mrs	r0, PSP
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <pxCurrentTCBConst>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f01e 0f10 	tst.w	lr, #16
 8004040:	bf08      	it	eq
 8004042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404a:	6010      	str	r0, [r2, #0]
 800404c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004054:	f380 8811 	msr	BASEPRI, r0
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f7ff fcba 	bl	80039d8 <vTaskSwitchContext>
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f380 8811 	msr	BASEPRI, r0
 800406c:	bc09      	pop	{r0, r3}
 800406e:	6819      	ldr	r1, [r3, #0]
 8004070:	6808      	ldr	r0, [r1, #0]
 8004072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004076:	f01e 0f10 	tst.w	lr, #16
 800407a:	bf08      	it	eq
 800407c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004080:	f380 8809 	msr	PSP, r0
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst>:
 8004090:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	607b      	str	r3, [r7, #4]
}
 80040b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040b2:	f7ff fbd3 	bl	800385c <xTaskIncrementTick>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <SysTick_Handler+0x40>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f383 8811 	msr	BASEPRI, r3
}
 80040ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortSetupTimerInterrupt+0x38>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <vPortSetupTimerInterrupt+0x3c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <vPortSetupTimerInterrupt+0x40>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <vPortSetupTimerInterrupt+0x44>)
 80040fa:	3b01      	subs	r3, #1
 80040fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <vPortSetupTimerInterrupt+0x34>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010
 8004114:	e000e018 	.word	0xe000e018
 8004118:	20000000 	.word	0x20000000
 800411c:	10624dd3 	.word	0x10624dd3
 8004120:	e000e014 	.word	0xe000e014

08004124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004134 <vPortEnableVFP+0x10>
 8004128:	6801      	ldr	r1, [r0, #0]
 800412a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800412e:	6001      	str	r1, [r0, #0]
 8004130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004132:	bf00      	nop
 8004134:	e000ed88 	.word	0xe000ed88

08004138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004144:	f7ff fae0 	bl	8003708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <pvPortMalloc+0x174>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004150:	f000 f910 	bl	8004374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004154:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <pvPortMalloc+0x178>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 808e 	bne.w	800427e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01d      	beq.n	80041a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004168:	2208      	movs	r2, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b00      	cmp	r3, #0
 8004178:	d014      	beq.n	80041a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f023 0307 	bic.w	r3, r3, #7
 8004180:	3308      	adds	r3, #8
 8004182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <pvPortMalloc+0x6c>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	617b      	str	r3, [r7, #20]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d069      	beq.n	800427e <pvPortMalloc+0x146>
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <pvPortMalloc+0x17c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d864      	bhi.n	800427e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041b4:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <pvPortMalloc+0x180>)
 80041b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041b8:	4b3f      	ldr	r3, [pc, #252]	; (80042b8 <pvPortMalloc+0x180>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041be:	e004      	b.n	80041ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d903      	bls.n	80041dc <pvPortMalloc+0xa4>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f1      	bne.n	80041c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041dc:	4b33      	ldr	r3, [pc, #204]	; (80042ac <pvPortMalloc+0x174>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d04b      	beq.n	800427e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2208      	movs	r2, #8
 80041ec:	4413      	add	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	2308      	movs	r3, #8
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d91f      	bls.n	8004248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <pvPortMalloc+0xf8>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	613b      	str	r3, [r7, #16]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004242:	69b8      	ldr	r0, [r7, #24]
 8004244:	f000 f8f8 	bl	8004438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <pvPortMalloc+0x17c>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <pvPortMalloc+0x17c>)
 8004254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <pvPortMalloc+0x17c>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <pvPortMalloc+0x184>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d203      	bcs.n	800426a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <pvPortMalloc+0x17c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <pvPortMalloc+0x184>)
 8004268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <pvPortMalloc+0x178>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	431a      	orrs	r2, r3
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800427e:	f7ff fa51 	bl	8003724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <pvPortMalloc+0x16a>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <pvPortMalloc+0x168>
	return pvReturn;
 80042a2:	69fb      	ldr	r3, [r7, #28]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	; 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20001094 	.word	0x20001094
 80042b0:	200010a0 	.word	0x200010a0
 80042b4:	20001098 	.word	0x20001098
 80042b8:	2000108c 	.word	0x2000108c
 80042bc:	2000109c 	.word	0x2000109c

080042c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d048      	beq.n	8004364 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042d2:	2308      	movs	r3, #8
 80042d4:	425b      	negs	r3, r3
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <vPortFree+0xac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <vPortFree+0x44>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60fb      	str	r3, [r7, #12]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <vPortFree+0x62>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60bb      	str	r3, [r7, #8]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <vPortFree+0xac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d115      	bne.n	8004364 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <vPortFree+0xac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004348:	f7ff f9de 	bl	8003708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <vPortFree+0xb0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4413      	add	r3, r2
 8004356:	4a06      	ldr	r2, [pc, #24]	; (8004370 <vPortFree+0xb0>)
 8004358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800435a:	6938      	ldr	r0, [r7, #16]
 800435c:	f000 f86c 	bl	8004438 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004360:	f7ff f9e0 	bl	8003724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	200010a0 	.word	0x200010a0
 8004370:	20001098 	.word	0x20001098

08004374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800437a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800437e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <prvHeapInit+0xac>)
 8004382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3307      	adds	r3, #7
 8004392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <prvHeapInit+0xac>)
 80043a4:	4413      	add	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <prvHeapInit+0xb0>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043b2:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <prvHeapInit+0xb0>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	4413      	add	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043c0:	2208      	movs	r2, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <prvHeapInit+0xb4>)
 80043d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <prvHeapInit+0xb4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <prvHeapInit+0xb4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <prvHeapInit+0xb4>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <prvHeapInit+0xb8>)
 8004402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <prvHeapInit+0xbc>)
 800440a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <prvHeapInit+0xc0>)
 800440e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2000048c 	.word	0x2000048c
 8004424:	2000108c 	.word	0x2000108c
 8004428:	20001094 	.word	0x20001094
 800442c:	2000109c 	.word	0x2000109c
 8004430:	20001098 	.word	0x20001098
 8004434:	200010a0 	.word	0x200010a0

08004438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <prvInsertBlockIntoFreeList+0xac>)
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e002      	b.n	800444c <prvInsertBlockIntoFreeList+0x14>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d8f7      	bhi.n	8004446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d108      	bne.n	800447a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d118      	bne.n	80044c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d00d      	beq.n	80044b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e008      	b.n	80044c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvInsertBlockIntoFreeList+0xb0>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e003      	b.n	80044c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d002      	beq.n	80044d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000108c 	.word	0x2000108c
 80044e8:	20001094 	.word	0x20001094

080044ec <memset>:
 80044ec:	4402      	add	r2, r0
 80044ee:	4603      	mov	r3, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4d0d      	ldr	r5, [pc, #52]	; (8004534 <__libc_init_array+0x38>)
 8004500:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004502:	1b64      	subs	r4, r4, r5
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	2600      	movs	r6, #0
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	4d0b      	ldr	r5, [pc, #44]	; (800453c <__libc_init_array+0x40>)
 800450e:	4c0c      	ldr	r4, [pc, #48]	; (8004540 <__libc_init_array+0x44>)
 8004510:	f000 f818 	bl	8004544 <_init>
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	2600      	movs	r6, #0
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	080045d4 	.word	0x080045d4
 8004538:	080045d4 	.word	0x080045d4
 800453c:	080045d4 	.word	0x080045d4
 8004540:	080045d8 	.word	0x080045d8

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

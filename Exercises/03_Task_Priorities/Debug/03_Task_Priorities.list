
03_Task_Priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004a68  08004a68  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a68  08004a68  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00001224  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001284  20001284  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000117af  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002796  00000000  00000000  00031882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee8  00000000  00000000  00034018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba1  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021912  00000000  00000000  00035aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012535  00000000  00000000  000573b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca36a  00000000  00000000  000698e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004038  00000000  00000000  00133c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00137c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004954 	.word	0x08004954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004954 	.word	0x08004954

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000007c 	.word	0x2000007c
 8000210:	2000011c 	.word	0x2000011c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fb67 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f85b 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f8e3 	bl	80003ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000226:	f000 f8b1 	bl	800038c <MX_USART1_UART_Init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1_Handler, "Task-1", 60, NULL, 4, NULL);
 800022a:	2300      	movs	r3, #0
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2304      	movs	r3, #4
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2300      	movs	r3, #0
 8000234:	223c      	movs	r2, #60	; 0x3c
 8000236:	491c      	ldr	r1, [pc, #112]	; (80002a8 <main+0x94>)
 8000238:	481c      	ldr	r0, [pc, #112]	; (80002ac <main+0x98>)
 800023a:	f003 f9d6 	bl	80035ea <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task-2", 60, NULL, 4, NULL);
 800023e:	2300      	movs	r3, #0
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	2304      	movs	r3, #4
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2300      	movs	r3, #0
 8000248:	223c      	movs	r2, #60	; 0x3c
 800024a:	4919      	ldr	r1, [pc, #100]	; (80002b0 <main+0x9c>)
 800024c:	4819      	ldr	r0, [pc, #100]	; (80002b4 <main+0xa0>)
 800024e:	f003 f9cc 	bl	80035ea <xTaskCreate>
  xTaskCreate(Task3_Handler, "Task-3", 60, NULL, 4, NULL);
 8000252:	2300      	movs	r3, #0
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	2304      	movs	r3, #4
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2300      	movs	r3, #0
 800025c:	223c      	movs	r2, #60	; 0x3c
 800025e:	4916      	ldr	r1, [pc, #88]	; (80002b8 <main+0xa4>)
 8000260:	4816      	ldr	r0, [pc, #88]	; (80002bc <main+0xa8>)
 8000262:	f003 f9c2 	bl	80035ea <xTaskCreate>
  xTaskCreate(Task4_Handler, "Task-4", 60, NULL, 4, NULL);
 8000266:	2300      	movs	r3, #0
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	2304      	movs	r3, #4
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2300      	movs	r3, #0
 8000270:	223c      	movs	r2, #60	; 0x3c
 8000272:	4913      	ldr	r1, [pc, #76]	; (80002c0 <main+0xac>)
 8000274:	4813      	ldr	r0, [pc, #76]	; (80002c4 <main+0xb0>)
 8000276:	f003 f9b8 	bl	80035ea <xTaskCreate>
  xTaskCreate(Task5_Handler, "Task-5", 60, NULL, 4, NULL);
 800027a:	2300      	movs	r3, #0
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2304      	movs	r3, #4
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	223c      	movs	r2, #60	; 0x3c
 8000286:	4910      	ldr	r1, [pc, #64]	; (80002c8 <main+0xb4>)
 8000288:	4810      	ldr	r0, [pc, #64]	; (80002cc <main+0xb8>)
 800028a:	f003 f9ae 	bl	80035ea <xTaskCreate>
  xTaskCreate(Task6_Handler, "Task-6", 60, NULL, 4, NULL);
 800028e:	2300      	movs	r3, #0
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	2304      	movs	r3, #4
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2300      	movs	r3, #0
 8000298:	223c      	movs	r2, #60	; 0x3c
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <main+0xbc>)
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <main+0xc0>)
 800029e:	f003 f9a4 	bl	80035ea <xTaskCreate>
  vTaskStartScheduler();
 80002a2:	f003 fb1b 	bl	80038dc <vTaskStartScheduler>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <main+0x92>
 80002a8:	0800496c 	.word	0x0800496c
 80002ac:	08000499 	.word	0x08000499
 80002b0:	08004974 	.word	0x08004974
 80002b4:	080004d9 	.word	0x080004d9
 80002b8:	0800497c 	.word	0x0800497c
 80002bc:	08000519 	.word	0x08000519
 80002c0:	08004984 	.word	0x08004984
 80002c4:	08000559 	.word	0x08000559
 80002c8:	0800498c 	.word	0x0800498c
 80002cc:	08000599 	.word	0x08000599
 80002d0:	08004994 	.word	0x08004994
 80002d4:	080005cd 	.word	0x080005cd

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	; 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f004 fa58 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 031c 	add.w	r3, r7, #28
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]
 800030a:	615a      	str	r2, [r3, #20]
 800030c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	2300      	movs	r3, #0
 8000320:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000322:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fdb1 	bl	8000e94 <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000338:	f000 f988 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000340:	2302      	movs	r3, #2
 8000342:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	2101      	movs	r1, #1
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fdd9 	bl	8001f10 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000364:	f000 f972 	bl	800064c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000368:	2301      	movs	r3, #1
 800036a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	463b      	mov	r3, r7
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f834 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800037e:	f000 f965 	bl	800064c <Error_Handler>
  }
}
 8000382:	bf00      	nop
 8000384:	3758      	adds	r7, #88	; 0x58
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
	...

0800038c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 8000392:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <MX_USART1_UART_Init+0x5c>)
 8000394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_USART1_UART_Init+0x58>)
 80003d0:	f002 fbd8 	bl	8002b84 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003da:	f000 f937 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000031c 	.word	0x2000031c
 80003e8:	40013800 	.word	0x40013800

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <MX_GPIO_Init+0xa4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a22      	ldr	r2, [pc, #136]	; (8000490 <MX_GPIO_Init+0xa4>)
 8000408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_GPIO_Init+0xa4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_GPIO_Init+0xa4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_GPIO_Init+0xa4>)
 8000420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_GPIO_Init+0xa4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, blue_Pin|red_Pin|orange_Pin|green_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000438:	4816      	ldr	r0, [pc, #88]	; (8000494 <MX_GPIO_Init+0xa8>)
 800043a:	f000 fce1 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800043e:	2301      	movs	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000442:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	4619      	mov	r1, r3
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f000 fb61 	bl	8000b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_Pin red_Pin orange_Pin green_Pin */
  GPIO_InitStruct.Pin = blue_Pin|red_Pin|orange_Pin|green_Pin;
 800045a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4619      	mov	r1, r3
 8000472:	4808      	ldr	r0, [pc, #32]	; (8000494 <MX_GPIO_Init+0xa8>)
 8000474:	f000 fb52 	bl	8000b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2105      	movs	r1, #5
 800047c:	2006      	movs	r0, #6
 800047e:	f000 fb23 	bl	8000ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000482:	2006      	movs	r0, #6
 8000484:	f000 fb3c 	bl	8000b00 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000400 	.word	0x48000400

08000498 <Task1_Handler>:
        }

    }
}
void Task1_Handler(void *param)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	char *str="Task1: running\r\n";
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <Task1_Handler+0x34>)
 80004a2:	60fb      	str	r3, [r7, #12]
    while(1)
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80004a4:	68f8      	ldr	r0, [r7, #12]
 80004a6:	f7ff fe93 	bl	80001d0 <strlen>
 80004aa:	4603      	mov	r3, r0
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004b2:	68f9      	ldr	r1, [r7, #12]
 80004b4:	4806      	ldr	r0, [pc, #24]	; (80004d0 <Task1_Handler+0x38>)
 80004b6:	f002 fbb3 	bl	8002c20 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
 80004ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <Task1_Handler+0x3c>)
 80004c0:	f000 fcb6 	bl	8000e30 <HAL_GPIO_TogglePin>
        vTaskDelay(1);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f003 f9d5 	bl	8003874 <vTaskDelay>
        HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80004ca:	e7eb      	b.n	80004a4 <Task1_Handler+0xc>
 80004cc:	080049b0 	.word	0x080049b0
 80004d0:	2000031c 	.word	0x2000031c
 80004d4:	48000400 	.word	0x48000400

080004d8 <Task2_Handler>:
    }
}

void Task2_Handler(void *param)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	char *str="Task2: running\r\n";
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <Task2_Handler+0x34>)
 80004e2:	60fb      	str	r3, [r7, #12]
    while(1)
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80004e4:	68f8      	ldr	r0, [r7, #12]
 80004e6:	f7ff fe73 	bl	80001d0 <strlen>
 80004ea:	4603      	mov	r3, r0
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f2:	68f9      	ldr	r1, [r7, #12]
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <Task2_Handler+0x38>)
 80004f6:	f002 fb93 	bl	8002c20 <HAL_UART_Transmit>
    	HAL_GPIO_TogglePin(orange_GPIO_Port, orange_Pin);
 80004fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <Task2_Handler+0x3c>)
 8000500:	f000 fc96 	bl	8000e30 <HAL_GPIO_TogglePin>
        vTaskDelay(1);
 8000504:	2001      	movs	r0, #1
 8000506:	f003 f9b5 	bl	8003874 <vTaskDelay>
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800050a:	e7eb      	b.n	80004e4 <Task2_Handler+0xc>
 800050c:	080049c4 	.word	0x080049c4
 8000510:	2000031c 	.word	0x2000031c
 8000514:	48000400 	.word	0x48000400

08000518 <Task3_Handler>:
    }
}
void Task3_Handler(void *param)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	char *str="Task3: running\r\n";
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <Task3_Handler+0x34>)
 8000522:	60fb      	str	r3, [r7, #12]
    while(1)
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f7ff fe53 	bl	80001d0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000532:	68f9      	ldr	r1, [r7, #12]
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <Task3_Handler+0x38>)
 8000536:	f002 fb73 	bl	8002c20 <HAL_UART_Transmit>
    	HAL_GPIO_TogglePin(red_GPIO_Port, red_Pin);
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <Task3_Handler+0x3c>)
 800053e:	f000 fc77 	bl	8000e30 <HAL_GPIO_TogglePin>
        vTaskDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f003 f996 	bl	8003874 <vTaskDelay>
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000548:	e7ec      	b.n	8000524 <Task3_Handler+0xc>
 800054a:	bf00      	nop
 800054c:	080049d8 	.word	0x080049d8
 8000550:	2000031c 	.word	0x2000031c
 8000554:	48000400 	.word	0x48000400

08000558 <Task4_Handler>:
    }
}
void Task4_Handler(void *param)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	char *str="Task4: running\r\n";
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <Task4_Handler+0x34>)
 8000562:	60fb      	str	r3, [r7, #12]
    while(1)
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f7ff fe33 	bl	80001d0 <strlen>
 800056a:	4603      	mov	r3, r0
 800056c:	b29a      	uxth	r2, r3
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <Task4_Handler+0x38>)
 8000576:	f002 fb53 	bl	8002c20 <HAL_UART_Transmit>
    	HAL_GPIO_TogglePin(blue_GPIO_Port, blue_Pin);
 800057a:	2140      	movs	r1, #64	; 0x40
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <Task4_Handler+0x3c>)
 800057e:	f000 fc57 	bl	8000e30 <HAL_GPIO_TogglePin>
        vTaskDelay(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f003 f976 	bl	8003874 <vTaskDelay>
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000588:	e7ec      	b.n	8000564 <Task4_Handler+0xc>
 800058a:	bf00      	nop
 800058c:	080049ec 	.word	0x080049ec
 8000590:	2000031c 	.word	0x2000031c
 8000594:	48000400 	.word	0x48000400

08000598 <Task5_Handler>:
    }
}
void Task5_Handler(void *param)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char *str="Task5: running\r\n";
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <Task5_Handler+0x2c>)
 80005a2:	60fb      	str	r3, [r7, #12]
    while(1)
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005a4:	68f8      	ldr	r0, [r7, #12]
 80005a6:	f7ff fe13 	bl	80001d0 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b2:	68f9      	ldr	r1, [r7, #12]
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <Task5_Handler+0x30>)
 80005b6:	f002 fb33 	bl	8002c20 <HAL_UART_Transmit>
        vTaskDelay(1);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f003 f95a 	bl	8003874 <vTaskDelay>
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005c0:	e7f0      	b.n	80005a4 <Task5_Handler+0xc>
 80005c2:	bf00      	nop
 80005c4:	08004a00 	.word	0x08004a00
 80005c8:	2000031c 	.word	0x2000031c

080005cc <Task6_Handler>:
    }
}
void Task6_Handler(void *param)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	char *str="Task6: running\r\n";
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Task6_Handler+0x2c>)
 80005d6:	60fb      	str	r3, [r7, #12]
    while(1)
    {
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005d8:	68f8      	ldr	r0, [r7, #12]
 80005da:	f7ff fdf9 	bl	80001d0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <Task6_Handler+0x30>)
 80005ea:	f002 fb19 	bl	8002c20 <HAL_UART_Transmit>
        vTaskDelay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f003 f940 	bl	8003874 <vTaskDelay>
    	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005f4:	e7f0      	b.n	80005d8 <Task6_Handler+0xc>
 80005f6:	bf00      	nop
 80005f8:	08004a14 	.word	0x08004a14
 80005fc:	2000031c 	.word	0x2000031c

08000600 <HAL_GPIO_EXTI_Callback>:
    }
}
/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == button_Pin)
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x16>
      button_sleep=1;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <HAL_GPIO_EXTI_Callback+0x24>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]


}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	200003a4 	.word	0x200003a4

08000628 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063a:	f000 f96d 	bl	8000918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40001000 	.word	0x40001000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_MspInit+0x4c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <HAL_MspInit+0x4c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_MspInit+0x4c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_MspInit+0x4c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_MspInit+0x4c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	210f      	movs	r1, #15
 8000692:	f06f 0001 	mvn.w	r0, #1
 8000696:	f000 fa17 	bl	8000ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a18      	ldr	r2, [pc, #96]	; (8000728 <HAL_UART_MspInit+0x80>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d129      	bne.n	800071e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_UART_MspInit+0x84>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_UART_MspInit+0x84>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_UART_MspInit+0x84>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_UART_MspInit+0x84>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <HAL_UART_MspInit+0x84>)
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_UART_MspInit+0x84>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800070c:	2307      	movs	r3, #7
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f000 f9ff 	bl	8000b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40013800 	.word	0x40013800
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000740:	4b33      	ldr	r3, [pc, #204]	; (8000810 <HAL_InitTick+0xe0>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a32      	ldr	r2, [pc, #200]	; (8000810 <HAL_InitTick+0xe0>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	61d3      	str	r3, [r2, #28]
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <HAL_InitTick+0xe0>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000758:	f107 0210 	add.w	r2, r7, #16
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fe0a 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000768:	6a3b      	ldr	r3, [r7, #32]
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000772:	f001 fdbf 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8000776:	6378      	str	r0, [r7, #52]	; 0x34
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800077a:	f001 fdbb 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 800077e:	4603      	mov	r3, r0
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <HAL_InitTick+0xe4>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0c9b      	lsrs	r3, r3, #18
 800078e:	3b01      	subs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_InitTick+0xe8>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <HAL_InitTick+0xec>)
 8000796:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_InitTick+0xe8>)
 800079a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <HAL_InitTick+0xe8>)
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_InitTick+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_InitTick+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_InitTick+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007b8:	4817      	ldr	r0, [pc, #92]	; (8000818 <HAL_InitTick+0xe8>)
 80007ba:	f001 ff47 	bl	800264c <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11b      	bne.n	8000804 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007cc:	4812      	ldr	r0, [pc, #72]	; (8000818 <HAL_InitTick+0xe8>)
 80007ce:	f001 ff9f 	bl	8002710 <HAL_TIM_Base_Start_IT>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d111      	bne.n	8000804 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80007e0:	2036      	movs	r0, #54	; 0x36
 80007e2:	f000 f98d 	bl	8000b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d808      	bhi.n	80007fe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	2036      	movs	r0, #54	; 0x36
 80007f2:	f000 f969 	bl	8000ac8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_InitTick+0xf0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e002      	b.n	8000804 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000808:	4618      	mov	r0, r3
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	431bde83 	.word	0x431bde83
 8000818:	200003a8 	.word	0x200003a8
 800081c:	40001000 	.word	0x40001000
 8000820:	20000004 	.word	0x20000004

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000854:	2001      	movs	r0, #1
 8000856:	f000 fb05 	bl	8000e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <TIM6_DAC1_IRQHandler+0x10>)
 8000866:	f001 ffaf 	bl	80027c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200003a8 	.word	0x200003a8

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f003 ffc7 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ca:	f7ff fca3 	bl	8000214 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008dc:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 80008e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008e4:	20001284 	.word	0x20001284

080008e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_2_IRQHandler>
	...

080008ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x28>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f8d8 	bl	8000ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff14 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff fea6 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	200003f4 	.word	0x200003f4

08000940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;  
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200003f4 	.word	0x200003f4

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <__NVIC_EnableIRQ+0x38>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	; (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	; (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	; 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff4c 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ada:	f7ff ff61 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ade:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	6978      	ldr	r0, [r7, #20]
 8000ae6:	f7ff ffb1 	bl	8000a4c <NVIC_EncodePriority>
 8000aea:	4602      	mov	r2, r0
 8000aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ff80 	bl	80009f8 <__NVIC_SetPriority>
}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff54 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e14e      	b.n	8000dca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8140 	beq.w	8000dc4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d005      	beq.n	8000b5c <HAL_GPIO_Init+0x40>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d130      	bne.n	8000bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b92:	2201      	movs	r2, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	f003 0201 	and.w	r2, r3, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d017      	beq.n	8000bfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d123      	bne.n	8000c4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	08da      	lsrs	r2, r3, #3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3208      	adds	r2, #8
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	220f      	movs	r2, #15
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	6939      	ldr	r1, [r7, #16]
 8000c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0203 	and.w	r2, r3, #3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 809a 	beq.w	8000dc4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c90:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <HAL_GPIO_Init+0x2cc>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <HAL_GPIO_Init+0x2cc>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <HAL_GPIO_Init+0x2cc>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ca8:	4a50      	ldr	r2, [pc, #320]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd2:	d013      	beq.n	8000cfc <HAL_GPIO_Init+0x1e0>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <HAL_GPIO_Init+0x2d4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d00d      	beq.n	8000cf8 <HAL_GPIO_Init+0x1dc>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a45      	ldr	r2, [pc, #276]	; (8000df4 <HAL_GPIO_Init+0x2d8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d007      	beq.n	8000cf4 <HAL_GPIO_Init+0x1d8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <HAL_GPIO_Init+0x2dc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d101      	bne.n	8000cf0 <HAL_GPIO_Init+0x1d4>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1e2>
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	e004      	b.n	8000cfe <HAL_GPIO_Init+0x1e2>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0x1e2>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_GPIO_Init+0x1e2>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	f002 0203 	and.w	r2, r2, #3
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d0e:	4937      	ldr	r1, [pc, #220]	; (8000dec <HAL_GPIO_Init+0x2d0>)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d6a:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <HAL_GPIO_Init+0x2e0>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f aea9 	bne.w	8000b2c <HAL_GPIO_Init+0x10>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48000c00 	.word	0x48000c00
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e1e:	887a      	ldrh	r2, [r7, #2]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	041a      	lsls	r2, r3, #16
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43d9      	mvns	r1, r3
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	400b      	ands	r3, r1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fbbc 	bl	8000600 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f001 b823 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 817d 	beq.w	80011ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ed0:	4bbc      	ldr	r3, [pc, #752]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d00c      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000edc:	4bb9      	ldr	r3, [pc, #740]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d15c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x10e>
 8000ee8:	4bb6      	ldr	r3, [pc, #728]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d155      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x10e>
 8000ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <HAL_RCC_OscConfig+0x94>
 8000f22:	4ba8      	ldr	r3, [pc, #672]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e015      	b.n	8000f54 <HAL_RCC_OscConfig+0xc0>
 8000f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f50:	4b9c      	ldr	r3, [pc, #624]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f60:	fa92 f2a2 	rbit	r2, r2
 8000f64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f6c:	fab2 f282 	clz	r2, r2
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f042 0220 	orr.w	r2, r2, #32
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	f002 021f 	and.w	r2, r2, #31
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 811f 	beq.w	80011c8 <HAL_RCC_OscConfig+0x334>
 8000f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 8116 	bne.w	80011c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f000 bfaf 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb2:	d106      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x12e>
 8000fb4:	4b83      	ldr	r3, [pc, #524]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a82      	ldr	r2, [pc, #520]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e036      	b.n	8001030 <HAL_RCC_OscConfig+0x19c>
 8000fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x158>
 8000fd2:	4b7c      	ldr	r3, [pc, #496]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7b      	ldr	r2, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b79      	ldr	r3, [pc, #484]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a78      	ldr	r2, [pc, #480]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e021      	b.n	8001030 <HAL_RCC_OscConfig+0x19c>
 8000fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x184>
 8000ffe:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a70      	ldr	r2, [pc, #448]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6d      	ldr	r2, [pc, #436]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0x19c>
 8001018:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a69      	ldr	r2, [pc, #420]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b67      	ldr	r3, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a66      	ldr	r2, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001030:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	f023 020f 	bic.w	r2, r3, #15
 8001038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	495f      	ldr	r1, [pc, #380]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 8001046:	4313      	orrs	r3, r2
 8001048:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d059      	beq.n	800110e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff fc71 	bl	8000940 <HAL_GetTick>
 800105e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	e00a      	b.n	800107a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fc6c 	bl	8000940 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b64      	cmp	r3, #100	; 0x64
 8001072:	d902      	bls.n	800107a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	f000 bf43 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 800107a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800108e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x218>
 80010a6:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	e015      	b.n	80010d8 <HAL_RCC_OscConfig+0x244>
 80010ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010e4:	fa92 f2a2 	rbit	r2, r2
 80010e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f002 021f 	and.w	r2, r2, #31
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ab      	beq.n	8001064 <HAL_RCC_OscConfig+0x1d0>
 800110c:	e05d      	b.n	80011ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fc17 	bl	8000940 <HAL_GetTick>
 8001112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e00a      	b.n	800112e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc12 	bl	8000940 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	; 0x64
 8001126:	d902      	bls.n	800112e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	f000 bee9 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 800112e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001132:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001142:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d102      	bne.n	8001160 <HAL_RCC_OscConfig+0x2cc>
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e015      	b.n	800118c <HAL_RCC_OscConfig+0x2f8>
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001178:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800117c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_RCC_OscConfig+0x330>)
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001190:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001194:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f002 021f 	and.w	r2, r2, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ab      	bne.n	8001118 <HAL_RCC_OscConfig+0x284>
 80011c0:	e003      	b.n	80011ca <HAL_RCC_OscConfig+0x336>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 817d 	beq.w	80014da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011e0:	4ba6      	ldr	r3, [pc, #664]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011ec:	4ba3      	ldr	r3, [pc, #652]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d172      	bne.n	80012de <HAL_RCC_OscConfig+0x44a>
 80011f8:	4ba0      	ldr	r3, [pc, #640]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d16c      	bne.n	80012de <HAL_RCC_OscConfig+0x44a>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001216:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x3a0>
 800122e:	4b93      	ldr	r3, [pc, #588]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0x3c8>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800124c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	2202      	movs	r2, #2
 800125e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001262:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001266:	fa92 f2a2 	rbit	r2, r2
 800126a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800126e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f042 0220 	orr.w	r2, r2, #32
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f002 021f 	and.w	r2, r2, #31
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00a      	beq.n	80012a4 <HAL_RCC_OscConfig+0x410>
 800128e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d002      	beq.n	80012a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 be2e 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b75      	ldr	r3, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	21f8      	movs	r1, #248	; 0xf8
 80012ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012c2:	fa91 f1a1 	rbit	r1, r1
 80012c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012ce:	fab1 f181 	clz	r1, r1
 80012d2:	b2c9      	uxtb	r1, r1
 80012d4:	408b      	lsls	r3, r1
 80012d6:	4969      	ldr	r1, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012dc:	e0fd      	b.n	80014da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8088 	beq.w	8001400 <HAL_RCC_OscConfig+0x56c>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001302:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	461a      	mov	r2, r3
 8001318:	2301      	movs	r3, #1
 800131a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb10 	bl	8000940 <HAL_GetTick>
 8001320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fb0b 	bl	8000940 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d902      	bls.n	800133c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	f000 bde2 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800134e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x4d8>
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x500>
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001384:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2202      	movs	r2, #2
 8001396:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800139a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800139e:	fa92 f2a2 	rbit	r2, r2
 80013a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013aa:	fab2 f282 	clz	r2, r2
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f042 0220 	orr.w	r2, r2, #32
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f002 021f 	and.w	r2, r2, #31
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0af      	beq.n	8001326 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	21f8      	movs	r1, #248	; 0xf8
 80013dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013e4:	fa91 f1a1 	rbit	r1, r1
 80013e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013f0:	fab1 f181 	clz	r1, r1
 80013f4:	b2c9      	uxtb	r1, r1
 80013f6:	408b      	lsls	r3, r1
 80013f8:	4920      	ldr	r1, [pc, #128]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
 80013fe:	e06c      	b.n	80014da <HAL_RCC_OscConfig+0x646>
 8001400:	2301      	movs	r3, #1
 8001402:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001420:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	461a      	mov	r2, r3
 8001428:	2300      	movs	r3, #0
 800142a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa88 	bl	8000940 <HAL_GetTick>
 8001430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fa83 	bl	8000940 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d902      	bls.n	800144c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	f000 bd5a 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800145e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	095b      	lsrs	r3, r3, #5
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <HAL_RCC_OscConfig+0x5ec>
 8001476:	4b01      	ldr	r3, [pc, #4]	; (800147c <HAL_RCC_OscConfig+0x5e8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	e015      	b.n	80014a8 <HAL_RCC_OscConfig+0x614>
 800147c:	40021000 	.word	0x40021000
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001498:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014a4:	4bc8      	ldr	r3, [pc, #800]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2202      	movs	r2, #2
 80014aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014b2:	fa92 f2a2 	rbit	r2, r2
 80014b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014be:	fab2 f282 	clz	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f002 021f 	and.w	r2, r2, #31
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ad      	bne.n	8001436 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8110 	beq.w	8001710 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d079      	beq.n	80015f4 <HAL_RCC_OscConfig+0x760>
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	461a      	mov	r2, r3
 800151e:	4bab      	ldr	r3, [pc, #684]	; (80017cc <HAL_RCC_OscConfig+0x938>)
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	461a      	mov	r2, r3
 8001526:	2301      	movs	r3, #1
 8001528:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fa09 	bl	8000940 <HAL_GetTick>
 800152e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fa04 	bl	8000940 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d902      	bls.n	800154a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	f000 bcdb 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001554:	fa93 f3a3 	rbit	r3, r3
 8001558:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 80015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015b0:	2102      	movs	r1, #2
 80015b2:	6019      	str	r1, [r3, #0]
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f1a3 	rbit	r1, r3
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ca:	6019      	str	r1, [r3, #0]
  return result;
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0a0      	beq.n	8001534 <HAL_RCC_OscConfig+0x6a0>
 80015f2:	e08d      	b.n	8001710 <HAL_RCC_OscConfig+0x87c>
 80015f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	fa93 f2a3 	rbit	r2, r3
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001616:	601a      	str	r2, [r3, #0]
  return result;
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001620:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x938>)
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	461a      	mov	r2, r3
 8001632:	2300      	movs	r3, #0
 8001634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f983 	bl	8000940 <HAL_GetTick>
 800163a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f97e 	bl	8000940 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d902      	bls.n	8001656 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 bc55 	b.w	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800165e:	2202      	movs	r2, #2
 8001660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001682:	2202      	movs	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016a6:	2202      	movs	r2, #2
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	fa93 f2a3 	rbit	r2, r3
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 80016c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ce:	2102      	movs	r1, #2
 80016d0:	6019      	str	r1, [r3, #0]
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f1a3 	rbit	r1, r3
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016e8:	6019      	str	r1, [r3, #0]
  return result;
 80016ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d197      	bne.n	8001640 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 81a1 	beq.w	8001a68 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d116      	bne.n	8001766 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 800173e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001742:	61d3      	str	r3, [r2, #28]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800175e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_RCC_OscConfig+0x93c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_RCC_OscConfig+0x93c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <HAL_RCC_OscConfig+0x93c>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff f8df 	bl	8000940 <HAL_GetTick>
 8001782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	e009      	b.n	800179c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff f8da 	bl	8000940 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e3b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x93c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ef      	beq.n	8001788 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10d      	bne.n	80017d4 <HAL_RCC_OscConfig+0x940>
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a02      	ldr	r2, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x934>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e03c      	b.n	8001840 <HAL_RCC_OscConfig+0x9ac>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	10908120 	.word	0x10908120
 80017d0:	40007000 	.word	0x40007000
 80017d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x96a>
 80017e4:	4bc1      	ldr	r3, [pc, #772]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4ac0      	ldr	r2, [pc, #768]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	4bbe      	ldr	r3, [pc, #760]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4abd      	ldr	r2, [pc, #756]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80017f6:	f023 0304 	bic.w	r3, r3, #4
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e020      	b.n	8001840 <HAL_RCC_OscConfig+0x9ac>
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x994>
 800180e:	4bb7      	ldr	r3, [pc, #732]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4ab6      	ldr	r2, [pc, #728]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
 800181a:	4bb4      	ldr	r3, [pc, #720]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4ab3      	ldr	r2, [pc, #716]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x9ac>
 8001828:	4bb0      	ldr	r3, [pc, #704]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4aaf      	ldr	r2, [pc, #700]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	4bad      	ldr	r3, [pc, #692]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4aac      	ldr	r2, [pc, #688]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8081 	beq.w	8001954 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff f875 	bl	8000940 <HAL_GetTick>
 8001856:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff f870 	bl	8000940 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e345      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800187c:	2202      	movs	r2, #2
 800187e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fa93 f2a3 	rbit	r2, r3
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ba:	601a      	str	r2, [r3, #0]
  return result;
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0xa4c>
 80018da:	4b84      	ldr	r3, [pc, #528]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0xa74>
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001910:	2102      	movs	r1, #2
 8001912:	6011      	str	r1, [r2, #0]
 8001914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001918:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fa92 f1a2 	rbit	r1, r2
 8001922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001926:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800192a:	6011      	str	r1, [r2, #0]
  return result;
 800192c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001930:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d084      	beq.n	800185c <HAL_RCC_OscConfig+0x9c8>
 8001952:	e07f      	b.n	8001a54 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001954:	f7fe fff4 	bl	8000940 <HAL_GetTick>
 8001958:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7fe ffef 	bl	8000940 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e2c4      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800197e:	2202      	movs	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019bc:	601a      	str	r2, [r3, #0]
  return result;
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_OscConfig+0xb4e>
 80019dc:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	e013      	b.n	8001a0a <HAL_RCC_OscConfig+0xb76>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	4b39      	ldr	r3, [pc, #228]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a12:	2102      	movs	r1, #2
 8001a14:	6011      	str	r1, [r2, #0]
 8001a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fa92 f1a2 	rbit	r1, r2
 8001a24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a2c:	6011      	str	r1, [r2, #0]
  return result;
 8001a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d184      	bne.n	800195e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a54:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a66:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8242 	beq.w	8001efe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_RCC_OscConfig+0xc58>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	f000 8213 	beq.w	8001eae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	f040 8162 	bne.w	8001d5e <HAL_RCC_OscConfig+0xeca>
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	fa93 f2a3 	rbit	r2, r3
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001abe:	601a      	str	r2, [r3, #0]
  return result;
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ac8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	461a      	mov	r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe ff2e 	bl	8000940 <HAL_GetTick>
 8001ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCC_OscConfig+0xc70>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe ff26 	bl	8000940 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1fd      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0xcba>
 8001b48:	4bb0      	ldr	r3, [pc, #704]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e027      	b.n	8001b9e <HAL_RCC_OscConfig+0xd0a>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4b9c      	ldr	r3, [pc, #624]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ba6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001baa:	6011      	str	r1, [r2, #0]
 8001bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	fa92 f1a2 	rbit	r1, r2
 8001bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bbe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bc2:	6011      	str	r1, [r2, #0]
  return result;
 8001bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d182      	bne.n	8001af0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	497f      	ldr	r1, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c36:	601a      	str	r2, [r3, #0]
  return result;
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7fe fe72 	bl	8000940 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7fe fe6d 	bl	8000940 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e144      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ca4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xe2c>
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e027      	b.n	8001d10 <HAL_RCC_OscConfig+0xe7c>
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fa92 f1a2 	rbit	r1, r2
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d34:	6011      	str	r1, [r2, #0]
  return result;
 8001d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d082      	beq.n	8001c62 <HAL_RCC_OscConfig+0xdce>
 8001d5c:	e0cf      	b.n	8001efe <HAL_RCC_OscConfig+0x106a>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d82:	601a      	str	r2, [r3, #0]
  return result;
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7fe fdcc 	bl	8000940 <HAL_GetTick>
 8001da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fdc7 	bl	8000940 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e09e      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001de6:	601a      	str	r2, [r3, #0]
  return result;
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001df0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d104      	bne.n	8001e10 <HAL_RCC_OscConfig+0xf7c>
 8001e06:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <HAL_RCC_OscConfig+0xf78>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e029      	b.n	8001e60 <HAL_RCC_OscConfig+0xfcc>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	fa93 f2a3 	rbit	r2, r3
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x1078>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e6c:	6011      	str	r1, [r2, #0]
 8001e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	fa92 f1a2 	rbit	r1, r2
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e84:	6011      	str	r1, [r2, #0]
  return result;
 8001e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f002 021f 	and.w	r2, r2, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d180      	bne.n	8001dae <HAL_RCC_OscConfig+0xf1a>
 8001eac:	e027      	b.n	8001efe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e01e      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x1078>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ece:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b09e      	sub	sp, #120	; 0x78
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e162      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b8d      	ldr	r3, [pc, #564]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	498b      	ldr	r1, [pc, #556]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e14a      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	497f      	ldr	r1, [pc, #508]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80dc 	beq.w	800213c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d13c      	bne.n	8002006 <HAL_RCC_ClockConfig+0xf6>
 8001f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xa6>
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	e00f      	b.n	8001fd6 <HAL_RCC_ClockConfig+0xc6>
 8001fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8001fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fda:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d17b      	bne.n	80020fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0f3      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d13c      	bne.n	8002088 <HAL_RCC_ClockConfig+0x178>
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_RCC_ClockConfig+0x128>
 8002032:	4b4f      	ldr	r3, [pc, #316]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e00f      	b.n	8002058 <HAL_RCC_ClockConfig+0x148>
 8002038:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	647b      	str	r3, [r7, #68]	; 0x44
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
 800204c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002054:	4b46      	ldr	r3, [pc, #280]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205c:	63ba      	str	r2, [r7, #56]	; 0x38
 800205e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002060:	fa92 f2a2 	rbit	r2, r2
 8002064:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13a      	bne.n	80020fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b2      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
 8002088:	2302      	movs	r3, #2
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x1a0>
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e00d      	b.n	80020cc <HAL_RCC_ClockConfig+0x1bc>
 80020b0:	2302      	movs	r3, #2
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	2302      	movs	r3, #2
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2202      	movs	r2, #2
 80020ce:	61ba      	str	r2, [r7, #24]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	617a      	str	r2, [r7, #20]
  return result;
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0220 	orr.w	r2, r2, #32
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e079      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	491a      	ldr	r1, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7fe fc18 	bl	8000940 <HAL_GetTick>
 8002110:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7fe fc14 	bl	8000940 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e061      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_ClockConfig+0x260>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d214      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_ClockConfig+0x25c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e040      	b.n	80021ee <HAL_RCC_ClockConfig+0x2de>
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	491a      	ldr	r1, [pc, #104]	; (80021f8 <HAL_RCC_ClockConfig+0x2e8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x2e8>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4912      	ldr	r1, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x2e8>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021b2:	f000 f829 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021b6:	4601      	mov	r1, r0
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_RCC_ClockConfig+0x2e8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c0:	22f0      	movs	r2, #240	; 0xf0
 80021c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	60fa      	str	r2, [r7, #12]
  return result;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	40d3      	lsrs	r3, r2
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x2ec>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	fa21 f303 	lsr.w	r3, r1, r3
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_RCC_ClockConfig+0x2f0>)
 80021e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_ClockConfig+0x2f4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe faa2 	bl	8000730 <HAL_InitTick>
  
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3778      	adds	r7, #120	; 0x78
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08004a30 	.word	0x08004a30
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004

08002208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	; 0x2c
 800220c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x30>
 8002232:	2b08      	cmp	r3, #8
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x36>
 8002236:	e03c      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	e03c      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002244:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002248:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	fa92 f2a2 	rbit	r2, r2
 8002250:	607a      	str	r2, [r7, #4]
  return result;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	fab2 f282 	clz	r2, r2
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	40d3      	lsrs	r3, r2
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	220f      	movs	r2, #15
 800226c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	60fa      	str	r2, [r7, #12]
  return result;
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	40d3      	lsrs	r3, r2
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	fbb2 f2f3 	udiv	r2, r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	e004      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	e002      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022b4:	623b      	str	r3, [r7, #32]
      break;
 80022b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	372c      	adds	r7, #44	; 0x2c
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	08004a48 	.word	0x08004a48
 80022d4:	08004a58 	.word	0x08004a58
 80022d8:	003d0900 	.word	0x003d0900

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022fa:	f7ff ffef 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fe:	4601      	mov	r1, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002308:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800230c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	603a      	str	r2, [r7, #0]
  return result;
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	40d3      	lsrs	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08004a40 	.word	0x08004a40

08002338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800233e:	f7ff ffcd 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800234c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002350:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	603a      	str	r2, [r7, #0]
  return result;
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	40d3      	lsrs	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08004a40 	.word	0x08004a40

0800237c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCC_GetClockConfig+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80cd 	beq.w	800259e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002404:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10e      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a8a      	ldr	r2, [pc, #552]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b82      	ldr	r3, [pc, #520]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a81      	ldr	r2, [pc, #516]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe fa7b 	bl	8000940 <HAL_GetTick>
 800244a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fa77 	bl	8000940 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0ea      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b78      	ldr	r3, [pc, #480]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246c:	4b74      	ldr	r3, [pc, #464]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d07d      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	429a      	cmp	r2, r3
 8002488:	d076      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b66      	ldr	r3, [pc, #408]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	2301      	movs	r3, #1
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	461a      	mov	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d045      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fa28 	bl	8000940 <HAL_GetTick>
 80024f0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7fe fa24 	bl	8000940 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e095      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800250a:	2302      	movs	r3, #2
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	2302      	movs	r3, #2
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	61fb      	str	r3, [r7, #28]
  return result;
 8002522:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d102      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	e007      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800253e:	2302      	movs	r3, #2
 8002540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2202      	movs	r2, #2
 8002550:	613a      	str	r2, [r7, #16]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	fa92 f2a2 	rbit	r2, r2
 8002558:	60fa      	str	r2, [r7, #12]
  return result;
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	fab2 f282 	clz	r2, r2
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	f002 021f 	and.w	r2, r2, #31
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f202 	lsl.w	r2, r1, r2
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0bd      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	492e      	ldr	r1, [pc, #184]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	4313      	orrs	r3, r2
 8002588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800258a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4922      	ldr	r1, [pc, #136]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f023 0210 	bic.w	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	491a      	ldr	r1, [pc, #104]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4913      	ldr	r1, [pc, #76]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	490b      	ldr	r1, [pc, #44]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3748      	adds	r7, #72	; 0x48
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	10908100 	.word	0x10908100

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e049      	b.n	80026f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f841 	bl	80026fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 f9e4 	bl	8002a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d001      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e040      	b.n	80027aa <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d009      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_TIM_Base_Start_IT+0xac>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x58>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d115      	bne.n	8002794 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d015      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x96>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d011      	beq.n	80027a6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	e008      	b.n	80027a6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e000      	b.n	80027a8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40014000 	.word	0x40014000
 80027c4:	00010007 	.word	0x00010007

080027c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f905 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8f7 	bl	8002a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f908 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0204 	mvn.w	r2, #4
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8db 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8cd 	bl	8002a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f8de 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0208 	mvn.w	r2, #8
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8b1 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8a3 	bl	8002a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8b4 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0210 	mvn.w	r2, #16
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2208      	movs	r2, #8
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f887 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f879 	bl	8002a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f88a 	bl	8002a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fe6e 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8f2 	bl	8002b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b80      	cmp	r3, #128	; 0x80
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8e5 	bl	8002b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d10e      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f838 	bl	8002a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d10e      	bne.n	80029fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d107      	bne.n	80029fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0220 	mvn.w	r2, #32
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8a5 	bl	8002b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <TIM_Base_SetConfig+0xdc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <TIM_Base_SetConfig+0x28>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0x28>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <TIM_Base_SetConfig+0xe0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d108      	bne.n	8002a92 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <TIM_Base_SetConfig+0xdc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <TIM_Base_SetConfig+0x6a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_Base_SetConfig+0x6a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <TIM_Base_SetConfig+0xe0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_Base_SetConfig+0x6a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <TIM_Base_SetConfig+0xe4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_Base_SetConfig+0x6a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a22      	ldr	r2, [pc, #136]	; (8002b40 <TIM_Base_SetConfig+0xe8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0x6a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <TIM_Base_SetConfig+0xec>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <TIM_Base_SetConfig+0xdc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <TIM_Base_SetConfig+0xc0>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <TIM_Base_SetConfig+0xe4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <TIM_Base_SetConfig+0xc0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <TIM_Base_SetConfig+0xe8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0xc0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <TIM_Base_SetConfig+0xec>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e040      	b.n	8002c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fd fd7e 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	; 0x24
 8002bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8b6 	bl	8002d34 <UART_SetConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9e0 	bl	8002fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa67 	bl	80030e4 <UART_CheckIdleState>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d178      	bne.n	8002d2a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_UART_Transmit+0x24>
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e071      	b.n	8002d2c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2221      	movs	r2, #33	; 0x21
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c56:	f7fd fe73 	bl	8000940 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d108      	bne.n	8002c88 <HAL_UART_Transmit+0x68>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c90:	e030      	b.n	8002cf4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fac9 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e03c      	b.n	8002d2c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3302      	adds	r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e008      	b.n	8002ce2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b292      	uxth	r2, r2
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1c8      	bne.n	8002c92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa92 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e005      	b.n	8002d2c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b8a      	ldr	r3, [pc, #552]	; (8002f88 <UART_SetConfig+0x254>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a78      	ldr	r2, [pc, #480]	; (8002f8c <UART_SetConfig+0x258>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d120      	bne.n	8002df2 <UART_SetConfig+0xbe>
 8002db0:	4b77      	ldr	r3, [pc, #476]	; (8002f90 <UART_SetConfig+0x25c>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d817      	bhi.n	8002dec <UART_SetConfig+0xb8>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <UART_SetConfig+0x90>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002de1 	.word	0x08002de1
 8002dcc:	08002de7 	.word	0x08002de7
 8002dd0:	08002ddb 	.word	0x08002ddb
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e01d      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e01a      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002de0:	2304      	movs	r3, #4
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e017      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002de6:	2308      	movs	r3, #8
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e014      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002dec:	2310      	movs	r3, #16
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e011      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a67      	ldr	r2, [pc, #412]	; (8002f94 <UART_SetConfig+0x260>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d102      	bne.n	8002e02 <UART_SetConfig+0xce>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e009      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <UART_SetConfig+0x264>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d102      	bne.n	8002e12 <UART_SetConfig+0xde>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e001      	b.n	8002e16 <UART_SetConfig+0xe2>
 8002e12:	2310      	movs	r3, #16
 8002e14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1e:	d15a      	bne.n	8002ed6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d827      	bhi.n	8002e76 <UART_SetConfig+0x142>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <UART_SetConfig+0xf8>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e51 	.word	0x08002e51
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e77 	.word	0x08002e77
 8002e3c:	08002e67 	.word	0x08002e67
 8002e40:	08002e77 	.word	0x08002e77
 8002e44:	08002e77 	.word	0x08002e77
 8002e48:	08002e77 	.word	0x08002e77
 8002e4c:	08002e6f 	.word	0x08002e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e50:	f7ff fa50 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8002e54:	61b8      	str	r0, [r7, #24]
        break;
 8002e56:	e013      	b.n	8002e80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e58:	f7ff fa6e 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8002e5c:	61b8      	str	r0, [r7, #24]
        break;
 8002e5e:	e00f      	b.n	8002e80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e60:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <UART_SetConfig+0x268>)
 8002e62:	61bb      	str	r3, [r7, #24]
        break;
 8002e64:	e00c      	b.n	8002e80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e66:	f7ff f9cf 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8002e6a:	61b8      	str	r0, [r7, #24]
        break;
 8002e6c:	e008      	b.n	8002e80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e72:	61bb      	str	r3, [r7, #24]
        break;
 8002e74:	e004      	b.n	8002e80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	77bb      	strb	r3, [r7, #30]
        break;
 8002e7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d074      	beq.n	8002f70 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	005a      	lsls	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	441a      	add	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d916      	bls.n	8002ed0 <UART_SetConfig+0x19c>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d212      	bcs.n	8002ed0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f023 030f 	bic.w	r3, r3, #15
 8002eb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	89fb      	ldrh	r3, [r7, #14]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	89fa      	ldrh	r2, [r7, #14]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e04f      	b.n	8002f70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77bb      	strb	r3, [r7, #30]
 8002ed4:	e04c      	b.n	8002f70 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d828      	bhi.n	8002f2e <UART_SetConfig+0x1fa>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x1b0>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002f2f 	.word	0x08002f2f
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	08002f2f 	.word	0x08002f2f
 8002efc:	08002f2f 	.word	0x08002f2f
 8002f00:	08002f2f 	.word	0x08002f2f
 8002f04:	08002f27 	.word	0x08002f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7ff f9f4 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8002f0c:	61b8      	str	r0, [r7, #24]
        break;
 8002f0e:	e013      	b.n	8002f38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff fa12 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8002f14:	61b8      	str	r0, [r7, #24]
        break;
 8002f16:	e00f      	b.n	8002f38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f18:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <UART_SetConfig+0x268>)
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e00c      	b.n	8002f38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1e:	f7ff f973 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 8002f22:	61b8      	str	r0, [r7, #24]
        break;
 8002f24:	e008      	b.n	8002f38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	61bb      	str	r3, [r7, #24]
        break;
 8002f2c:	e004      	b.n	8002f38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	77bb      	strb	r3, [r7, #30]
        break;
 8002f36:	bf00      	nop
    }

    if (pclk != 0U)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	085a      	lsrs	r2, r3, #1
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d909      	bls.n	8002f6c <UART_SetConfig+0x238>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5e:	d205      	bcs.n	8002f6c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e001      	b.n	8002f70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3720      	adds	r7, #32
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	efff69f3 	.word	0xefff69f3
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40004400 	.word	0x40004400
 8002f98:	40004800 	.word	0x40004800
 8002f9c:	007a1200 	.word	0x007a1200

08002fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309e:	d10a      	bne.n	80030b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b098      	sub	sp, #96	; 0x60
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030f4:	f7fd fc24 	bl	8000940 <HAL_GetTick>
 80030f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d12e      	bne.n	8003166 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f88c 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d021      	beq.n	8003166 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
 8003142:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e6      	bne.n	8003122 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e062      	b.n	800322c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d149      	bne.n	8003208 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f856 	bl	8003234 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d03c      	beq.n	8003208 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	623b      	str	r3, [r7, #32]
   return(result);
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
 80031ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e6      	bne.n	800318e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3308      	adds	r3, #8
 80031c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	617b      	str	r3, [r7, #20]
   return(result);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e011      	b.n	800322c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3758      	adds	r7, #88	; 0x58
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003244:	e049      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800324c:	d045      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fd fb77 	bl	8000940 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <UART_WaitOnFlagUntilTimeout+0x30>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e048      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d031      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d110      	bne.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2208      	movs	r2, #8
 800328a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f838 	bl	8003302 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2208      	movs	r2, #8
 8003296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e029      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	d111      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f81e 	bl	8003302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d0a6      	beq.n	8003246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003302:	b480      	push	{r7}
 8003304:	b095      	sub	sp, #84	; 0x54
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	643b      	str	r3, [r7, #64]	; 0x40
 800332a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800332e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	61fb      	str	r3, [r7, #28]
   return(result);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800335c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003374:	2b01      	cmp	r3, #1
 8003376:	d118      	bne.n	80033aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	60bb      	str	r3, [r7, #8]
   return(result);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e6      	bne.n	8003378 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033be:	bf00      	nop
 80033c0:	3754      	adds	r7, #84	; 0x54
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f103 0208 	add.w	r2, r3, #8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f103 0208 	add.w	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f103 0208 	add.w	r2, r3, #8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003482:	d103      	bne.n	800348c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e00c      	b.n	80034a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3308      	adds	r3, #8
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e002      	b.n	800349a <vListInsert+0x2e>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d2f6      	bcs.n	8003494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6892      	ldr	r2, [r2, #8]
 80034f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d103      	bne.n	8003512 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1e5a      	subs	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003532:	b580      	push	{r7, lr}
 8003534:	b08e      	sub	sp, #56	; 0x38
 8003536:	af04      	add	r7, sp, #16
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <xTaskCreateStatic+0x46>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	61fb      	str	r3, [r7, #28]
}
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2ba0      	cmp	r3, #160	; 0xa0
 8003580:	d00a      	beq.n	8003598 <xTaskCreateStatic+0x66>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	61bb      	str	r3, [r7, #24]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01e      	beq.n	80035dc <xTaskCreateStatic+0xaa>
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035b6:	2300      	movs	r3, #0
 80035b8:	9303      	str	r3, [sp, #12]
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f850 	bl	8003674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035d6:	f000 f8e3 	bl	80037a0 <prvAddNewTaskToReadyList>
 80035da:	e001      	b.n	80035e0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035e0:	697b      	ldr	r3, [r7, #20]
	}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b08c      	sub	sp, #48	; 0x30
 80035ee:	af04      	add	r7, sp, #16
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fef2 	bl	80043e8 <pvPortMalloc>
 8003604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800360c:	20a0      	movs	r0, #160	; 0xa0
 800360e:	f000 feeb 	bl	80043e8 <pvPortMalloc>
 8003612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
 8003620:	e005      	b.n	800362e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f000 ffa4 	bl	8004570 <vPortFree>
 8003628:	e001      	b.n	800362e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	2300      	movs	r3, #0
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	9302      	str	r3, [sp, #8]
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f80e 	bl	8003674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003658:	69f8      	ldr	r0, [r7, #28]
 800365a:	f000 f8a1 	bl	80037a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	e002      	b.n	800366a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800366a:	69bb      	ldr	r3, [r7, #24]
	}
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800368c:	3b01      	subs	r3, #1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e012      	b.n	80036e8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	7819      	ldrb	r1, [r3, #0]
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	3334      	adds	r3, #52	; 0x34
 80036d2:	460a      	mov	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3301      	adds	r3, #1
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d9e9      	bls.n	80036c2 <prvInitialiseNewTask+0x4e>
 80036ee:	e000      	b.n	80036f2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80036f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d901      	bls.n	8003704 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003700:	2306      	movs	r3, #6
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	2200      	movs	r2, #0
 8003714:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fe75 	bl	800340a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	3318      	adds	r3, #24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fe70 	bl	800340a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f1c3 0207 	rsb	r2, r3, #7
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	2200      	movs	r2, #0
 8003744:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	334c      	adds	r3, #76	; 0x4c
 8003754:	224c      	movs	r2, #76	; 0x4c
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f81f 	bl	800479c <memset>
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <prvInitialiseNewTask+0x120>)
 8003762:	651a      	str	r2, [r3, #80]	; 0x50
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <prvInitialiseNewTask+0x124>)
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	4a0b      	ldr	r2, [pc, #44]	; (800379c <prvInitialiseNewTask+0x128>)
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	69b8      	ldr	r0, [r7, #24]
 8003776:	f000 fc2b 	bl	8003fd0 <pxPortInitialiseStack>
 800377a:	4602      	mov	r2, r0
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800378c:	bf00      	nop
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20001144 	.word	0x20001144
 8003798:	200011ac 	.word	0x200011ac
 800379c:	20001214 	.word	0x20001214

080037a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037a8:	f000 fd3c 	bl	8004224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <prvAddNewTaskToReadyList+0xb8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <prvAddNewTaskToReadyList+0xb8>)
 80037b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <prvAddNewTaskToReadyList+0xbc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037be:	4a27      	ldr	r2, [pc, #156]	; (800385c <prvAddNewTaskToReadyList+0xbc>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <prvAddNewTaskToReadyList+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d110      	bne.n	80037ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037cc:	f000 fad2 	bl	8003d74 <prvInitialiseTaskLists>
 80037d0:	e00d      	b.n	80037ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <prvAddNewTaskToReadyList+0xc0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <prvAddNewTaskToReadyList+0xbc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d802      	bhi.n	80037ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037e8:	4a1c      	ldr	r2, [pc, #112]	; (800385c <prvAddNewTaskToReadyList+0xbc>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <prvAddNewTaskToReadyList+0xc4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <prvAddNewTaskToReadyList+0xc4>)
 80037f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <prvAddNewTaskToReadyList+0xc8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <prvAddNewTaskToReadyList+0xc8>)
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <prvAddNewTaskToReadyList+0xcc>)
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7ff fdff 	bl	8003424 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003826:	f000 fd2d 	bl	8004284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <prvAddNewTaskToReadyList+0xc0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvAddNewTaskToReadyList+0xbc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d207      	bcs.n	8003850 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <prvAddNewTaskToReadyList+0xd0>)
 8003842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200004f8 	.word	0x200004f8
 800385c:	200003f8 	.word	0x200003f8
 8003860:	20000504 	.word	0x20000504
 8003864:	20000514 	.word	0x20000514
 8003868:	20000500 	.word	0x20000500
 800386c:	200003fc 	.word	0x200003fc
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d017      	beq.n	80038b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <vTaskDelay+0x60>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <vTaskDelay+0x30>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60bb      	str	r3, [r7, #8]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038a4:	f000 f884 	bl	80039b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fb2a 	bl	8003f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038b0:	f000 f88c 	bl	80039cc <xTaskResumeAll>
 80038b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <vTaskDelay+0x64>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000520 	.word	0x20000520
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ea:	463a      	mov	r2, r7
 80038ec:	1d39      	adds	r1, r7, #4
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fc74 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	460a      	mov	r2, r1
 800390a:	4921      	ldr	r1, [pc, #132]	; (8003990 <vTaskStartScheduler+0xb4>)
 800390c:	4821      	ldr	r0, [pc, #132]	; (8003994 <vTaskStartScheduler+0xb8>)
 800390e:	f7ff fe10 	bl	8003532 <xTaskCreateStatic>
 8003912:	4603      	mov	r3, r0
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <vTaskStartScheduler+0xbc>)
 8003916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <vTaskStartScheduler+0xbc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e001      	b.n	800392a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d11b      	bne.n	8003968 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	613b      	str	r3, [r7, #16]
}
 8003942:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <vTaskStartScheduler+0xc0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	334c      	adds	r3, #76	; 0x4c
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <vTaskStartScheduler+0xc4>)
 800394c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <vTaskStartScheduler+0xc8>)
 8003950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <vTaskStartScheduler+0xcc>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <vTaskStartScheduler+0xd0>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003962:	f000 fbbd 	bl	80040e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003966:	e00e      	b.n	8003986 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800396e:	d10a      	bne.n	8003986 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	60fb      	str	r3, [r7, #12]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <vTaskStartScheduler+0xa8>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	08004a28 	.word	0x08004a28
 8003994:	08003d45 	.word	0x08003d45
 8003998:	2000051c 	.word	0x2000051c
 800399c:	200003f8 	.word	0x200003f8
 80039a0:	2000005c 	.word	0x2000005c
 80039a4:	20000518 	.word	0x20000518
 80039a8:	20000504 	.word	0x20000504
 80039ac:	200004fc 	.word	0x200004fc

080039b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <vTaskSuspendAll+0x18>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a03      	ldr	r2, [pc, #12]	; (80039c8 <vTaskSuspendAll+0x18>)
 80039bc:	6013      	str	r3, [r2, #0]
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000520 	.word	0x20000520

080039cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039da:	4b41      	ldr	r3, [pc, #260]	; (8003ae0 <xTaskResumeAll+0x114>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	603b      	str	r3, [r7, #0]
}
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039f8:	f000 fc14 	bl	8004224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039fc:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <xTaskResumeAll+0x114>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	4a37      	ldr	r2, [pc, #220]	; (8003ae0 <xTaskResumeAll+0x114>)
 8003a04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <xTaskResumeAll+0x114>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d161      	bne.n	8003ad2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a0e:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <xTaskResumeAll+0x118>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d05d      	beq.n	8003ad2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a16:	e02e      	b.n	8003a76 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <xTaskResumeAll+0x11c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3318      	adds	r3, #24
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fd5a 	bl	80034de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fd55 	bl	80034de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <xTaskResumeAll+0x120>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <xTaskResumeAll+0x120>)
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <xTaskResumeAll+0x124>)
 8003a54:	441a      	add	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f7ff fce1 	bl	8003424 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <xTaskResumeAll+0x128>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <xTaskResumeAll+0x12c>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a76:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <xTaskResumeAll+0x11c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1cc      	bne.n	8003a18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a84:	f000 fa18 	bl	8003eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a88:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <xTaskResumeAll+0x130>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a94:	f000 f836 	bl	8003b04 <xTaskIncrementTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <xTaskResumeAll+0x12c>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f1      	bne.n	8003a94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <xTaskResumeAll+0x130>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <xTaskResumeAll+0x12c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <xTaskResumeAll+0x134>)
 8003ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ad2:	f000 fbd7 	bl	8004284 <vPortExitCritical>

	return xAlreadyYielded;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000520 	.word	0x20000520
 8003ae4:	200004f8 	.word	0x200004f8
 8003ae8:	200004b8 	.word	0x200004b8
 8003aec:	20000500 	.word	0x20000500
 8003af0:	200003fc 	.word	0x200003fc
 8003af4:	200003f8 	.word	0x200003f8
 8003af8:	2000050c 	.word	0x2000050c
 8003afc:	20000508 	.word	0x20000508
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 808d 	bne.w	8003c32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <xTaskIncrementTick+0x154>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <xTaskIncrementTick+0x154>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	603b      	str	r3, [r7, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xTaskIncrementTick+0x46>
 8003b4c:	4b43      	ldr	r3, [pc, #268]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <xTaskIncrementTick+0x15c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a41      	ldr	r2, [pc, #260]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4a41      	ldr	r2, [pc, #260]	; (8003c60 <xTaskIncrementTick+0x15c>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <xTaskIncrementTick+0x160>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a3f      	ldr	r2, [pc, #252]	; (8003c64 <xTaskIncrementTick+0x160>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f000 f9a5 	bl	8003eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <xTaskIncrementTick+0x164>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d34d      	bcc.n	8003c14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <xTaskIncrementTick+0x82>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <xTaskIncrementTick+0x84>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <xTaskIncrementTick+0x164>)
 8003b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b92:	601a      	str	r2, [r3, #0]
					break;
 8003b94:	e03e      	b.n	8003c14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d203      	bcs.n	8003bb6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bae:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <xTaskIncrementTick+0x164>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6013      	str	r3, [r2, #0]
						break;
 8003bb4:	e02e      	b.n	8003c14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fc8f 	bl	80034de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fc86 	bl	80034de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <xTaskIncrementTick+0x168>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <xTaskIncrementTick+0x168>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <xTaskIncrementTick+0x16c>)
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f7ff fc12 	bl	8003424 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <xTaskIncrementTick+0x170>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d3b4      	bcc.n	8003b78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c12:	e7b1      	b.n	8003b78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c14:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <xTaskIncrementTick+0x170>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4915      	ldr	r1, [pc, #84]	; (8003c70 <xTaskIncrementTick+0x16c>)
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d907      	bls.n	8003c3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e004      	b.n	8003c3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <xTaskIncrementTick+0x174>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <xTaskIncrementTick+0x174>)
 8003c3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <xTaskIncrementTick+0x178>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c48:	697b      	ldr	r3, [r7, #20]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000520 	.word	0x20000520
 8003c58:	200004fc 	.word	0x200004fc
 8003c5c:	200004b0 	.word	0x200004b0
 8003c60:	200004b4 	.word	0x200004b4
 8003c64:	20000510 	.word	0x20000510
 8003c68:	20000518 	.word	0x20000518
 8003c6c:	20000500 	.word	0x20000500
 8003c70:	200003fc 	.word	0x200003fc
 8003c74:	200003f8 	.word	0x200003f8
 8003c78:	20000508 	.word	0x20000508
 8003c7c:	2000050c 	.word	0x2000050c

08003c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <vTaskSwitchContext+0xac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <vTaskSwitchContext+0xb0>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c94:	e044      	b.n	8003d20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <vTaskSwitchContext+0xb0>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <vTaskSwitchContext+0xb4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	f1c3 031f 	rsb	r3, r3, #31
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <vTaskSwitchContext+0xb8>)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	607b      	str	r3, [r7, #4]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <vTaskSwitchContext+0x5a>
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <vTaskSwitchContext+0xb8>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d104      	bne.n	8003d0c <vTaskSwitchContext+0x8c>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <vTaskSwitchContext+0xbc>)
 8003d14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <vTaskSwitchContext+0xbc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	334c      	adds	r3, #76	; 0x4c
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <vTaskSwitchContext+0xc0>)
 8003d1e:	6013      	str	r3, [r2, #0]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000520 	.word	0x20000520
 8003d30:	2000050c 	.word	0x2000050c
 8003d34:	20000500 	.word	0x20000500
 8003d38:	200003fc 	.word	0x200003fc
 8003d3c:	200003f8 	.word	0x200003f8
 8003d40:	2000005c 	.word	0x2000005c

08003d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d4c:	f000 f852 	bl	8003df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <prvIdleTask+0x28>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d9f9      	bls.n	8003d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <prvIdleTask+0x2c>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d68:	e7f0      	b.n	8003d4c <prvIdleTask+0x8>
 8003d6a:	bf00      	nop
 8003d6c:	200003fc 	.word	0x200003fc
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	e00c      	b.n	8003d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <prvInitialiseTaskLists+0x60>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fb1b 	bl	80033ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3301      	adds	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d9ef      	bls.n	8003d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003da0:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <prvInitialiseTaskLists+0x64>)
 8003da2:	f7ff fb12 	bl	80033ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003da6:	480d      	ldr	r0, [pc, #52]	; (8003ddc <prvInitialiseTaskLists+0x68>)
 8003da8:	f7ff fb0f 	bl	80033ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dac:	480c      	ldr	r0, [pc, #48]	; (8003de0 <prvInitialiseTaskLists+0x6c>)
 8003dae:	f7ff fb0c 	bl	80033ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003db2:	480c      	ldr	r0, [pc, #48]	; (8003de4 <prvInitialiseTaskLists+0x70>)
 8003db4:	f7ff fb09 	bl	80033ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003db8:	480b      	ldr	r0, [pc, #44]	; (8003de8 <prvInitialiseTaskLists+0x74>)
 8003dba:	f7ff fb06 	bl	80033ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <prvInitialiseTaskLists+0x78>)
 8003dc0:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <prvInitialiseTaskLists+0x64>)
 8003dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <prvInitialiseTaskLists+0x7c>)
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <prvInitialiseTaskLists+0x68>)
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200003fc 	.word	0x200003fc
 8003dd8:	20000488 	.word	0x20000488
 8003ddc:	2000049c 	.word	0x2000049c
 8003de0:	200004b8 	.word	0x200004b8
 8003de4:	200004cc 	.word	0x200004cc
 8003de8:	200004e4 	.word	0x200004e4
 8003dec:	200004b0 	.word	0x200004b0
 8003df0:	200004b4 	.word	0x200004b4

08003df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dfa:	e019      	b.n	8003e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dfc:	f000 fa12 	bl	8004224 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <prvCheckTasksWaitingTermination+0x50>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fb66 	bl	80034de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <prvCheckTasksWaitingTermination+0x54>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <prvCheckTasksWaitingTermination+0x54>)
 8003e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e26:	f000 fa2d 	bl	8004284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f810 	bl	8003e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvCheckTasksWaitingTermination+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e1      	bne.n	8003dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200004cc 	.word	0x200004cc
 8003e48:	200004f8 	.word	0x200004f8
 8003e4c:	200004e0 	.word	0x200004e0

08003e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	334c      	adds	r3, #76	; 0x4c
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fca5 	bl	80047ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb7d 	bl	8004570 <vPortFree>
				vPortFree( pxTCB );
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fb7a 	bl	8004570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e7c:	e018      	b.n	8003eb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d103      	bne.n	8003e90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb71 	bl	8004570 <vPortFree>
	}
 8003e8e:	e00f      	b.n	8003eb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d00a      	beq.n	8003eb0 <prvDeleteTCB+0x60>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60fb      	str	r3, [r7, #12]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <prvDeleteTCB+0x5e>
	}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <prvResetNextTaskUnblockTime+0x44>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <prvResetNextTaskUnblockTime+0x14>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <prvResetNextTaskUnblockTime+0x16>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <prvResetNextTaskUnblockTime+0x48>)
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eda:	e008      	b.n	8003eee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <prvResetNextTaskUnblockTime+0x44>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <prvResetNextTaskUnblockTime+0x48>)
 8003eec:	6013      	str	r3, [r2, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	200004b0 	.word	0x200004b0
 8003f00:	20000518 	.word	0x20000518

08003f04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f0e:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fadf 	bl	80034de <uxListRemove>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f44:	d10a      	bne.n	8003f5c <prvAddCurrentTaskToDelayedList+0x58>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	481a      	ldr	r0, [pc, #104]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f56:	f7ff fa65 	bl	8003424 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f5a:	e026      	b.n	8003faa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d209      	bcs.n	8003f88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7ff fa73 	bl	800346c <vListInsert>
}
 8003f86:	e010      	b.n	8003faa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7ff fa69 	bl	800346c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d202      	bcs.n	8003faa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200004fc 	.word	0x200004fc
 8003fb8:	200003f8 	.word	0x200003f8
 8003fbc:	20000500 	.word	0x20000500
 8003fc0:	200004e4 	.word	0x200004e4
 8003fc4:	200004b4 	.word	0x200004b4
 8003fc8:	200004b0 	.word	0x200004b0
 8003fcc:	20000518 	.word	0x20000518

08003fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3b04      	subs	r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b04      	subs	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3b04      	subs	r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004000:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <pxPortInitialiseStack+0x64>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b14      	subs	r3, #20
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b04      	subs	r3, #4
 8004016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f06f 0202 	mvn.w	r2, #2
 800401e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b20      	subs	r3, #32
 8004024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	08004039 	.word	0x08004039

08004038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <prvTaskExitError+0x54>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404a:	d00a      	beq.n	8004062 <prvTaskExitError+0x2a>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60fb      	str	r3, [r7, #12]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <prvTaskExitError+0x28>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60bb      	str	r3, [r7, #8]
}
 8004074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004076:	bf00      	nop
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0fc      	beq.n	8004078 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040da:	bf00      	nop
 80040dc:	e000ed08 	.word	0xe000ed08

080040e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <xPortStartScheduler+0x120>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a46      	ldr	r2, [pc, #280]	; (8004204 <xPortStartScheduler+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10a      	bne.n	8004106 <xPortStartScheduler+0x26>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004106:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <xPortStartScheduler+0x120>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <xPortStartScheduler+0x128>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10a      	bne.n	8004126 <xPortStartScheduler+0x46>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004126:	4b39      	ldr	r3, [pc, #228]	; (800420c <xPortStartScheduler+0x12c>)
 8004128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b31      	ldr	r3, [pc, #196]	; (8004210 <xPortStartScheduler+0x130>)
 800414c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xPortStartScheduler+0x134>)
 8004150:	2207      	movs	r2, #7
 8004152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004154:	e009      	b.n	800416a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <xPortStartScheduler+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3b01      	subs	r3, #1
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <xPortStartScheduler+0x134>)
 800415e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d0ef      	beq.n	8004156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <xPortStartScheduler+0x134>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1c3 0307 	rsb	r3, r3, #7
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00a      	beq.n	8004198 <xPortStartScheduler+0xb8>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <xPortStartScheduler+0x134>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <xPortStartScheduler+0x134>)
 80041a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <xPortStartScheduler+0x134>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <xPortStartScheduler+0x134>)
 80041ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <xPortStartScheduler+0x138>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <xPortStartScheduler+0x138>)
 80041bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <xPortStartScheduler+0x138>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <xPortStartScheduler+0x138>)
 80041c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041ce:	f000 f8dd 	bl	800438c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <xPortStartScheduler+0x13c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041d8:	f000 f8fc 	bl	80043d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <xPortStartScheduler+0x140>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <xPortStartScheduler+0x140>)
 80041e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041e8:	f7ff ff66 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041ec:	f7ff fd48 	bl	8003c80 <vTaskSwitchContext>
	prvTaskExitError();
 80041f0:	f7ff ff22 	bl	8004038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00
 8004204:	410fc271 	.word	0x410fc271
 8004208:	410fc270 	.word	0x410fc270
 800420c:	e000e400 	.word	0xe000e400
 8004210:	20000524 	.word	0x20000524
 8004214:	20000528 	.word	0x20000528
 8004218:	e000ed20 	.word	0xe000ed20
 800421c:	2000000c 	.word	0x2000000c
 8004220:	e000ef34 	.word	0xe000ef34

08004224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <vPortEnterCritical+0x58>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a0d      	ldr	r2, [pc, #52]	; (800427c <vPortEnterCritical+0x58>)
 8004246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <vPortEnterCritical+0x58>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10f      	bne.n	8004270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortEnterCritical+0x5c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <vPortEnterCritical+0x4c>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	603b      	str	r3, [r7, #0]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <vPortEnterCritical+0x4a>
	}
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	2000000c 	.word	0x2000000c
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <vPortExitCritical+0x50>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <vPortExitCritical+0x24>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	607b      	str	r3, [r7, #4]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <vPortExitCritical+0x50>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <vPortExitCritical+0x50>)
 80042b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <vPortExitCritical+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <vPortExitCritical+0x42>
 80042ba:	2300      	movs	r3, #0
 80042bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c
	...

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f01e 0f10 	tst.w	lr, #16
 80042f0:	bf08      	it	eq
 80042f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004304:	f380 8811 	msr	BASEPRI, r0
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f7ff fcb6 	bl	8003c80 <vTaskSwitchContext>
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f380 8811 	msr	BASEPRI, r0
 800431c:	bc09      	pop	{r0, r3}
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004326:	f01e 0f10 	tst.w	lr, #16
 800432a:	bf08      	it	eq
 800432c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004330:	f380 8809 	msr	PSP, r0
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst>:
 8004340:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
}
 8004360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004362:	f7ff fbcf 	bl	8003b04 <xTaskIncrementTick>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SysTick_Handler+0x40>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <vPortSetupTimerInterrupt+0x38>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <vPortSetupTimerInterrupt+0x3c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <vPortSetupTimerInterrupt+0x40>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <vPortSetupTimerInterrupt+0x44>)
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 80043b0:	2207      	movs	r2, #7
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e010 	.word	0xe000e010
 80043c4:	e000e018 	.word	0xe000e018
 80043c8:	20000000 	.word	0x20000000
 80043cc:	10624dd3 	.word	0x10624dd3
 80043d0:	e000e014 	.word	0xe000e014

080043d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043e4 <vPortEnableVFP+0x10>
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043de:	6001      	str	r1, [r0, #0]
 80043e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043e2:	bf00      	nop
 80043e4:	e000ed88 	.word	0xe000ed88

080043e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043f4:	f7ff fadc 	bl	80039b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043f8:	4b58      	ldr	r3, [pc, #352]	; (800455c <pvPortMalloc+0x174>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004400:	f000 f910 	bl	8004624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004404:	4b56      	ldr	r3, [pc, #344]	; (8004560 <pvPortMalloc+0x178>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 808e 	bne.w	800452e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01d      	beq.n	8004454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004418:	2208      	movs	r2, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	2b00      	cmp	r3, #0
 8004428:	d014      	beq.n	8004454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	3308      	adds	r3, #8
 8004432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <pvPortMalloc+0x6c>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d069      	beq.n	800452e <pvPortMalloc+0x146>
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <pvPortMalloc+0x17c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	d864      	bhi.n	800452e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <pvPortMalloc+0x180>)
 8004466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004468:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <pvPortMalloc+0x180>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800446e:	e004      	b.n	800447a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d903      	bls.n	800448c <pvPortMalloc+0xa4>
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <pvPortMalloc+0x174>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	429a      	cmp	r2, r3
 8004494:	d04b      	beq.n	800452e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2208      	movs	r2, #8
 800449c:	4413      	add	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	2308      	movs	r3, #8
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d91f      	bls.n	80044f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <pvPortMalloc+0xf8>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	613b      	str	r3, [r7, #16]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f000 f8f8 	bl	80046e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <pvPortMalloc+0x17c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <pvPortMalloc+0x17c>)
 8004504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <pvPortMalloc+0x17c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <pvPortMalloc+0x184>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d203      	bcs.n	800451a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <pvPortMalloc+0x17c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <pvPortMalloc+0x184>)
 8004518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <pvPortMalloc+0x178>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	431a      	orrs	r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800452e:	f7ff fa4d 	bl	80039cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <pvPortMalloc+0x16a>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <pvPortMalloc+0x168>
	return pvReturn;
 8004552:	69fb      	ldr	r3, [r7, #28]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20001134 	.word	0x20001134
 8004560:	20001140 	.word	0x20001140
 8004564:	20001138 	.word	0x20001138
 8004568:	2000112c 	.word	0x2000112c
 800456c:	2000113c 	.word	0x2000113c

08004570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d048      	beq.n	8004614 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004582:	2308      	movs	r3, #8
 8004584:	425b      	negs	r3, r3
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <vPortFree+0xac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <vPortFree+0x44>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <vPortFree+0x62>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60bb      	str	r3, [r7, #8]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <vPortFree+0xac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d019      	beq.n	8004614 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <vPortFree+0xac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045f8:	f7ff f9da 	bl	80039b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <vPortFree+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4413      	add	r3, r2
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <vPortFree+0xb0>)
 8004608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f000 f86c 	bl	80046e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004610:	f7ff f9dc 	bl	80039cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20001140 	.word	0x20001140
 8004620:	20001138 	.word	0x20001138

08004624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800462a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800462e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <prvHeapInit+0xac>)
 8004632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3307      	adds	r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0307 	bic.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <prvHeapInit+0xac>)
 8004654:	4413      	add	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <prvHeapInit+0xb0>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <prvHeapInit+0xb0>)
 8004664:	2200      	movs	r2, #0
 8004666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004670:	2208      	movs	r2, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <prvHeapInit+0xb4>)
 8004684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <prvHeapInit+0xb4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <prvHeapInit+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <prvHeapInit+0xb4>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <prvHeapInit+0xb8>)
 80046b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <prvHeapInit+0xbc>)
 80046ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <prvHeapInit+0xc0>)
 80046be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	2000052c 	.word	0x2000052c
 80046d4:	2000112c 	.word	0x2000112c
 80046d8:	20001134 	.word	0x20001134
 80046dc:	2000113c 	.word	0x2000113c
 80046e0:	20001138 	.word	0x20001138
 80046e4:	20001140 	.word	0x20001140

080046e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046f0:	4b28      	ldr	r3, [pc, #160]	; (8004794 <prvInsertBlockIntoFreeList+0xac>)
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e002      	b.n	80046fc <prvInsertBlockIntoFreeList+0x14>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d8f7      	bhi.n	80046f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d108      	bne.n	800472a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	441a      	add	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	441a      	add	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d118      	bne.n	8004770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <prvInsertBlockIntoFreeList+0xb0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d00d      	beq.n	8004766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e008      	b.n	8004778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <prvInsertBlockIntoFreeList+0xb0>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e003      	b.n	8004778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d002      	beq.n	8004786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2000112c 	.word	0x2000112c
 8004798:	20001134 	.word	0x20001134

0800479c <memset>:
 800479c:	4402      	add	r2, r0
 800479e:	4603      	mov	r3, r0
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	f803 1b01 	strb.w	r1, [r3], #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <_reclaim_reent>:
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <_reclaim_reent+0xa8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4283      	cmp	r3, r0
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	4604      	mov	r4, r0
 80047b6:	d04b      	beq.n	8004850 <_reclaim_reent+0xa4>
 80047b8:	69c3      	ldr	r3, [r0, #28]
 80047ba:	b143      	cbz	r3, 80047ce <_reclaim_reent+0x22>
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d144      	bne.n	800484c <_reclaim_reent+0xa0>
 80047c2:	69e3      	ldr	r3, [r4, #28]
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	b111      	cbz	r1, 80047ce <_reclaim_reent+0x22>
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 f86b 	bl	80048a4 <_free_r>
 80047ce:	6961      	ldr	r1, [r4, #20]
 80047d0:	b111      	cbz	r1, 80047d8 <_reclaim_reent+0x2c>
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 f866 	bl	80048a4 <_free_r>
 80047d8:	69e1      	ldr	r1, [r4, #28]
 80047da:	b111      	cbz	r1, 80047e2 <_reclaim_reent+0x36>
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 f861 	bl	80048a4 <_free_r>
 80047e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047e4:	b111      	cbz	r1, 80047ec <_reclaim_reent+0x40>
 80047e6:	4620      	mov	r0, r4
 80047e8:	f000 f85c 	bl	80048a4 <_free_r>
 80047ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ee:	b111      	cbz	r1, 80047f6 <_reclaim_reent+0x4a>
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 f857 	bl	80048a4 <_free_r>
 80047f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047f8:	b111      	cbz	r1, 8004800 <_reclaim_reent+0x54>
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 f852 	bl	80048a4 <_free_r>
 8004800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004802:	b111      	cbz	r1, 800480a <_reclaim_reent+0x5e>
 8004804:	4620      	mov	r0, r4
 8004806:	f000 f84d 	bl	80048a4 <_free_r>
 800480a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800480c:	b111      	cbz	r1, 8004814 <_reclaim_reent+0x68>
 800480e:	4620      	mov	r0, r4
 8004810:	f000 f848 	bl	80048a4 <_free_r>
 8004814:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004816:	b111      	cbz	r1, 800481e <_reclaim_reent+0x72>
 8004818:	4620      	mov	r0, r4
 800481a:	f000 f843 	bl	80048a4 <_free_r>
 800481e:	6a23      	ldr	r3, [r4, #32]
 8004820:	b1b3      	cbz	r3, 8004850 <_reclaim_reent+0xa4>
 8004822:	4620      	mov	r0, r4
 8004824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004828:	4718      	bx	r3
 800482a:	5949      	ldr	r1, [r1, r5]
 800482c:	b941      	cbnz	r1, 8004840 <_reclaim_reent+0x94>
 800482e:	3504      	adds	r5, #4
 8004830:	69e3      	ldr	r3, [r4, #28]
 8004832:	2d80      	cmp	r5, #128	; 0x80
 8004834:	68d9      	ldr	r1, [r3, #12]
 8004836:	d1f8      	bne.n	800482a <_reclaim_reent+0x7e>
 8004838:	4620      	mov	r0, r4
 800483a:	f000 f833 	bl	80048a4 <_free_r>
 800483e:	e7c0      	b.n	80047c2 <_reclaim_reent+0x16>
 8004840:	680e      	ldr	r6, [r1, #0]
 8004842:	4620      	mov	r0, r4
 8004844:	f000 f82e 	bl	80048a4 <_free_r>
 8004848:	4631      	mov	r1, r6
 800484a:	e7ef      	b.n	800482c <_reclaim_reent+0x80>
 800484c:	2500      	movs	r5, #0
 800484e:	e7ef      	b.n	8004830 <_reclaim_reent+0x84>
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	bf00      	nop
 8004854:	2000005c 	.word	0x2000005c

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4d0d      	ldr	r5, [pc, #52]	; (8004890 <__libc_init_array+0x38>)
 800485c:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 800485e:	1b64      	subs	r4, r4, r5
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	2600      	movs	r6, #0
 8004864:	42a6      	cmp	r6, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	4d0b      	ldr	r5, [pc, #44]	; (8004898 <__libc_init_array+0x40>)
 800486a:	4c0c      	ldr	r4, [pc, #48]	; (800489c <__libc_init_array+0x44>)
 800486c:	f000 f872 	bl	8004954 <_init>
 8004870:	1b64      	subs	r4, r4, r5
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	2600      	movs	r6, #0
 8004876:	42a6      	cmp	r6, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004880:	4798      	blx	r3
 8004882:	3601      	adds	r6, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f855 3b04 	ldr.w	r3, [r5], #4
 800488a:	4798      	blx	r3
 800488c:	3601      	adds	r6, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	08004a68 	.word	0x08004a68
 8004894:	08004a68 	.word	0x08004a68
 8004898:	08004a68 	.word	0x08004a68
 800489c:	08004a6c 	.word	0x08004a6c

080048a0 <__retarget_lock_acquire_recursive>:
 80048a0:	4770      	bx	lr

080048a2 <__retarget_lock_release_recursive>:
 80048a2:	4770      	bx	lr

080048a4 <_free_r>:
 80048a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d044      	beq.n	8004934 <_free_r+0x90>
 80048aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ae:	9001      	str	r0, [sp, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f1a1 0404 	sub.w	r4, r1, #4
 80048b6:	bfb8      	it	lt
 80048b8:	18e4      	addlt	r4, r4, r3
 80048ba:	f000 f83f 	bl	800493c <__malloc_lock>
 80048be:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <_free_r+0x94>)
 80048c0:	9801      	ldr	r0, [sp, #4]
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	b933      	cbnz	r3, 80048d4 <_free_r+0x30>
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	6014      	str	r4, [r2, #0]
 80048ca:	b003      	add	sp, #12
 80048cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048d0:	f000 b83a 	b.w	8004948 <__malloc_unlock>
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d908      	bls.n	80048ea <_free_r+0x46>
 80048d8:	6825      	ldr	r5, [r4, #0]
 80048da:	1961      	adds	r1, r4, r5
 80048dc:	428b      	cmp	r3, r1
 80048de:	bf01      	itttt	eq
 80048e0:	6819      	ldreq	r1, [r3, #0]
 80048e2:	685b      	ldreq	r3, [r3, #4]
 80048e4:	1949      	addeq	r1, r1, r5
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	e7ed      	b.n	80048c6 <_free_r+0x22>
 80048ea:	461a      	mov	r2, r3
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b10b      	cbz	r3, 80048f4 <_free_r+0x50>
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	d9fa      	bls.n	80048ea <_free_r+0x46>
 80048f4:	6811      	ldr	r1, [r2, #0]
 80048f6:	1855      	adds	r5, r2, r1
 80048f8:	42a5      	cmp	r5, r4
 80048fa:	d10b      	bne.n	8004914 <_free_r+0x70>
 80048fc:	6824      	ldr	r4, [r4, #0]
 80048fe:	4421      	add	r1, r4
 8004900:	1854      	adds	r4, r2, r1
 8004902:	42a3      	cmp	r3, r4
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	d1e0      	bne.n	80048ca <_free_r+0x26>
 8004908:	681c      	ldr	r4, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	6053      	str	r3, [r2, #4]
 800490e:	440c      	add	r4, r1
 8004910:	6014      	str	r4, [r2, #0]
 8004912:	e7da      	b.n	80048ca <_free_r+0x26>
 8004914:	d902      	bls.n	800491c <_free_r+0x78>
 8004916:	230c      	movs	r3, #12
 8004918:	6003      	str	r3, [r0, #0]
 800491a:	e7d6      	b.n	80048ca <_free_r+0x26>
 800491c:	6825      	ldr	r5, [r4, #0]
 800491e:	1961      	adds	r1, r4, r5
 8004920:	428b      	cmp	r3, r1
 8004922:	bf04      	itt	eq
 8004924:	6819      	ldreq	r1, [r3, #0]
 8004926:	685b      	ldreq	r3, [r3, #4]
 8004928:	6063      	str	r3, [r4, #4]
 800492a:	bf04      	itt	eq
 800492c:	1949      	addeq	r1, r1, r5
 800492e:	6021      	streq	r1, [r4, #0]
 8004930:	6054      	str	r4, [r2, #4]
 8004932:	e7ca      	b.n	80048ca <_free_r+0x26>
 8004934:	b003      	add	sp, #12
 8004936:	bd30      	pop	{r4, r5, pc}
 8004938:	20001280 	.word	0x20001280

0800493c <__malloc_lock>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__malloc_lock+0x8>)
 800493e:	f7ff bfaf 	b.w	80048a0 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	2000127c 	.word	0x2000127c

08004948 <__malloc_unlock>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__malloc_unlock+0x8>)
 800494a:	f7ff bfaa 	b.w	80048a2 <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	2000127c 	.word	0x2000127c

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr


02_Pre_Emptive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000412c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004380  08004380  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004380  08004380  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000011d4  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001234  20001234  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c321  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f99  00000000  00000000  0002c3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000938  00000000  00000000  0002e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000070a  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000202bc  00000000  00000000  0002f3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c69f  00000000  00000000  0004f68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bfe88  00000000  00000000  0005bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002674  00000000  00000000  0011bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000090  00000000  00000000  0011e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042a4 	.word	0x080042a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080042a4 	.word	0x080042a4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa67 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f83f 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8c7 	bl	80003a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000216:	f000 f895 	bl	8000344 <MX_USART1_UART_Init>
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1_Handler,"Task-1",30,NULL,4,NULL);
 800021a:	2300      	movs	r3, #0
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	2304      	movs	r3, #4
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2300      	movs	r3, #0
 8000224:	221e      	movs	r2, #30
 8000226:	4912      	ldr	r1, [pc, #72]	; (8000270 <main+0x6c>)
 8000228:	4812      	ldr	r0, [pc, #72]	; (8000274 <main+0x70>)
 800022a:	f002 fe68 	bl	8002efe <xTaskCreate>
  xTaskCreate(Task2_Handler,"Task-2",30,NULL,3,NULL);
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2303      	movs	r3, #3
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	221e      	movs	r2, #30
 800023a:	490f      	ldr	r1, [pc, #60]	; (8000278 <main+0x74>)
 800023c:	480f      	ldr	r0, [pc, #60]	; (800027c <main+0x78>)
 800023e:	f002 fe5e 	bl	8002efe <xTaskCreate>
  xTaskCreate(Task3_Handler,"Task-3",30,NULL,2,NULL);
 8000242:	2300      	movs	r3, #0
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2302      	movs	r3, #2
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	221e      	movs	r2, #30
 800024e:	490c      	ldr	r1, [pc, #48]	; (8000280 <main+0x7c>)
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0x80>)
 8000252:	f002 fe54 	bl	8002efe <xTaskCreate>
  xTaskCreate(Task4_Handler,"Task-4",30,NULL,1,NULL);
 8000256:	2300      	movs	r3, #0
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	2301      	movs	r3, #1
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2300      	movs	r3, #0
 8000260:	221e      	movs	r2, #30
 8000262:	4909      	ldr	r1, [pc, #36]	; (8000288 <main+0x84>)
 8000264:	4809      	ldr	r0, [pc, #36]	; (800028c <main+0x88>)
 8000266:	f002 fe4a 	bl	8002efe <xTaskCreate>
  vTaskStartScheduler();
 800026a:	f002 ffc1 	bl	80031f0 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x6a>
 8000270:	080042bc 	.word	0x080042bc
 8000274:	08000451 	.word	0x08000451
 8000278:	080042c4 	.word	0x080042c4
 800027c:	08000479 	.word	0x08000479
 8000280:	080042cc 	.word	0x080042cc
 8000284:	080004a1 	.word	0x080004a1
 8000288:	080042d4 	.word	0x080042d4
 800028c:	080004c9 	.word	0x080004c9

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	; 0x58
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 ff24 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
 80002c2:	615a      	str	r2, [r3, #20]
 80002c4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fd2d 	bl	8000d44 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002f0:	f000 f91c 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030a:	f107 031c 	add.w	r3, r7, #28
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fd55 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800031c:	f000 f906 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000320:	2301      	movs	r3, #1
 8000322:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000328:	463b      	mov	r3, r7
 800032a:	4618      	mov	r0, r3
 800032c:	f001 ff7e 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000336:	f000 f8f9 	bl	800052c <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3758      	adds	r7, #88	; 0x58
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_USART1_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <MX_USART1_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_USART1_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART1_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART1_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART1_UART_Init+0x58>)
 8000388:	f002 f886 	bl	8002498 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f8cb 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000031c 	.word	0x2000031c
 80003a0:	40013800 	.word	0x40013800

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b23      	ldr	r3, [pc, #140]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_GPIO_Init+0xa4>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f0:	4816      	ldr	r0, [pc, #88]	; (800044c <MX_GPIO_Init+0xa8>)
 80003f2:	f000 fc5d 	bl	8000cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fadd 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : green_Pin */
  GPIO_InitStruct.Pin = green_Pin;
 8000412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(green_GPIO_Port, &GPIO_InitStruct);
 8000424:	f107 030c 	add.w	r3, r7, #12
 8000428:	4619      	mov	r1, r3
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <MX_GPIO_Init+0xa8>)
 800042c:	f000 face 	bl	80009cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	2105      	movs	r1, #5
 8000434:	2006      	movs	r0, #6
 8000436:	f000 fa92 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800043a:	2006      	movs	r0, #6
 800043c:	f000 faab 	bl	8000996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	48000400 	.word	0x48000400

08000450 <Task1_Handler>:

/* USER CODE BEGIN 4 */
void Task1_Handler(void *param)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task1: Running\r\n", sizeof("Task1: Running\r\n")-1, HAL_MAX_DELAY);
 8000458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045c:	2210      	movs	r2, #16
 800045e:	4904      	ldr	r1, [pc, #16]	; (8000470 <Task1_Handler+0x20>)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <Task1_Handler+0x24>)
 8000462:	f002 f867 	bl	8002534 <HAL_UART_Transmit>
		vTaskDelay(1000);
 8000466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046a:	f002 fe8d 	bl	8003188 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task1: Running\r\n", sizeof("Task1: Running\r\n")-1, HAL_MAX_DELAY);
 800046e:	e7f3      	b.n	8000458 <Task1_Handler+0x8>
 8000470:	080042dc 	.word	0x080042dc
 8000474:	2000031c 	.word	0x2000031c

08000478 <Task2_Handler>:
	}
}
void Task2_Handler(void *param)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task2: Running\r\n", sizeof("Task2: Running\r\n")-1, HAL_MAX_DELAY);
 8000480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000484:	2210      	movs	r2, #16
 8000486:	4904      	ldr	r1, [pc, #16]	; (8000498 <Task2_Handler+0x20>)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <Task2_Handler+0x24>)
 800048a:	f002 f853 	bl	8002534 <HAL_UART_Transmit>
		vTaskDelay(1000);
 800048e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000492:	f002 fe79 	bl	8003188 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task2: Running\r\n", sizeof("Task2: Running\r\n")-1, HAL_MAX_DELAY);
 8000496:	e7f3      	b.n	8000480 <Task2_Handler+0x8>
 8000498:	080042f0 	.word	0x080042f0
 800049c:	2000031c 	.word	0x2000031c

080004a0 <Task3_Handler>:
	}
}

void Task3_Handler(void *param)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task3: Running\r\n", sizeof("Task3: Running\r\n")-1, HAL_MAX_DELAY);
 80004a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ac:	2210      	movs	r2, #16
 80004ae:	4904      	ldr	r1, [pc, #16]	; (80004c0 <Task3_Handler+0x20>)
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <Task3_Handler+0x24>)
 80004b2:	f002 f83f 	bl	8002534 <HAL_UART_Transmit>
		vTaskDelay(1000);
 80004b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ba:	f002 fe65 	bl	8003188 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task3: Running\r\n", sizeof("Task3: Running\r\n")-1, HAL_MAX_DELAY);
 80004be:	e7f3      	b.n	80004a8 <Task3_Handler+0x8>
 80004c0:	08004304 	.word	0x08004304
 80004c4:	2000031c 	.word	0x2000031c

080004c8 <Task4_Handler>:
	}
}
void Task4_Handler(void *param)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task4: Running\r\n", sizeof("Task4: Running\r\n")-1, HAL_MAX_DELAY);
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d4:	2210      	movs	r2, #16
 80004d6:	4904      	ldr	r1, [pc, #16]	; (80004e8 <Task4_Handler+0x20>)
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <Task4_Handler+0x24>)
 80004da:	f002 f82b 	bl	8002534 <HAL_UART_Transmit>
		vTaskDelay(1000);
 80004de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e2:	f002 fe51 	bl	8003188 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task4: Running\r\n", sizeof("Task4: Running\r\n")-1, HAL_MAX_DELAY);
 80004e6:	e7f3      	b.n	80004d0 <Task4_Handler+0x8>
 80004e8:	08004318 	.word	0x08004318
 80004ec:	2000031c 	.word	0x2000031c

080004f0 <HAL_GPIO_EXTI_Callback>:
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == button_Pin)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d10b      	bne.n	8000518 <HAL_GPIO_EXTI_Callback+0x28>
  {
    HAL_GPIO_TogglePin(green_GPIO_Port,green_Pin);
 8000500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <HAL_GPIO_EXTI_Callback+0x30>)
 8000506:	f000 fbeb 	bl	8000ce0 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)"ISR: Triggered\r\n", sizeof("ISR: Triggered\r\n")-1, HAL_MAX_DELAY);
 800050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050e:	2210      	movs	r2, #16
 8000510:	4904      	ldr	r1, [pc, #16]	; (8000524 <HAL_GPIO_EXTI_Callback+0x34>)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_GPIO_EXTI_Callback+0x38>)
 8000514:	f002 f80e 	bl	8002534 <HAL_UART_Transmit>
  }
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000400 	.word	0x48000400
 8000524:	0800432c 	.word	0x0800432c
 8000528:	2000031c 	.word	0x2000031c

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_MspInit+0x4c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <HAL_MspInit+0x4c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_MspInit+0x4c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_MspInit+0x4c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <HAL_MspInit+0x4c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_MspInit+0x4c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 f9f2 	bl	800095e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <HAL_UART_MspInit+0x7c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d127      	bne.n	80005fa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a10      	ldr	r2, [pc, #64]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_UART_MspInit+0x80>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005da:	23c0      	movs	r3, #192	; 0xc0
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ea:	2307      	movs	r3, #7
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <HAL_UART_MspInit+0x84>)
 80005f6:	f000 f9e9 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005fa:	bf00      	nop
 80005fc:	3728      	adds	r7, #40	; 0x28
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40013800 	.word	0x40013800
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f892 	bl	8000768 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000644:	f003 f8e8 	bl	8003818 <xTaskGetSchedulerState>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d001      	beq.n	8000652 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800064e:	f003 fb23 	bl	8003c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fb5a 	bl	8000d14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f003 fd77 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fda3 	bl	8000204 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006cc:	08004388 	.word	0x08004388
  ldr r2, =_sbss
 80006d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006d4:	20001234 	.word	0x20001234

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f92b 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff ff1e 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f943 	bl	80009b2 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000744:	f000 f90b 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008
 800078c:	200003a4 	.word	0x200003a4

08000790 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;  
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200003a4 	.word	0x200003a4

080007a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x44>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	; 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff29 	bl	80007a8 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff3e 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff31 	bl	800080c <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009da:	e14e      	b.n	8000c7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8140 	beq.w	8000c74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d005      	beq.n	8000a0c <HAL_GPIO_Init+0x40>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d130      	bne.n	8000a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	2203      	movs	r2, #3
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a42:	2201      	movs	r2, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	091b      	lsrs	r3, r3, #4
 8000a58:	f003 0201 	and.w	r2, r3, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d017      	beq.n	8000aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d123      	bne.n	8000afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3208      	adds	r2, #8
 8000abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	691a      	ldr	r2, [r3, #16]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	08da      	lsrs	r2, r3, #3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3208      	adds	r2, #8
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0203 	and.w	r2, r3, #3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 809a 	beq.w	8000c74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	4b55      	ldr	r3, [pc, #340]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a54      	ldr	r2, [pc, #336]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b58:	4a50      	ldr	r2, [pc, #320]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b82:	d013      	beq.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a46      	ldr	r2, [pc, #280]	; (8000ca0 <HAL_GPIO_Init+0x2d4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_GPIO_Init+0x1dc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a45      	ldr	r2, [pc, #276]	; (8000ca4 <HAL_GPIO_Init+0x2d8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_Init+0x1d8>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a44      	ldr	r2, [pc, #272]	; (8000ca8 <HAL_GPIO_Init+0x2dc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <HAL_GPIO_Init+0x1d4>
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e006      	b.n	8000bae <HAL_GPIO_Init+0x1e2>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e004      	b.n	8000bae <HAL_GPIO_Init+0x1e2>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x1e2>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <HAL_GPIO_Init+0x1e2>
 8000bac:	2300      	movs	r3, #0
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	f002 0203 	and.w	r2, r2, #3
 8000bb4:	0092      	lsls	r2, r2, #2
 8000bb6:	4093      	lsls	r3, r2
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bbe:	4937      	ldr	r1, [pc, #220]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c1a:	4a24      	ldr	r2, [pc, #144]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_GPIO_Init+0x2e0>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa22 f303 	lsr.w	r3, r2, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f47f aea9 	bne.w	80009dc <HAL_GPIO_Init+0x10>
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43d9      	mvns	r1, r3
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	400b      	ands	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fbdc 	bl	80004f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f001 b823 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 817d 	beq.w	800107a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d80:	4bbc      	ldr	r3, [pc, #752]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d00c      	beq.n	8000da6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4bb9      	ldr	r3, [pc, #740]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d15c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x10e>
 8000d98:	4bb6      	ldr	r3, [pc, #728]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da4:	d155      	bne.n	8000e52 <HAL_RCC_OscConfig+0x10e>
 8000da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000daa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d102      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x94>
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	e015      	b.n	8000e04 <HAL_RCC_OscConfig+0xc0>
 8000dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ddc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000df4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e00:	4b9c      	ldr	r3, [pc, #624]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e10:	fa92 f2a2 	rbit	r2, r2
 8000e14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e1c:	fab2 f282 	clz	r2, r2
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	f042 0220 	orr.w	r2, r2, #32
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	f002 021f 	and.w	r2, r2, #31
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 811f 	beq.w	8001078 <HAL_RCC_OscConfig+0x334>
 8000e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f040 8116 	bne.w	8001078 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f000 bfaf 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e62:	d106      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12e>
 8000e64:	4b83      	ldr	r3, [pc, #524]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a82      	ldr	r2, [pc, #520]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e036      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x158>
 8000e82:	4b7c      	ldr	r3, [pc, #496]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7b      	ldr	r2, [pc, #492]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b79      	ldr	r3, [pc, #484]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a78      	ldr	r2, [pc, #480]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e021      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x184>
 8000eae:	4b71      	ldr	r3, [pc, #452]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a70      	ldr	r2, [pc, #448]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6d      	ldr	r2, [pc, #436]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0x19c>
 8000ec8:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a69      	ldr	r2, [pc, #420]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b67      	ldr	r3, [pc, #412]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a66      	ldr	r2, [pc, #408]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ee0:	4b64      	ldr	r3, [pc, #400]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f023 020f 	bic.w	r2, r3, #15
 8000ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	495f      	ldr	r1, [pc, #380]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d059      	beq.n	8000fbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc41 	bl	8000790 <HAL_GetTick>
 8000f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc3c 	bl	8000790 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d902      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f000 bf43 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8000f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <HAL_RCC_OscConfig+0x218>
 8000f56:	4b47      	ldr	r3, [pc, #284]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	e015      	b.n	8000f88 <HAL_RCC_OscConfig+0x244>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f94:	fa92 f2a2 	rbit	r2, r2
 8000f98:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f002 021f 	and.w	r2, r2, #31
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0ab      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1d0>
 8000fbc:	e05d      	b.n	800107a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fbe7 	bl	8000790 <HAL_GetTick>
 8000fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fbe2 	bl	8000790 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	; 0x64
 8000fd6:	d902      	bls.n	8000fde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f000 bee9 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8000fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x2cc>
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	e015      	b.n	800103c <HAL_RCC_OscConfig+0x2f8>
 8001010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001014:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001018:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800102c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_RCC_OscConfig+0x330>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001040:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001044:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001048:	fa92 f2a2 	rbit	r2, r2
 800104c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001050:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001054:	fab2 f282 	clz	r2, r2
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f042 0220 	orr.w	r2, r2, #32
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f002 021f 	and.w	r2, r2, #31
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1ab      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x284>
 8001070:	e003      	b.n	800107a <HAL_RCC_OscConfig+0x336>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 817d 	beq.w	800138a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001090:	4ba6      	ldr	r3, [pc, #664]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800109c:	4ba3      	ldr	r3, [pc, #652]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d172      	bne.n	800118e <HAL_RCC_OscConfig+0x44a>
 80010a8:	4ba0      	ldr	r3, [pc, #640]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d16c      	bne.n	800118e <HAL_RCC_OscConfig+0x44a>
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x3a0>
 80010de:	4b93      	ldr	r3, [pc, #588]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e013      	b.n	800110c <HAL_RCC_OscConfig+0x3c8>
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001108:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	2202      	movs	r2, #2
 800110e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001112:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001116:	fa92 f2a2 	rbit	r2, r2
 800111a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800111e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f002 021f 	and.w	r2, r2, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_RCC_OscConfig+0x410>
 800113e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d002      	beq.n	8001154 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 be2e 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b75      	ldr	r3, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001160:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	21f8      	movs	r1, #248	; 0xf8
 800116a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001172:	fa91 f1a1 	rbit	r1, r1
 8001176:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800117a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800117e:	fab1 f181 	clz	r1, r1
 8001182:	b2c9      	uxtb	r1, r1
 8001184:	408b      	lsls	r3, r1
 8001186:	4969      	ldr	r1, [pc, #420]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118c:	e0fd      	b.n	800138a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8088 	beq.w	80012b0 <HAL_RCC_OscConfig+0x56c>
 80011a0:	2301      	movs	r3, #1
 80011a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	fab3 f383 	clz	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fae0 	bl	8000790 <HAL_GetTick>
 80011d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d6:	f7ff fadb 	bl	8000790 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d902      	bls.n	80011ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f000 bde2 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x4d8>
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x500>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001234:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2202      	movs	r2, #2
 8001246:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800124a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001256:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0af      	beq.n	80011d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	21f8      	movs	r1, #248	; 0xf8
 800128c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001294:	fa91 f1a1 	rbit	r1, r1
 8001298:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800129c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012a0:	fab1 f181 	clz	r1, r1
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	408b      	lsls	r3, r1
 80012a8:	4920      	ldr	r1, [pc, #128]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
 80012ae:	e06c      	b.n	800138a <HAL_RCC_OscConfig+0x646>
 80012b0:	2301      	movs	r3, #1
 80012b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012ba:	fa93 f3a3 	rbit	r3, r3
 80012be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	461a      	mov	r2, r3
 80012d8:	2300      	movs	r3, #0
 80012da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fa58 	bl	8000790 <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fa53 	bl	8000790 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d902      	bls.n	80012fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 bd5a 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800130e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d104      	bne.n	8001330 <HAL_RCC_OscConfig+0x5ec>
 8001326:	4b01      	ldr	r3, [pc, #4]	; (800132c <HAL_RCC_OscConfig+0x5e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e015      	b.n	8001358 <HAL_RCC_OscConfig+0x614>
 800132c:	40021000 	.word	0x40021000
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001354:	4bc8      	ldr	r3, [pc, #800]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800135e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001362:	fa92 f2a2 	rbit	r2, r2
 8001366:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800136a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f002 021f 	and.w	r2, r2, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ad      	bne.n	80012e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8110 	beq.w	80015c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d079      	beq.n	80014a4 <HAL_RCC_OscConfig+0x760>
 80013b0:	2301      	movs	r3, #1
 80013b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4bab      	ldr	r3, [pc, #684]	; (800167c <HAL_RCC_OscConfig+0x938>)
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	461a      	mov	r2, r3
 80013d6:	2301      	movs	r3, #1
 80013d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff f9d9 	bl	8000790 <HAL_GetTick>
 80013de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff f9d4 	bl	8000790 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d902      	bls.n	80013fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f000 bcdb 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001452:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 8001456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001460:	2102      	movs	r1, #2
 8001462:	6019      	str	r1, [r3, #0]
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f1a3 	rbit	r1, r3
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147a:	6019      	str	r1, [r3, #0]
  return result;
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0a0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x6a0>
 80014a2:	e08d      	b.n	80015c0 <HAL_RCC_OscConfig+0x87c>
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fa93 f2a3 	rbit	r2, r3
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c6:	601a      	str	r2, [r3, #0]
  return result;
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x938>)
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f953 	bl	8000790 <HAL_GetTick>
 80014ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff f94e 	bl	8000790 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d902      	bls.n	8001506 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	f000 bc55 	b.w	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 8001574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800157e:	2102      	movs	r1, #2
 8001580:	6019      	str	r1, [r3, #0]
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f1a3 	rbit	r1, r3
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001598:	6019      	str	r1, [r3, #0]
  return result;
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d197      	bne.n	80014f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 81a1 	beq.w	8001918 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	4a22      	ldr	r2, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	61d3      	str	r3, [r2, #28]
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800160e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d11a      	bne.n	8001658 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_RCC_OscConfig+0x93c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff f8af 	bl	8000790 <HAL_GetTick>
 8001632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	e009      	b.n	800164c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff f8aa 	bl	8000790 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	; 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e3b1      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_RCC_OscConfig+0x93c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ef      	beq.n	8001638 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x940>
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a02      	ldr	r2, [pc, #8]	; (8001678 <HAL_RCC_OscConfig+0x934>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e03c      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	10908120 	.word	0x10908120
 8001680:	40007000 	.word	0x40007000
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x96a>
 8001694:	4bc1      	ldr	r3, [pc, #772]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4ac0      	ldr	r2, [pc, #768]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4bbe      	ldr	r3, [pc, #760]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4abd      	ldr	r2, [pc, #756]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e020      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x994>
 80016be:	4bb7      	ldr	r3, [pc, #732]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4ab6      	ldr	r2, [pc, #728]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4bb4      	ldr	r3, [pc, #720]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4ab3      	ldr	r2, [pc, #716]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x9ac>
 80016d8:	4bb0      	ldr	r3, [pc, #704]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4aaf      	ldr	r2, [pc, #700]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4bad      	ldr	r3, [pc, #692]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4aac      	ldr	r2, [pc, #688]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8081 	beq.w	8001804 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001702:	f7ff f845 	bl	8000790 <HAL_GetTick>
 8001706:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff f840 	bl	8000790 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e345      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800176a:	601a      	str	r2, [r3, #0]
  return result;
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0xa4c>
 800178a:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0xa74>
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017c0:	2102      	movs	r1, #2
 80017c2:	6011      	str	r1, [r2, #0]
 80017c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	fa92 f1a2 	rbit	r1, r2
 80017d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017da:	6011      	str	r1, [r2, #0]
  return result;
 80017dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fab2 f282 	clz	r2, r2
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f002 021f 	and.w	r2, r2, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d084      	beq.n	800170c <HAL_RCC_OscConfig+0x9c8>
 8001802:	e07f      	b.n	8001904 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe ffc4 	bl	8000790 <HAL_GetTick>
 8001808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00b      	b.n	8001826 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7fe ffbf 	bl	8000790 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e2c4      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800182e:	2202      	movs	r2, #2
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800186c:	601a      	str	r2, [r3, #0]
  return result;
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001876:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	fab3 f383 	clz	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d102      	bne.n	8001892 <HAL_RCC_OscConfig+0xb4e>
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	e013      	b.n	80018ba <HAL_RCC_OscConfig+0xb76>
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800189a:	2202      	movs	r2, #2
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018c2:	2102      	movs	r1, #2
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	fa92 f1a2 	rbit	r1, r2
 80018d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018dc:	6011      	str	r1, [r2, #0]
  return result;
 80018de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fab2 f282 	clz	r2, r2
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d184      	bne.n	800180e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001904:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8242 	beq.w	8001dae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_RCC_OscConfig+0xc58>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	f000 8213 	beq.w	8001d5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b02      	cmp	r3, #2
 8001946:	f040 8162 	bne.w	8001c0e <HAL_RCC_OscConfig+0xeca>
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800196e:	601a      	str	r2, [r3, #0]
  return result;
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001978:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001984:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	461a      	mov	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7fe fefe 	bl	8000790 <HAL_GetTick>
 8001994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	e00c      	b.n	80019b4 <HAL_RCC_OscConfig+0xc70>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7fe fef6 	bl	8000790 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1fd      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d8:	601a      	str	r2, [r3, #0]
  return result;
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0xcba>
 80019f8:	4bb0      	ldr	r3, [pc, #704]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e027      	b.n	8001a4e <HAL_RCC_OscConfig+0xd0a>
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4b9c      	ldr	r3, [pc, #624]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a5a:	6011      	str	r1, [r2, #0]
 8001a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	fa92 f1a2 	rbit	r1, r2
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a72:	6011      	str	r1, [r2, #0]
  return result;
 8001a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d182      	bne.n	80019a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	430b      	orrs	r3, r1
 8001abc:	497f      	ldr	r1, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ae6:	601a      	str	r2, [r3, #0]
  return result;
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001af0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	461a      	mov	r2, r3
 8001b04:	2301      	movs	r3, #1
 8001b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7fe fe42 	bl	8000790 <HAL_GetTick>
 8001b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e009      	b.n	8001b26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe fe3d 	bl	8000790 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e144      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b4a:	601a      	str	r2, [r3, #0]
  return result;
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_OscConfig+0xe2c>
 8001b6a:	4b54      	ldr	r3, [pc, #336]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_OscConfig+0xe7c>
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	fa92 f1a2 	rbit	r1, r2
 8001bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d082      	beq.n	8001b12 <HAL_RCC_OscConfig+0xdce>
 8001c0c:	e0cf      	b.n	8001dae <HAL_RCC_OscConfig+0x106a>
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fd9c 	bl	8000790 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fd97 	bl	8000790 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e09e      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d104      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xf7c>
 8001cb6:	4b01      	ldr	r3, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0xf78>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e029      	b.n	8001d10 <HAL_RCC_OscConfig+0xfcc>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x1078>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fa92 f1a2 	rbit	r1, r2
 8001d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d34:	6011      	str	r1, [r2, #0]
  return result;
 8001d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d180      	bne.n	8001c5e <HAL_RCC_OscConfig+0xf1a>
 8001d5c:	e027      	b.n	8001dae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01e      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_OscConfig+0x1078>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d10b      	bne.n	8001daa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09e      	sub	sp, #120	; 0x78
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e162      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b90      	ldr	r3, [pc, #576]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b8d      	ldr	r3, [pc, #564]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	498b      	ldr	r1, [pc, #556]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e14a      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b82      	ldr	r3, [pc, #520]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	497f      	ldr	r1, [pc, #508]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80dc 	beq.w	8001fec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d13c      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xf6>
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xa6>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e00f      	b.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
 8001e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
 8001e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e78:	663b      	str	r3, [r7, #96]	; 0x60
 8001e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8e:	fa92 f2a2 	rbit	r2, r2
 8001e92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d17b      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0f3      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d13c      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x178>
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x128>
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_ClockConfig+0x148>
 8001ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
 8001efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f04:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13a      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b2      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x1a0>
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e00d      	b.n	8001f7c <HAL_RCC_ClockConfig+0x1bc>
 8001f60:	2302      	movs	r3, #2
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	61ba      	str	r2, [r7, #24]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	fa92 f2a2 	rbit	r2, r2
 8001f86:	617a      	str	r2, [r7, #20]
  return result;
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e079      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	491a      	ldr	r1, [pc, #104]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fbe8 	bl	8000790 <HAL_GetTick>
 8001fc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fbe4 	bl	8000790 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e061      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d214      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4906      	ldr	r1, [pc, #24]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_RCC_ClockConfig+0x25c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e040      	b.n	800209e <HAL_RCC_ClockConfig+0x2de>
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	491a      	ldr	r1, [pc, #104]	; (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4912      	ldr	r1, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002062:	f000 f829 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002066:	4601      	mov	r1, r0
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_RCC_ClockConfig+0x2e8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002070:	22f0      	movs	r2, #240	; 0xf0
 8002072:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	60fa      	str	r2, [r7, #12]
  return result;
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	fab2 f282 	clz	r2, r2
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	40d3      	lsrs	r3, r2
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x2ec>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	fa21 f303 	lsr.w	r3, r1, r3
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fb36 	bl	8000708 <HAL_InitTick>
  
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3778      	adds	r7, #120	; 0x78
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08004348 	.word	0x08004348
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	e03c      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e03c      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	fa92 f2a2 	rbit	r2, r2
 8002100:	607a      	str	r2, [r7, #4]
  return result;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	fab2 f282 	clz	r2, r2
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	40d3      	lsrs	r3, r2
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_RCC_GetSysClockFreq+0xc8>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	220f      	movs	r2, #15
 800211c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	60fa      	str	r2, [r7, #12]
  return result;
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	fab2 f282 	clz	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	40d3      	lsrs	r3, r2
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	fbb2 f2f3 	udiv	r2, r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	e004      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	623b      	str	r3, [r7, #32]
      break;
 8002160:	e002      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002164:	623b      	str	r3, [r7, #32]
      break;
 8002166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002168:	6a3b      	ldr	r3, [r7, #32]
}
 800216a:	4618      	mov	r0, r3
 800216c:	372c      	adds	r7, #44	; 0x2c
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	007a1200 	.word	0x007a1200
 8002180:	08004360 	.word	0x08004360
 8002184:	08004370 	.word	0x08004370
 8002188:	003d0900 	.word	0x003d0900

0800218c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021aa:	f7ff ffef 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	603a      	str	r2, [r7, #0]
  return result;
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08004358 	.word	0x08004358

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ee:	f7ff ffcd 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	fa92 f2a2 	rbit	r2, r2
 8002208:	603a      	str	r2, [r7, #0]
  return result;
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	40d3      	lsrs	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08004358 	.word	0x08004358

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b092      	sub	sp, #72	; 0x48
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80cd 	beq.w	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002250:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10e      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002266:	61d3      	str	r3, [r2, #28]
 8002268:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a81      	ldr	r2, [pc, #516]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe fa7d 	bl	8000790 <HAL_GetTick>
 8002296:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e008      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229a:	f7fe fa79 	bl	8000790 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b64      	cmp	r3, #100	; 0x64
 80022a6:	d901      	bls.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0ea      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022b8:	4b74      	ldr	r3, [pc, #464]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d07d      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d076      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	461a      	mov	r2, r3
 8002300:	2301      	movs	r3, #1
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800232c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d045      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fa2a 	bl	8000790 <HAL_GetTick>
 800233c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe fa26 	bl	8000790 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e095      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002356:	2302      	movs	r3, #2
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	61fb      	str	r3, [r7, #28]
  return result;
 800236e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d102      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002384:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	e007      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2202      	movs	r2, #2
 800239c:	613a      	str	r2, [r7, #16]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	fa92 f2a2 	rbit	r2, r2
 80023a4:	60fa      	str	r2, [r7, #12]
  return result;
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f002 021f 	and.w	r2, r2, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0bd      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	492e      	ldr	r1, [pc, #184]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f6:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	4313      	orrs	r3, r2
 8002406:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f023 0210 	bic.w	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	491a      	ldr	r1, [pc, #104]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	4313      	orrs	r3, r2
 8002424:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	4913      	ldr	r1, [pc, #76]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	490b      	ldr	r1, [pc, #44]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	4313      	orrs	r3, r2
 8002460:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3748      	adds	r7, #72	; 0x48
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	10908100 	.word	0x10908100

08002498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e040      	b.n	800252c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f864 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f8b6 	bl	8002648 <UART_SetConfig>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9e0 	bl	80028b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fa67 	bl	80029f8 <UART_CheckIdleState>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002548:	2b20      	cmp	r3, #32
 800254a:	d178      	bne.n	800263e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Transmit+0x24>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e071      	b.n	8002640 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2221      	movs	r2, #33	; 0x21
 8002568:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7fe f911 	bl	8000790 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x68>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e030      	b.n	8002608 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fac9 	bl	8002b48 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e03c      	b.n	8002640 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d8:	b292      	uxth	r2, r2
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	3302      	adds	r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	e008      	b.n	80025f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b292      	uxth	r2, r2
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1c8      	bne.n	80025a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2200      	movs	r2, #0
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fa92 	bl	8002b48 <UART_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e005      	b.n	8002640 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b8a      	ldr	r3, [pc, #552]	; (800289c <UART_SetConfig+0x254>)
 8002674:	4013      	ands	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	6979      	ldr	r1, [r7, #20]
 800267c:	430b      	orrs	r3, r1
 800267e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a78      	ldr	r2, [pc, #480]	; (80028a0 <UART_SetConfig+0x258>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d120      	bne.n	8002706 <UART_SetConfig+0xbe>
 80026c4:	4b77      	ldr	r3, [pc, #476]	; (80028a4 <UART_SetConfig+0x25c>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d817      	bhi.n	8002700 <UART_SetConfig+0xb8>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <UART_SetConfig+0x90>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	080026fb 	.word	0x080026fb
 80026e4:	080026ef 	.word	0x080026ef
 80026e8:	2300      	movs	r3, #0
 80026ea:	77fb      	strb	r3, [r7, #31]
 80026ec:	e01d      	b.n	800272a <UART_SetConfig+0xe2>
 80026ee:	2302      	movs	r3, #2
 80026f0:	77fb      	strb	r3, [r7, #31]
 80026f2:	e01a      	b.n	800272a <UART_SetConfig+0xe2>
 80026f4:	2304      	movs	r3, #4
 80026f6:	77fb      	strb	r3, [r7, #31]
 80026f8:	e017      	b.n	800272a <UART_SetConfig+0xe2>
 80026fa:	2308      	movs	r3, #8
 80026fc:	77fb      	strb	r3, [r7, #31]
 80026fe:	e014      	b.n	800272a <UART_SetConfig+0xe2>
 8002700:	2310      	movs	r3, #16
 8002702:	77fb      	strb	r3, [r7, #31]
 8002704:	e011      	b.n	800272a <UART_SetConfig+0xe2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <UART_SetConfig+0x260>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <UART_SetConfig+0xce>
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e009      	b.n	800272a <UART_SetConfig+0xe2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a64      	ldr	r2, [pc, #400]	; (80028ac <UART_SetConfig+0x264>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d102      	bne.n	8002726 <UART_SetConfig+0xde>
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e001      	b.n	800272a <UART_SetConfig+0xe2>
 8002726:	2310      	movs	r3, #16
 8002728:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002732:	d15a      	bne.n	80027ea <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002734:	7ffb      	ldrb	r3, [r7, #31]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d827      	bhi.n	800278a <UART_SetConfig+0x142>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <UART_SetConfig+0xf8>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002765 	.word	0x08002765
 8002744:	0800276d 	.word	0x0800276d
 8002748:	08002775 	.word	0x08002775
 800274c:	0800278b 	.word	0x0800278b
 8002750:	0800277b 	.word	0x0800277b
 8002754:	0800278b 	.word	0x0800278b
 8002758:	0800278b 	.word	0x0800278b
 800275c:	0800278b 	.word	0x0800278b
 8002760:	08002783 	.word	0x08002783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff fd1e 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002768:	61b8      	str	r0, [r7, #24]
        break;
 800276a:	e013      	b.n	8002794 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800276c:	f7ff fd3c 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002770:	61b8      	str	r0, [r7, #24]
        break;
 8002772:	e00f      	b.n	8002794 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <UART_SetConfig+0x268>)
 8002776:	61bb      	str	r3, [r7, #24]
        break;
 8002778:	e00c      	b.n	8002794 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277a:	f7ff fc9d 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 800277e:	61b8      	str	r0, [r7, #24]
        break;
 8002780:	e008      	b.n	8002794 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002786:	61bb      	str	r3, [r7, #24]
        break;
 8002788:	e004      	b.n	8002794 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	77bb      	strb	r3, [r7, #30]
        break;
 8002792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d074      	beq.n	8002884 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	005a      	lsls	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d916      	bls.n	80027e4 <UART_SetConfig+0x19c>
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d212      	bcs.n	80027e4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	89fa      	ldrh	r2, [r7, #14]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e04f      	b.n	8002884 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	77bb      	strb	r3, [r7, #30]
 80027e8:	e04c      	b.n	8002884 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d828      	bhi.n	8002842 <UART_SetConfig+0x1fa>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <UART_SetConfig+0x1b0>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800281d 	.word	0x0800281d
 80027fc:	08002825 	.word	0x08002825
 8002800:	0800282d 	.word	0x0800282d
 8002804:	08002843 	.word	0x08002843
 8002808:	08002833 	.word	0x08002833
 800280c:	08002843 	.word	0x08002843
 8002810:	08002843 	.word	0x08002843
 8002814:	08002843 	.word	0x08002843
 8002818:	0800283b 	.word	0x0800283b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800281c:	f7ff fcc2 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002820:	61b8      	str	r0, [r7, #24]
        break;
 8002822:	e013      	b.n	800284c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fce0 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002828:	61b8      	str	r0, [r7, #24]
        break;
 800282a:	e00f      	b.n	800284c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <UART_SetConfig+0x268>)
 800282e:	61bb      	str	r3, [r7, #24]
        break;
 8002830:	e00c      	b.n	800284c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002832:	f7ff fc41 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002836:	61b8      	str	r0, [r7, #24]
        break;
 8002838:	e008      	b.n	800284c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800283a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283e:	61bb      	str	r3, [r7, #24]
        break;
 8002840:	e004      	b.n	800284c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	77bb      	strb	r3, [r7, #30]
        break;
 800284a:	bf00      	nop
    }

    if (pclk != 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d018      	beq.n	8002884 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	085a      	lsrs	r2, r3, #1
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	441a      	add	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d909      	bls.n	8002880 <UART_SetConfig+0x238>
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002872:	d205      	bcs.n	8002880 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e001      	b.n	8002884 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002890:	7fbb      	ldrb	r3, [r7, #30]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	efff69f3 	.word	0xefff69f3
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40004400 	.word	0x40004400
 80028ac:	40004800 	.word	0x40004800
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01a      	beq.n	80029ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b2:	d10a      	bne.n	80029ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  }
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b098      	sub	sp, #96	; 0x60
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a08:	f7fd fec2 	bl	8000790 <HAL_GetTick>
 8002a0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d12e      	bne.n	8002a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f88c 	bl	8002b48 <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d021      	beq.n	8002a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
 8002a56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e6      	bne.n	8002a36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e062      	b.n	8002b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d149      	bne.n	8002b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a90:	2200      	movs	r2, #0
 8002a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f856 	bl	8002b48 <UART_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03c      	beq.n	8002b1c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	623b      	str	r3, [r7, #32]
   return(result);
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e6      	bne.n	8002aa2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3308      	adds	r3, #8
 8002ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	617b      	str	r3, [r7, #20]
   return(result);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e5      	bne.n	8002ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e011      	b.n	8002b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3758      	adds	r7, #88	; 0x58
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b58:	e049      	b.n	8002bee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b60:	d045      	beq.n	8002bee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b62:	f7fd fe15 	bl	8000790 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e048      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d031      	beq.n	8002bee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d110      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f838 	bl	8002c16 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e029      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc8:	d111      	bne.n	8002bee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f81e 	bl	8002c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d0a6      	beq.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b095      	sub	sp, #84	; 0x54
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e6      	bne.n	8002c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3308      	adds	r3, #8
 8002c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d118      	bne.n	8002cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f023 0310 	bic.w	r3, r3, #16
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e6      	bne.n	8002c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002cd2:	bf00      	nop
 8002cd4:	3754      	adds	r7, #84	; 0x54
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f103 0208 	add.w	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f103 0208 	add.w	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0208 	add.w	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d96:	d103      	bne.n	8002da0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e00c      	b.n	8002dba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3308      	adds	r3, #8
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e002      	b.n	8002dae <vListInsert+0x2e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d2f6      	bcs.n	8002da8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6852      	ldr	r2, [r2, #4]
 8002e12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d103      	bne.n	8002e26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1e5a      	subs	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08e      	sub	sp, #56	; 0x38
 8002e4a:	af04      	add	r7, sp, #16
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <xTaskCreateStatic+0x46>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	61fb      	str	r3, [r7, #28]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e8c:	23a0      	movs	r3, #160	; 0xa0
 8002e8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2ba0      	cmp	r3, #160	; 0xa0
 8002e94:	d00a      	beq.n	8002eac <xTaskCreateStatic+0x66>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	61bb      	str	r3, [r7, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01e      	beq.n	8002ef0 <xTaskCreateStatic+0xaa>
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	f107 0314 	add.w	r3, r7, #20
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f850 	bl	8002f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eea:	f000 f8e3 	bl	80030b4 <prvAddNewTaskToReadyList>
 8002eee:	e001      	b.n	8002ef4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ef4:	697b      	ldr	r3, [r7, #20]
	}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08c      	sub	sp, #48	; 0x30
 8002f02:	af04      	add	r7, sp, #16
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ff10 	bl	8003d38 <pvPortMalloc>
 8002f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f20:	20a0      	movs	r0, #160	; 0xa0
 8002f22:	f000 ff09 	bl	8003d38 <pvPortMalloc>
 8002f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
 8002f34:	e005      	b.n	8002f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f000 ffc2 	bl	8003ec0 <vPortFree>
 8002f3c:	e001      	b.n	8002f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d017      	beq.n	8002f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	2300      	movs	r3, #0
 8002f54:	9303      	str	r3, [sp, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f80e 	bl	8002f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f6c:	69f8      	ldr	r0, [r7, #28]
 8002f6e:	f000 f8a1 	bl	80030b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e002      	b.n	8002f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	617b      	str	r3, [r7, #20]
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e012      	b.n	8002ffc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3334      	adds	r3, #52	; 0x34
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	d9e9      	bls.n	8002fd6 <prvInitialiseNewTask+0x4e>
 8003002:	e000      	b.n	8003006 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003004:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	2b06      	cmp	r3, #6
 8003012:	d901      	bls.n	8003018 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003014:	2306      	movs	r3, #6
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	2200      	movs	r2, #0
 8003028:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe75 	bl	8002d1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3318      	adds	r3, #24
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe70 	bl	8002d1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	f1c3 0207 	rsb	r2, r3, #7
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	2200      	movs	r2, #0
 8003060:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	334c      	adds	r3, #76	; 0x4c
 8003068:	224c      	movs	r2, #76	; 0x4c
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f001 f83d 	bl	80040ec <memset>
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <prvInitialiseNewTask+0x120>)
 8003076:	651a      	str	r2, [r3, #80]	; 0x50
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <prvInitialiseNewTask+0x124>)
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <prvInitialiseNewTask+0x128>)
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	69b8      	ldr	r0, [r7, #24]
 800308a:	f000 fc49 	bl	8003920 <pxPortInitialiseStack>
 800308e:	4602      	mov	r2, r0
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200010f4 	.word	0x200010f4
 80030ac:	2000115c 	.word	0x2000115c
 80030b0:	200011c4 	.word	0x200011c4

080030b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030bc:	f000 fd5a 	bl	8003b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030c0:	4b2a      	ldr	r3, [pc, #168]	; (800316c <prvAddNewTaskToReadyList+0xb8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <prvAddNewTaskToReadyList+0xb8>)
 80030c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <prvAddNewTaskToReadyList+0xbc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030d2:	4a27      	ldr	r2, [pc, #156]	; (8003170 <prvAddNewTaskToReadyList+0xbc>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <prvAddNewTaskToReadyList+0xb8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d110      	bne.n	8003102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030e0:	f000 fad2 	bl	8003688 <prvInitialiseTaskLists>
 80030e4:	e00d      	b.n	8003102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <prvAddNewTaskToReadyList+0xc0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <prvAddNewTaskToReadyList+0xbc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d802      	bhi.n	8003102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <prvAddNewTaskToReadyList+0xbc>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <prvAddNewTaskToReadyList+0xc4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <prvAddNewTaskToReadyList+0xc4>)
 800310a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <prvAddNewTaskToReadyList+0xc8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4313      	orrs	r3, r2
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <prvAddNewTaskToReadyList+0xc8>)
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4a15      	ldr	r2, [pc, #84]	; (8003180 <prvAddNewTaskToReadyList+0xcc>)
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f7ff fdff 	bl	8002d38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800313a:	f000 fd4b 	bl	8003bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <prvAddNewTaskToReadyList+0xc0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <prvAddNewTaskToReadyList+0xbc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d207      	bcs.n	8003164 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <prvAddNewTaskToReadyList+0xd0>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200004a8 	.word	0x200004a8
 8003170:	200003a8 	.word	0x200003a8
 8003174:	200004b4 	.word	0x200004b4
 8003178:	200004c4 	.word	0x200004c4
 800317c:	200004b0 	.word	0x200004b0
 8003180:	200003ac 	.word	0x200003ac
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <vTaskDelay+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <vTaskDelay+0x30>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	60bb      	str	r3, [r7, #8]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031b8:	f000 f884 	bl	80032c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031bc:	2100      	movs	r1, #0
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb48 	bl	8003854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031c4:	f000 f88c 	bl	80032e0 <xTaskResumeAll>
 80031c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <vTaskDelay+0x64>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	200004d0 	.word	0x200004d0
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031fe:	463a      	mov	r2, r7
 8003200:	1d39      	adds	r1, r7, #4
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	4618      	mov	r0, r3
 8003208:	f7fc ffe2 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	9202      	str	r2, [sp, #8]
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	460a      	mov	r2, r1
 800321e:	4921      	ldr	r1, [pc, #132]	; (80032a4 <vTaskStartScheduler+0xb4>)
 8003220:	4821      	ldr	r0, [pc, #132]	; (80032a8 <vTaskStartScheduler+0xb8>)
 8003222:	f7ff fe10 	bl	8002e46 <xTaskCreateStatic>
 8003226:	4603      	mov	r3, r0
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <vTaskStartScheduler+0xbc>)
 800322a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800322c:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <vTaskStartScheduler+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003234:	2301      	movs	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e001      	b.n	800323e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d11b      	bne.n	800327c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	613b      	str	r3, [r7, #16]
}
 8003256:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <vTaskStartScheduler+0xc0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	334c      	adds	r3, #76	; 0x4c
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <vTaskStartScheduler+0xc4>)
 8003260:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <vTaskStartScheduler+0xc8>)
 8003264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003268:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <vTaskStartScheduler+0xcc>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <vTaskStartScheduler+0xd0>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003276:	f000 fbdb 	bl	8003a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800327a:	e00e      	b.n	800329a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003282:	d10a      	bne.n	800329a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	60fb      	str	r3, [r7, #12]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <vTaskStartScheduler+0xa8>
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	08004340 	.word	0x08004340
 80032a8:	08003659 	.word	0x08003659
 80032ac:	200004cc 	.word	0x200004cc
 80032b0:	200003a8 	.word	0x200003a8
 80032b4:	2000005c 	.word	0x2000005c
 80032b8:	200004c8 	.word	0x200004c8
 80032bc:	200004b4 	.word	0x200004b4
 80032c0:	200004ac 	.word	0x200004ac

080032c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <vTaskSuspendAll+0x18>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a03      	ldr	r2, [pc, #12]	; (80032dc <vTaskSuspendAll+0x18>)
 80032d0:	6013      	str	r3, [r2, #0]
}
 80032d2:	bf00      	nop
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	200004d0 	.word	0x200004d0

080032e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <xTaskResumeAll+0x114>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <xTaskResumeAll+0x2c>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	603b      	str	r3, [r7, #0]
}
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800330c:	f000 fc32 	bl	8003b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <xTaskResumeAll+0x114>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3b01      	subs	r3, #1
 8003316:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <xTaskResumeAll+0x114>)
 8003318:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <xTaskResumeAll+0x114>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d161      	bne.n	80033e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003322:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <xTaskResumeAll+0x118>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d05d      	beq.n	80033e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800332a:	e02e      	b.n	800338a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <xTaskResumeAll+0x11c>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3318      	adds	r3, #24
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fd5a 	bl	8002df2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3304      	adds	r3, #4
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fd55 	bl	8002df2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <xTaskResumeAll+0x120>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <xTaskResumeAll+0x120>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a27      	ldr	r2, [pc, #156]	; (8003404 <xTaskResumeAll+0x124>)
 8003368:	441a      	add	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff fce1 	bl	8002d38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4b23      	ldr	r3, [pc, #140]	; (8003408 <xTaskResumeAll+0x128>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <xTaskResumeAll+0x12c>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <xTaskResumeAll+0x11c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1cc      	bne.n	800332c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003398:	f000 fa18 	bl	80037cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800339c:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <xTaskResumeAll+0x130>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033a8:	f000 f836 	bl	8003418 <xTaskIncrementTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <xTaskResumeAll+0x12c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f1      	bne.n	80033a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <xTaskResumeAll+0x130>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <xTaskResumeAll+0x12c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <xTaskResumeAll+0x134>)
 80033d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033e6:	f000 fbf5 	bl	8003bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80033ea:	68bb      	ldr	r3, [r7, #8]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200004d0 	.word	0x200004d0
 80033f8:	200004a8 	.word	0x200004a8
 80033fc:	20000468 	.word	0x20000468
 8003400:	200004b0 	.word	0x200004b0
 8003404:	200003ac 	.word	0x200003ac
 8003408:	200003a8 	.word	0x200003a8
 800340c:	200004bc 	.word	0x200004bc
 8003410:	200004b8 	.word	0x200004b8
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <xTaskIncrementTick+0x150>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 808d 	bne.w	8003546 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800342c:	4b4f      	ldr	r3, [pc, #316]	; (800356c <xTaskIncrementTick+0x154>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003434:	4a4d      	ldr	r2, [pc, #308]	; (800356c <xTaskIncrementTick+0x154>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d120      	bne.n	8003482 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003440:	4b4b      	ldr	r3, [pc, #300]	; (8003570 <xTaskIncrementTick+0x158>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <xTaskIncrementTick+0x48>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	603b      	str	r3, [r7, #0]
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <xTaskIncrementTick+0x46>
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <xTaskIncrementTick+0x158>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <xTaskIncrementTick+0x15c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a41      	ldr	r2, [pc, #260]	; (8003570 <xTaskIncrementTick+0x158>)
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4a41      	ldr	r2, [pc, #260]	; (8003574 <xTaskIncrementTick+0x15c>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b40      	ldr	r3, [pc, #256]	; (8003578 <xTaskIncrementTick+0x160>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <xTaskIncrementTick+0x160>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	f000 f9a5 	bl	80037cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <xTaskIncrementTick+0x164>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	d34d      	bcc.n	8003528 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <xTaskIncrementTick+0x158>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <xTaskIncrementTick+0x82>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xTaskIncrementTick+0x84>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <xTaskIncrementTick+0x164>)
 80034a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a6:	601a      	str	r2, [r3, #0]
					break;
 80034a8:	e03e      	b.n	8003528 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <xTaskIncrementTick+0x158>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d203      	bcs.n	80034ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034c2:	4a2e      	ldr	r2, [pc, #184]	; (800357c <xTaskIncrementTick+0x164>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6013      	str	r3, [r2, #0]
						break;
 80034c8:	e02e      	b.n	8003528 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc8f 	bl	8002df2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3318      	adds	r3, #24
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fc86 	bl	8002df2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	4b24      	ldr	r3, [pc, #144]	; (8003580 <xTaskIncrementTick+0x168>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	4a22      	ldr	r2, [pc, #136]	; (8003580 <xTaskIncrementTick+0x168>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <xTaskIncrementTick+0x16c>)
 8003506:	441a      	add	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7ff fc12 	bl	8002d38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <xTaskIncrementTick+0x170>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	429a      	cmp	r2, r3
 8003520:	d3b4      	bcc.n	800348c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003526:	e7b1      	b.n	800348c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <xTaskIncrementTick+0x170>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4915      	ldr	r1, [pc, #84]	; (8003584 <xTaskIncrementTick+0x16c>)
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d907      	bls.n	8003550 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e004      	b.n	8003550 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <xTaskIncrementTick+0x174>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3301      	adds	r3, #1
 800354c:	4a0f      	ldr	r2, [pc, #60]	; (800358c <xTaskIncrementTick+0x174>)
 800354e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <xTaskIncrementTick+0x178>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800355c:	697b      	ldr	r3, [r7, #20]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200004d0 	.word	0x200004d0
 800356c:	200004ac 	.word	0x200004ac
 8003570:	20000460 	.word	0x20000460
 8003574:	20000464 	.word	0x20000464
 8003578:	200004c0 	.word	0x200004c0
 800357c:	200004c8 	.word	0x200004c8
 8003580:	200004b0 	.word	0x200004b0
 8003584:	200003ac 	.word	0x200003ac
 8003588:	200003a8 	.word	0x200003a8
 800358c:	200004b8 	.word	0x200004b8
 8003590:	200004bc 	.word	0x200004bc

08003594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <vTaskSwitchContext+0xac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035a2:	4b28      	ldr	r3, [pc, #160]	; (8003644 <vTaskSwitchContext+0xb0>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035a8:	e044      	b.n	8003634 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <vTaskSwitchContext+0xb0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <vTaskSwitchContext+0xb4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035be:	7afb      	ldrb	r3, [r7, #11]
 80035c0:	f1c3 031f 	rsb	r3, r3, #31
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	4921      	ldr	r1, [pc, #132]	; (800364c <vTaskSwitchContext+0xb8>)
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	607b      	str	r3, [r7, #4]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskSwitchContext+0x5a>
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4a14      	ldr	r2, [pc, #80]	; (800364c <vTaskSwitchContext+0xb8>)
 80035fc:	4413      	add	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3308      	adds	r3, #8
 8003612:	429a      	cmp	r2, r3
 8003614:	d104      	bne.n	8003620 <vTaskSwitchContext+0x8c>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <vTaskSwitchContext+0xbc>)
 8003628:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <vTaskSwitchContext+0xbc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	334c      	adds	r3, #76	; 0x4c
 8003630:	4a08      	ldr	r2, [pc, #32]	; (8003654 <vTaskSwitchContext+0xc0>)
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	200004d0 	.word	0x200004d0
 8003644:	200004bc 	.word	0x200004bc
 8003648:	200004b0 	.word	0x200004b0
 800364c:	200003ac 	.word	0x200003ac
 8003650:	200003a8 	.word	0x200003a8
 8003654:	2000005c 	.word	0x2000005c

08003658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003660:	f000 f852 	bl	8003708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <prvIdleTask+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d9f9      	bls.n	8003660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <prvIdleTask+0x2c>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800367c:	e7f0      	b.n	8003660 <prvIdleTask+0x8>
 800367e:	bf00      	nop
 8003680:	200003ac 	.word	0x200003ac
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e00c      	b.n	80036ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <prvInitialiseTaskLists+0x60>)
 80036a0:	4413      	add	r3, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fb1b 	bl	8002cde <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3301      	adds	r3, #1
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d9ef      	bls.n	8003694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036b6:	f7ff fb12 	bl	8002cde <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036ba:	480d      	ldr	r0, [pc, #52]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036bc:	f7ff fb0f 	bl	8002cde <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <prvInitialiseTaskLists+0x6c>)
 80036c2:	f7ff fb0c 	bl	8002cde <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036c6:	480c      	ldr	r0, [pc, #48]	; (80036f8 <prvInitialiseTaskLists+0x70>)
 80036c8:	f7ff fb09 	bl	8002cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036cc:	480b      	ldr	r0, [pc, #44]	; (80036fc <prvInitialiseTaskLists+0x74>)
 80036ce:	f7ff fb06 	bl	8002cde <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <prvInitialiseTaskLists+0x78>)
 80036d4:	4a05      	ldr	r2, [pc, #20]	; (80036ec <prvInitialiseTaskLists+0x64>)
 80036d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvInitialiseTaskLists+0x7c>)
 80036da:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <prvInitialiseTaskLists+0x68>)
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200003ac 	.word	0x200003ac
 80036ec:	20000438 	.word	0x20000438
 80036f0:	2000044c 	.word	0x2000044c
 80036f4:	20000468 	.word	0x20000468
 80036f8:	2000047c 	.word	0x2000047c
 80036fc:	20000494 	.word	0x20000494
 8003700:	20000460 	.word	0x20000460
 8003704:	20000464 	.word	0x20000464

08003708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800370e:	e019      	b.n	8003744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003710:	f000 fa30 	bl	8003b74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <prvCheckTasksWaitingTermination+0x50>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fb66 	bl	8002df2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a0b      	ldr	r2, [pc, #44]	; (800375c <prvCheckTasksWaitingTermination+0x54>)
 800372e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800373a:	f000 fa4b 	bl	8003bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f810 	bl	8003764 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e1      	bne.n	8003710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000047c 	.word	0x2000047c
 800375c:	200004a8 	.word	0x200004a8
 8003760:	20000490 	.word	0x20000490

08003764 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	334c      	adds	r3, #76	; 0x4c
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fcc3 	bl	80040fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fb9b 	bl	8003ec0 <vPortFree>
				vPortFree( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb98 	bl	8003ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003790:	e018      	b.n	80037c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003798:	2b01      	cmp	r3, #1
 800379a:	d103      	bne.n	80037a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb8f 	bl	8003ec0 <vPortFree>
	}
 80037a2:	e00f      	b.n	80037c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d00a      	beq.n	80037c4 <prvDeleteTCB+0x60>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	60fb      	str	r3, [r7, #12]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <prvDeleteTCB+0x5e>
	}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <prvResetNextTaskUnblockTime+0x44>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <prvResetNextTaskUnblockTime+0x14>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <prvResetNextTaskUnblockTime+0x16>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <prvResetNextTaskUnblockTime+0x48>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ee:	e008      	b.n	8003802 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037f0:	4b07      	ldr	r3, [pc, #28]	; (8003810 <prvResetNextTaskUnblockTime+0x44>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4a05      	ldr	r2, [pc, #20]	; (8003814 <prvResetNextTaskUnblockTime+0x48>)
 8003800:	6013      	str	r3, [r2, #0]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000460 	.word	0x20000460
 8003814:	200004c8 	.word	0x200004c8

08003818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <xTaskGetSchedulerState+0x34>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d102      	bne.n	800382c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003826:	2301      	movs	r3, #1
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	e008      	b.n	800383e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <xTaskGetSchedulerState+0x38>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003834:	2302      	movs	r3, #2
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	e001      	b.n	800383e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800383e:	687b      	ldr	r3, [r7, #4]
	}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	200004b4 	.word	0x200004b4
 8003850:	200004d0 	.word	0x200004d0

08003854 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fac1 	bl	8002df2 <uxListRemove>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4013      	ands	r3, r2
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 800388c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003894:	d10a      	bne.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	481a      	ldr	r0, [pc, #104]	; (8003910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038a6:	f7ff fa47 	bl	8002d38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038aa:	e026      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d209      	bcs.n	80038d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff fa55 	bl	8002d80 <vListInsert>
}
 80038d6:	e010      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f7ff fa4b 	bl	8002d80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d202      	bcs.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200004ac 	.word	0x200004ac
 8003908:	200003a8 	.word	0x200003a8
 800390c:	200004b0 	.word	0x200004b0
 8003910:	20000494 	.word	0x20000494
 8003914:	20000464 	.word	0x20000464
 8003918:	20000460 	.word	0x20000460
 800391c:	200004c8 	.word	0x200004c8

08003920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b04      	subs	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b04      	subs	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b04      	subs	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003950:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <pxPortInitialiseStack+0x64>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b14      	subs	r3, #20
 800395a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b04      	subs	r3, #4
 8003966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f06f 0202 	mvn.w	r2, #2
 800396e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3b20      	subs	r3, #32
 8003974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	08003989 	.word	0x08003989

08003988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <prvTaskExitError+0x54>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399a:	d00a      	beq.n	80039b2 <prvTaskExitError+0x2a>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60fb      	str	r3, [r7, #12]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <prvTaskExitError+0x28>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60bb      	str	r3, [r7, #8]
}
 80039c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039c6:	bf00      	nop
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0fc      	beq.n	80039c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	4770      	bx	lr
 80039fc:	f3af 8000 	nop.w

08003a00 <pxCurrentTCBConst2>:
 8003a00:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <prvPortStartFirstTask+0x24>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f380 8814 	msr	CONTROL, r0
 8003a1a:	b662      	cpsie	i
 8003a1c:	b661      	cpsie	f
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	df00      	svc	0
 8003a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed08 	.word	0xe000ed08

08003a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	; (8003b54 <xPortStartScheduler+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10a      	bne.n	8003a56 <xPortStartScheduler+0x26>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3f      	ldr	r2, [pc, #252]	; (8003b58 <xPortStartScheduler+0x128>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10a      	bne.n	8003a76 <xPortStartScheduler+0x46>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60fb      	str	r3, [r7, #12]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <xPortStartScheduler+0x130>)
 8003a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aa4:	e009      	b.n	8003aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d0ef      	beq.n	8003aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <xPortStartScheduler+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1c3 0307 	rsb	r3, r3, #7
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d00a      	beq.n	8003ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60bb      	str	r3, [r7, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <xPortStartScheduler+0x134>)
 8003afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b1e:	f000 f8dd 	bl	8003cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <xPortStartScheduler+0x13c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b28:	f000 f8fc 	bl	8003d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b38:	f7ff ff66 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b3c:	f7ff fd2a 	bl	8003594 <vTaskSwitchContext>
	prvTaskExitError();
 8003b40:	f7ff ff22 	bl	8003988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	410fc271 	.word	0x410fc271
 8003b58:	410fc270 	.word	0x410fc270
 8003b5c:	e000e400 	.word	0xe000e400
 8003b60:	200004d4 	.word	0x200004d4
 8003b64:	200004d8 	.word	0x200004d8
 8003b68:	e000ed20 	.word	0xe000ed20
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	e000ef34 	.word	0xe000ef34

08003b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10f      	bne.n	8003bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <vPortEnterCritical+0x5c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <vPortEnterCritical+0x4a>
	}
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <vPortExitCritical+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vPortExitCritical+0x24>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <vPortExitCritical+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vPortExitCritical+0x50>)
 8003c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <vPortExitCritical+0x50>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <vPortExitCritical+0x42>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f01e 0f10 	tst.w	lr, #16
 8003c40:	bf08      	it	eq
 8003c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c54:	f380 8811 	msr	BASEPRI, r0
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f7ff fc98 	bl	8003594 <vTaskSwitchContext>
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f380 8811 	msr	BASEPRI, r0
 8003c6c:	bc09      	pop	{r0, r3}
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6808      	ldr	r0, [r1, #0]
 8003c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c76:	f01e 0f10 	tst.w	lr, #16
 8003c7a:	bf08      	it	eq
 8003c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c80:	f380 8809 	msr	PSP, r0
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <pxCurrentTCBConst>:
 8003c90:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cb2:	f7ff fbb1 	bl	8003418 <xTaskIncrementTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <xPortSysTickHandler+0x40>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f383 8811 	msr	BASEPRI, r3
}
 8003cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vPortSetupTimerInterrupt+0x38>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <vPortSetupTimerInterrupt+0x3c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <vPortSetupTimerInterrupt+0x40>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <vPortSetupTimerInterrupt+0x44>)
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010
 8003d14:	e000e018 	.word	0xe000e018
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	e000e014 	.word	0xe000e014

08003d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d34 <vPortEnableVFP+0x10>
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d2e:	6001      	str	r1, [r0, #0]
 8003d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d32:	bf00      	nop
 8003d34:	e000ed88 	.word	0xe000ed88

08003d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d44:	f7ff fabe 	bl	80032c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d48:	4b58      	ldr	r3, [pc, #352]	; (8003eac <pvPortMalloc+0x174>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d50:	f000 f910 	bl	8003f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d54:	4b56      	ldr	r3, [pc, #344]	; (8003eb0 <pvPortMalloc+0x178>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 808e 	bne.w	8003e7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01d      	beq.n	8003da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <pvPortMalloc+0x6c>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	617b      	str	r3, [r7, #20]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d069      	beq.n	8003e7e <pvPortMalloc+0x146>
 8003daa:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <pvPortMalloc+0x17c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d864      	bhi.n	8003e7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003db4:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <pvPortMalloc+0x180>)
 8003db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <pvPortMalloc+0x180>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dbe:	e004      	b.n	8003dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d903      	bls.n	8003ddc <pvPortMalloc+0xa4>
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f1      	bne.n	8003dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ddc:	4b33      	ldr	r3, [pc, #204]	; (8003eac <pvPortMalloc+0x174>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d04b      	beq.n	8003e7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2208      	movs	r2, #8
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	2308      	movs	r3, #8
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d91f      	bls.n	8003e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <pvPortMalloc+0xf8>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	613b      	str	r3, [r7, #16]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e42:	69b8      	ldr	r0, [r7, #24]
 8003e44:	f000 f8f8 	bl	8004038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <pvPortMalloc+0x17c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <pvPortMalloc+0x17c>)
 8003e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <pvPortMalloc+0x17c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <pvPortMalloc+0x184>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d203      	bcs.n	8003e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <pvPortMalloc+0x17c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <pvPortMalloc+0x184>)
 8003e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <pvPortMalloc+0x178>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e7e:	f7ff fa2f 	bl	80032e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <pvPortMalloc+0x16a>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60fb      	str	r3, [r7, #12]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <pvPortMalloc+0x168>
	return pvReturn;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200010e4 	.word	0x200010e4
 8003eb0:	200010f0 	.word	0x200010f0
 8003eb4:	200010e8 	.word	0x200010e8
 8003eb8:	200010dc 	.word	0x200010dc
 8003ebc:	200010ec 	.word	0x200010ec

08003ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d048      	beq.n	8003f64 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <vPortFree+0xac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <vPortFree+0x44>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60fb      	str	r3, [r7, #12]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <vPortFree+0x62>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	60bb      	str	r3, [r7, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <vPortFree+0xac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d019      	beq.n	8003f64 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d115      	bne.n	8003f64 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <vPortFree+0xac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	401a      	ands	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f48:	f7ff f9bc 	bl	80032c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <vPortFree+0xb0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <vPortFree+0xb0>)
 8003f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f5a:	6938      	ldr	r0, [r7, #16]
 8003f5c:	f000 f86c 	bl	8004038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f60:	f7ff f9be 	bl	80032e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200010f0 	.word	0x200010f0
 8003f70:	200010e8 	.word	0x200010e8

08003f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f80:	4b27      	ldr	r3, [pc, #156]	; (8004020 <prvHeapInit+0xac>)
 8003f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00c      	beq.n	8003fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3307      	adds	r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <prvHeapInit+0xac>)
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <prvHeapInit+0xb0>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <prvHeapInit+0xb0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	; (8004028 <prvHeapInit+0xb4>)
 8003fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <prvHeapInit+0xb4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <prvHeapInit+0xb4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <prvHeapInit+0xb4>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <prvHeapInit+0xb8>)
 8004002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a09      	ldr	r2, [pc, #36]	; (8004030 <prvHeapInit+0xbc>)
 800400a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <prvHeapInit+0xc0>)
 800400e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	200004dc 	.word	0x200004dc
 8004024:	200010dc 	.word	0x200010dc
 8004028:	200010e4 	.word	0x200010e4
 800402c:	200010ec 	.word	0x200010ec
 8004030:	200010e8 	.word	0x200010e8
 8004034:	200010f0 	.word	0x200010f0

08004038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004040:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <prvInsertBlockIntoFreeList+0xac>)
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e002      	b.n	800404c <prvInsertBlockIntoFreeList+0x14>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d8f7      	bhi.n	8004046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4413      	add	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d108      	bne.n	800407a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	441a      	add	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d118      	bne.n	80040c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d00d      	beq.n	80040b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e008      	b.n	80040c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvInsertBlockIntoFreeList+0xb0>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e003      	b.n	80040c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d002      	beq.n	80040d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	200010dc 	.word	0x200010dc
 80040e8:	200010e4 	.word	0x200010e4

080040ec <memset>:
 80040ec:	4402      	add	r2, r0
 80040ee:	4603      	mov	r3, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <_reclaim_reent>:
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <_reclaim_reent+0xa8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4283      	cmp	r3, r0
 8004102:	b570      	push	{r4, r5, r6, lr}
 8004104:	4604      	mov	r4, r0
 8004106:	d04b      	beq.n	80041a0 <_reclaim_reent+0xa4>
 8004108:	69c3      	ldr	r3, [r0, #28]
 800410a:	b143      	cbz	r3, 800411e <_reclaim_reent+0x22>
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d144      	bne.n	800419c <_reclaim_reent+0xa0>
 8004112:	69e3      	ldr	r3, [r4, #28]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	b111      	cbz	r1, 800411e <_reclaim_reent+0x22>
 8004118:	4620      	mov	r0, r4
 800411a:	f000 f86b 	bl	80041f4 <_free_r>
 800411e:	6961      	ldr	r1, [r4, #20]
 8004120:	b111      	cbz	r1, 8004128 <_reclaim_reent+0x2c>
 8004122:	4620      	mov	r0, r4
 8004124:	f000 f866 	bl	80041f4 <_free_r>
 8004128:	69e1      	ldr	r1, [r4, #28]
 800412a:	b111      	cbz	r1, 8004132 <_reclaim_reent+0x36>
 800412c:	4620      	mov	r0, r4
 800412e:	f000 f861 	bl	80041f4 <_free_r>
 8004132:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004134:	b111      	cbz	r1, 800413c <_reclaim_reent+0x40>
 8004136:	4620      	mov	r0, r4
 8004138:	f000 f85c 	bl	80041f4 <_free_r>
 800413c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800413e:	b111      	cbz	r1, 8004146 <_reclaim_reent+0x4a>
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f857 	bl	80041f4 <_free_r>
 8004146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004148:	b111      	cbz	r1, 8004150 <_reclaim_reent+0x54>
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f852 	bl	80041f4 <_free_r>
 8004150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004152:	b111      	cbz	r1, 800415a <_reclaim_reent+0x5e>
 8004154:	4620      	mov	r0, r4
 8004156:	f000 f84d 	bl	80041f4 <_free_r>
 800415a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800415c:	b111      	cbz	r1, 8004164 <_reclaim_reent+0x68>
 800415e:	4620      	mov	r0, r4
 8004160:	f000 f848 	bl	80041f4 <_free_r>
 8004164:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004166:	b111      	cbz	r1, 800416e <_reclaim_reent+0x72>
 8004168:	4620      	mov	r0, r4
 800416a:	f000 f843 	bl	80041f4 <_free_r>
 800416e:	6a23      	ldr	r3, [r4, #32]
 8004170:	b1b3      	cbz	r3, 80041a0 <_reclaim_reent+0xa4>
 8004172:	4620      	mov	r0, r4
 8004174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004178:	4718      	bx	r3
 800417a:	5949      	ldr	r1, [r1, r5]
 800417c:	b941      	cbnz	r1, 8004190 <_reclaim_reent+0x94>
 800417e:	3504      	adds	r5, #4
 8004180:	69e3      	ldr	r3, [r4, #28]
 8004182:	2d80      	cmp	r5, #128	; 0x80
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	d1f8      	bne.n	800417a <_reclaim_reent+0x7e>
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f833 	bl	80041f4 <_free_r>
 800418e:	e7c0      	b.n	8004112 <_reclaim_reent+0x16>
 8004190:	680e      	ldr	r6, [r1, #0]
 8004192:	4620      	mov	r0, r4
 8004194:	f000 f82e 	bl	80041f4 <_free_r>
 8004198:	4631      	mov	r1, r6
 800419a:	e7ef      	b.n	800417c <_reclaim_reent+0x80>
 800419c:	2500      	movs	r5, #0
 800419e:	e7ef      	b.n	8004180 <_reclaim_reent+0x84>
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	bf00      	nop
 80041a4:	2000005c 	.word	0x2000005c

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4d0d      	ldr	r5, [pc, #52]	; (80041e0 <__libc_init_array+0x38>)
 80041ac:	4c0d      	ldr	r4, [pc, #52]	; (80041e4 <__libc_init_array+0x3c>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	2600      	movs	r6, #0
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	4d0b      	ldr	r5, [pc, #44]	; (80041e8 <__libc_init_array+0x40>)
 80041ba:	4c0c      	ldr	r4, [pc, #48]	; (80041ec <__libc_init_array+0x44>)
 80041bc:	f000 f872 	bl	80042a4 <_init>
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	2600      	movs	r6, #0
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08004380 	.word	0x08004380
 80041e4:	08004380 	.word	0x08004380
 80041e8:	08004380 	.word	0x08004380
 80041ec:	08004384 	.word	0x08004384

080041f0 <__retarget_lock_acquire_recursive>:
 80041f0:	4770      	bx	lr

080041f2 <__retarget_lock_release_recursive>:
 80041f2:	4770      	bx	lr

080041f4 <_free_r>:
 80041f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041f6:	2900      	cmp	r1, #0
 80041f8:	d044      	beq.n	8004284 <_free_r+0x90>
 80041fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fe:	9001      	str	r0, [sp, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f1a1 0404 	sub.w	r4, r1, #4
 8004206:	bfb8      	it	lt
 8004208:	18e4      	addlt	r4, r4, r3
 800420a:	f000 f83f 	bl	800428c <__malloc_lock>
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <_free_r+0x94>)
 8004210:	9801      	ldr	r0, [sp, #4]
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	b933      	cbnz	r3, 8004224 <_free_r+0x30>
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	6014      	str	r4, [r2, #0]
 800421a:	b003      	add	sp, #12
 800421c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004220:	f000 b83a 	b.w	8004298 <__malloc_unlock>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d908      	bls.n	800423a <_free_r+0x46>
 8004228:	6825      	ldr	r5, [r4, #0]
 800422a:	1961      	adds	r1, r4, r5
 800422c:	428b      	cmp	r3, r1
 800422e:	bf01      	itttt	eq
 8004230:	6819      	ldreq	r1, [r3, #0]
 8004232:	685b      	ldreq	r3, [r3, #4]
 8004234:	1949      	addeq	r1, r1, r5
 8004236:	6021      	streq	r1, [r4, #0]
 8004238:	e7ed      	b.n	8004216 <_free_r+0x22>
 800423a:	461a      	mov	r2, r3
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b10b      	cbz	r3, 8004244 <_free_r+0x50>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d9fa      	bls.n	800423a <_free_r+0x46>
 8004244:	6811      	ldr	r1, [r2, #0]
 8004246:	1855      	adds	r5, r2, r1
 8004248:	42a5      	cmp	r5, r4
 800424a:	d10b      	bne.n	8004264 <_free_r+0x70>
 800424c:	6824      	ldr	r4, [r4, #0]
 800424e:	4421      	add	r1, r4
 8004250:	1854      	adds	r4, r2, r1
 8004252:	42a3      	cmp	r3, r4
 8004254:	6011      	str	r1, [r2, #0]
 8004256:	d1e0      	bne.n	800421a <_free_r+0x26>
 8004258:	681c      	ldr	r4, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	6053      	str	r3, [r2, #4]
 800425e:	440c      	add	r4, r1
 8004260:	6014      	str	r4, [r2, #0]
 8004262:	e7da      	b.n	800421a <_free_r+0x26>
 8004264:	d902      	bls.n	800426c <_free_r+0x78>
 8004266:	230c      	movs	r3, #12
 8004268:	6003      	str	r3, [r0, #0]
 800426a:	e7d6      	b.n	800421a <_free_r+0x26>
 800426c:	6825      	ldr	r5, [r4, #0]
 800426e:	1961      	adds	r1, r4, r5
 8004270:	428b      	cmp	r3, r1
 8004272:	bf04      	itt	eq
 8004274:	6819      	ldreq	r1, [r3, #0]
 8004276:	685b      	ldreq	r3, [r3, #4]
 8004278:	6063      	str	r3, [r4, #4]
 800427a:	bf04      	itt	eq
 800427c:	1949      	addeq	r1, r1, r5
 800427e:	6021      	streq	r1, [r4, #0]
 8004280:	6054      	str	r4, [r2, #4]
 8004282:	e7ca      	b.n	800421a <_free_r+0x26>
 8004284:	b003      	add	sp, #12
 8004286:	bd30      	pop	{r4, r5, pc}
 8004288:	20001230 	.word	0x20001230

0800428c <__malloc_lock>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__malloc_lock+0x8>)
 800428e:	f7ff bfaf 	b.w	80041f0 <__retarget_lock_acquire_recursive>
 8004292:	bf00      	nop
 8004294:	2000122c 	.word	0x2000122c

08004298 <__malloc_unlock>:
 8004298:	4801      	ldr	r0, [pc, #4]	; (80042a0 <__malloc_unlock+0x8>)
 800429a:	f7ff bfaa 	b.w	80041f2 <__retarget_lock_release_recursive>
 800429e:	bf00      	nop
 80042a0:	2000122c 	.word	0x2000122c

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

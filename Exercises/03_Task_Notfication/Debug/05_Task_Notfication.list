
05_Task_Notfication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004870  08004870  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004870  08004870  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004870  08004870  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000109c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010ac  200010ac  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010776  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000264d  00000000  00000000  000307f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb0  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b76  00000000  00000000  00033cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000214dc  00000000  00000000  0003486e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012104  00000000  00000000  00055d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c98f8  00000000  00000000  00067e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c78  00000000  00000000  00131748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  001353c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f4 	.word	0x080047f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080047f4 	.word	0x080047f4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fab9 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f827 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8af 	bl	8000374 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000216:	f000 f87d 	bl	8000314 <MX_USART1_UART_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xTaskCreate(Task1_Handler, "button", 128, NULL, 2, &Task1_Handle);
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x44>)
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	2302      	movs	r3, #2
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2300      	movs	r3, #0
 8000224:	2280      	movs	r2, #128	; 0x80
 8000226:	4909      	ldr	r1, [pc, #36]	; (800024c <main+0x48>)
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x4c>)
 800022a:	f003 f928 	bl	800347e <xTaskCreate>
  xTaskCreate(Task2_Handler, "led", 128, NULL, 2, &Task2_Handle);
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <main+0x50>)
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2302      	movs	r3, #2
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	4907      	ldr	r1, [pc, #28]	; (8000258 <main+0x54>)
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <main+0x58>)
 800023e:	f003 f91e 	bl	800347e <xTaskCreate>
  vTaskStartScheduler();
 8000242:	f003 fa4b 	bl	80036dc <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000246:	e7fe      	b.n	8000246 <main+0x42>
 8000248:	20000308 	.word	0x20000308
 800024c:	0800480c 	.word	0x0800480c
 8000250:	08000411 	.word	0x08000411
 8000254:	2000030c 	.word	0x2000030c
 8000258:	08004814 	.word	0x08004814
 800025c:	08000445 	.word	0x08000445

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b096      	sub	sp, #88	; 0x58
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fa94 	bl	800479c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 031c 	add.w	r3, r7, #28
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	463b      	mov	r3, r7
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]
 8000294:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	2300      	movs	r3, #0
 80002a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fd37 	bl	8000d28 <HAL_RCC_OscConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002c0:	f000 f916 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c4:	230f      	movs	r3, #15
 80002c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c8:	2302      	movs	r3, #2
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	2101      	movs	r1, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fd5f 	bl	8001da4 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002ec:	f000 f900 	bl	80004f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 ffba 	bl	8002274 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000306:	f000 f8f3 	bl	80004f0 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3758      	adds	r7, #88	; 0x58
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_USART1_UART_Init+0x58>)
 800031a:	4a15      	ldr	r2, [pc, #84]	; (8000370 <MX_USART1_UART_Init+0x5c>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <MX_USART1_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_USART1_UART_Init+0x58>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_USART1_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_USART1_UART_Init+0x58>)
 8000358:	f002 fb5e 	bl	8002a18 <HAL_UART_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000362:	f000 f8c5 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000280 	.word	0x20000280
 8000370:	40013800 	.word	0x40013800

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <MX_GPIO_Init+0x94>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <MX_GPIO_Init+0x94>)
 8000390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_GPIO_Init+0x94>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_GPIO_Init+0x94>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a18      	ldr	r2, [pc, #96]	; (8000408 <MX_GPIO_Init+0x94>)
 80003a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_GPIO_Init+0x94>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c0:	4812      	ldr	r0, [pc, #72]	; (800040c <MX_GPIO_Init+0x98>)
 80003c2:	f000 fc7f 	bl	8000cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003c6:	2301      	movs	r3, #1
 80003c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f000 fae8 	bl	80009b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : green_Pin */
  GPIO_InitStruct.Pin = green_Pin;
 80003e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(green_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x98>)
 80003fa:	f000 fad9 	bl	80009b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	48000400 	.word	0x48000400

08000410 <Task1_Handler>:

/* USER CODE BEGIN 4 */
void Task1_Handler(void *param)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	while(1)
	{
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 8000418:	2101      	movs	r1, #1
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fc39 	bl	8000c94 <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d1f7      	bne.n	8000418 <Task1_Handler+0x8>
	{
		RTOS_Delay(100);
 8000428:	2064      	movs	r0, #100	; 0x64
 800042a:	f000 f82d 	bl	8000488 <RTOS_Delay>
		xTaskNotify(Task2_Handle,0x0,eNoAction);
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <Task1_Handler+0x30>)
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	f003 fcba 	bl	8003db0 <xTaskGenericNotify>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 800043c:	e7ec      	b.n	8000418 <Task1_Handler+0x8>
 800043e:	bf00      	nop
 8000440:	2000030c 	.word	0x2000030c

08000444 <Task2_Handler>:
	}
	}
}
void Task2_Handler(void *param)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY)==pdTRUE)
 800044c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2000      	movs	r0, #0
 8000456:	f003 fc51 	bl	8003cfc <xTaskNotifyWait>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d1f5      	bne.n	800044c <Task2_Handler+0x8>
		{
			HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
 8000460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <Task2_Handler+0x38>)
 8000466:	f000 fc45 	bl	8000cf4 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart1, (uint8_t*)"Notification Received\r\n", sizeof("Notification Received\r\n")-1, HAL_MAX_DELAY);
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800046e:	2217      	movs	r2, #23
 8000470:	4903      	ldr	r1, [pc, #12]	; (8000480 <Task2_Handler+0x3c>)
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <Task2_Handler+0x40>)
 8000474:	f002 fb1e 	bl	8002ab4 <HAL_UART_Transmit>
		if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY)==pdTRUE)
 8000478:	e7e8      	b.n	800044c <Task2_Handler+0x8>
 800047a:	bf00      	nop
 800047c:	48000400 	.word	0x48000400
 8000480:	08004818 	.word	0x08004818
 8000484:	20000280 	.word	0x20000280

08000488 <RTOS_Delay>:

	}
}

void RTOS_Delay(uint16_t delay_in_ms)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	uint32_t current_tick_count = xTaskGetTickCount();
 8000492:	f003 fa2d 	bl	80038f0 <xTaskGetTickCount>
 8000496:	60f8      	str	r0, [r7, #12]

	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ)/1000;
 8000498:	88fb      	ldrh	r3, [r7, #6]
 800049a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800049e:	fb02 f303 	mul.w	r3, r2, r3
 80004a2:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <RTOS_Delay+0x40>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	099b      	lsrs	r3, r3, #6
 80004aa:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
 80004ac:	bf00      	nop
 80004ae:	f003 fa1f 	bl	80038f0 <xTaskGetTickCount>
 80004b2:	4601      	mov	r1, r0
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	4413      	add	r3, r2
 80004ba:	4299      	cmp	r1, r3
 80004bc:	d3f7      	bcc.n	80004ae <RTOS_Delay+0x26>
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	10624dd3 	.word	0x10624dd3

080004cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d101      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004de:	f000 f965 	bl	80007ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40001000 	.word	0x40001000

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <HAL_MspInit+0x4c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a10      	ldr	r2, [pc, #64]	; (8000548 <HAL_MspInit+0x4c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_MspInit+0x4c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_MspInit+0x4c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_MspInit+0x4c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_MspInit+0x4c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	210f      	movs	r1, #15
 8000536:	f06f 0001 	mvn.w	r0, #1
 800053a:	f000 fa0f 	bl	800095c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <HAL_UART_MspInit+0x7c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d127      	bne.n	80005be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_UART_MspInit+0x80>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <HAL_UART_MspInit+0x80>)
 800058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800059e:	23c0      	movs	r3, #192	; 0xc0
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ae:	2307      	movs	r3, #7
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_UART_MspInit+0x84>)
 80005ba:	f000 f9f9 	bl	80009b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40013800 	.word	0x40013800
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400

080005d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005dc:	2300      	movs	r3, #0
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <HAL_InitTick+0xe0>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <HAL_InitTick+0xe0>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	61d3      	str	r3, [r2, #28]
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <HAL_InitTick+0xe0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fc:	f107 0210 	add.w	r2, r7, #16
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fe02 	bl	8002210 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000616:	f001 fdb7 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 800061a:	6378      	str	r0, [r7, #52]	; 0x34
 800061c:	e004      	b.n	8000628 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800061e:	f001 fdb3 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 8000622:	4603      	mov	r3, r0
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <HAL_InitTick+0xe4>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9b      	lsrs	r3, r3, #18
 8000632:	3b01      	subs	r3, #1
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <HAL_InitTick+0xe8>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <HAL_InitTick+0xec>)
 800063a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <HAL_InitTick+0xe8>)
 800063e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000642:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <HAL_InitTick+0xe8>)
 8000646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000648:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_InitTick+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <HAL_InitTick+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_InitTick+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <HAL_InitTick+0xe8>)
 800065e:	f001 ff3f 	bl	80024e0 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000668:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800066c:	2b00      	cmp	r3, #0
 800066e:	d11b      	bne.n	80006a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000670:	4812      	ldr	r0, [pc, #72]	; (80006bc <HAL_InitTick+0xe8>)
 8000672:	f001 ff97 	bl	80025a4 <HAL_TIM_Base_Start_IT>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800067c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000680:	2b00      	cmp	r3, #0
 8000682:	d111      	bne.n	80006a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000684:	2036      	movs	r0, #54	; 0x36
 8000686:	f000 f985 	bl	8000994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d808      	bhi.n	80006a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	2036      	movs	r0, #54	; 0x36
 8000696:	f000 f961 	bl	800095c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_InitTick+0xf0>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e002      	b.n	80006a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3738      	adds	r7, #56	; 0x38
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	20000310 	.word	0x20000310
 80006c0:	40001000 	.word	0x40001000
 80006c4:	20000004 	.word	0x20000004

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <TIM6_DAC1_IRQHandler+0x10>)
 80006fa:	f001 ffaf 	bl	800265c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000310 	.word	0x20000310

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SystemInit+0x20>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <SystemInit+0x20>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff ffea 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f004 f827 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd51 	bl	8000204 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000770:	08004878 	.word	0x08004878
  ldr r2, =_sbss
 8000774:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000778:	200010ac 	.word	0x200010ac

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f8d8 	bl	8000946 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f7ff ff1c 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff feae 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x20>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x24>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_IncTick+0x24>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008
 80007d0:	2000035c 	.word	0x2000035c

080007d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetTick+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	2000035c 	.word	0x2000035c

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0b      	blt.n	800087a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <__NVIC_EnableIRQ+0x38>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ff4c 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096e:	f7ff ff61 	bl	8000834 <__NVIC_GetPriorityGrouping>
 8000972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	6978      	ldr	r0, [r7, #20]
 800097a:	f7ff ffb1 	bl	80008e0 <NVIC_EncodePriority>
 800097e:	4602      	mov	r2, r0
 8000980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff80 	bl	800088c <__NVIC_SetPriority>
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff54 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e14e      	b.n	8000c5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8140 	beq.w	8000c58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d005      	beq.n	80009f0 <HAL_GPIO_Init+0x40>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d130      	bne.n	8000a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2203      	movs	r2, #3
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a26:	2201      	movs	r2, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	f003 0201 	and.w	r2, r3, #1
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d017      	beq.n	8000a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d123      	bne.n	8000ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	08da      	lsrs	r2, r3, #3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	691a      	ldr	r2, [r3, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	6939      	ldr	r1, [r7, #16]
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0203 	and.w	r2, r3, #3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 809a 	beq.w	8000c58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <HAL_GPIO_Init+0x2cc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a54      	ldr	r2, [pc, #336]	; (8000c7c <HAL_GPIO_Init+0x2cc>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <HAL_GPIO_Init+0x2cc>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a50      	ldr	r2, [pc, #320]	; (8000c80 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b66:	d013      	beq.n	8000b90 <HAL_GPIO_Init+0x1e0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_GPIO_Init+0x2d4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d00d      	beq.n	8000b8c <HAL_GPIO_Init+0x1dc>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a45      	ldr	r2, [pc, #276]	; (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x1d8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a44      	ldr	r2, [pc, #272]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d101      	bne.n	8000b84 <HAL_GPIO_Init+0x1d4>
 8000b80:	2303      	movs	r3, #3
 8000b82:	e006      	b.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b84:	2305      	movs	r3, #5
 8000b86:	e004      	b.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e002      	b.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e000      	b.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b90:	2300      	movs	r3, #0
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	f002 0203 	and.w	r2, r2, #3
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	4093      	lsls	r3, r2
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba2:	4937      	ldr	r1, [pc, #220]	; (8000c80 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3302      	adds	r3, #2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <HAL_GPIO_Init+0x2e0>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f47f aea9 	bne.w	80009c0 <HAL_GPIO_Init+0x10>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	48000400 	.word	0x48000400
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000c00 	.word	0x48000c00
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	887b      	ldrh	r3, [r7, #2]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43d9      	mvns	r1, r3
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	400b      	ands	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	f001 b823 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 817d 	beq.w	800105e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d64:	4bbc      	ldr	r3, [pc, #752]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4bb9      	ldr	r3, [pc, #740]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d15c      	bne.n	8000e36 <HAL_RCC_OscConfig+0x10e>
 8000d7c:	4bb6      	ldr	r3, [pc, #728]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d88:	d155      	bne.n	8000e36 <HAL_RCC_OscConfig+0x10e>
 8000d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	095b      	lsrs	r3, r3, #5
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <HAL_RCC_OscConfig+0x94>
 8000db6:	4ba8      	ldr	r3, [pc, #672]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	e015      	b.n	8000de8 <HAL_RCC_OscConfig+0xc0>
 8000dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dc8:	fa93 f3a3 	rbit	r3, r3
 8000dcc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dd8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000de4:	4b9c      	ldr	r3, [pc, #624]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000df0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000df4:	fa92 f2a2 	rbit	r2, r2
 8000df8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dfc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f042 0220 	orr.w	r2, r2, #32
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	f002 021f 	and.w	r2, r2, #31
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 811f 	beq.w	800105c <HAL_RCC_OscConfig+0x334>
 8000e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 8116 	bne.w	800105c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f000 bfaf 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x12e>
 8000e48:	4b83      	ldr	r3, [pc, #524]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a82      	ldr	r2, [pc, #520]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e036      	b.n	8000ec4 <HAL_RCC_OscConfig+0x19c>
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x158>
 8000e66:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7b      	ldr	r2, [pc, #492]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b79      	ldr	r3, [pc, #484]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a78      	ldr	r2, [pc, #480]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e021      	b.n	8000ec4 <HAL_RCC_OscConfig+0x19c>
 8000e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x184>
 8000e92:	4b71      	ldr	r3, [pc, #452]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a70      	ldr	r2, [pc, #448]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b6e      	ldr	r3, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a6d      	ldr	r2, [pc, #436]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e00b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x19c>
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a69      	ldr	r2, [pc, #420]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a66      	ldr	r2, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ec4:	4b64      	ldr	r3, [pc, #400]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	f023 020f 	bic.w	r2, r3, #15
 8000ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	495f      	ldr	r1, [pc, #380]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d059      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc71 	bl	80007d4 <HAL_GetTick>
 8000ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	e00a      	b.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fc6c 	bl	80007d4 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b64      	cmp	r3, #100	; 0x64
 8000f06:	d902      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f000 bf43 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 8000f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	095b      	lsrs	r3, r3, #5
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d102      	bne.n	8000f40 <HAL_RCC_OscConfig+0x218>
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	e015      	b.n	8000f6c <HAL_RCC_OscConfig+0x244>
 8000f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f68:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f70:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f78:	fa92 f2a2 	rbit	r2, r2
 8000f7c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f84:	fab2 f282 	clz	r2, r2
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f042 0220 	orr.w	r2, r2, #32
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	f002 021f 	and.w	r2, r2, #31
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0ab      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x1d0>
 8000fa0:	e05d      	b.n	800105e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fc17 	bl	80007d4 <HAL_GetTick>
 8000fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e00a      	b.n	8000fc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fc12 	bl	80007d4 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d902      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f000 bee9 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	095b      	lsrs	r3, r3, #5
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d102      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x2cc>
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	e015      	b.n	8001020 <HAL_RCC_OscConfig+0x2f8>
 8000ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001000:	fa93 f3a3 	rbit	r3, r3
 8001004:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001010:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_RCC_OscConfig+0x330>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001024:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001028:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001034:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1ab      	bne.n	8000fac <HAL_RCC_OscConfig+0x284>
 8001054:	e003      	b.n	800105e <HAL_RCC_OscConfig+0x336>
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 817d 	beq.w	800136e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001074:	4ba6      	ldr	r3, [pc, #664]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00b      	beq.n	8001098 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001080:	4ba3      	ldr	r3, [pc, #652]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b08      	cmp	r3, #8
 800108a:	d172      	bne.n	8001172 <HAL_RCC_OscConfig+0x44a>
 800108c:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d16c      	bne.n	8001172 <HAL_RCC_OscConfig+0x44a>
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d102      	bne.n	80010c8 <HAL_RCC_OscConfig+0x3a0>
 80010c2:	4b93      	ldr	r3, [pc, #588]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	e013      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c8>
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010ec:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	2202      	movs	r2, #2
 80010f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010fa:	fa92 f2a2 	rbit	r2, r2
 80010fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001102:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001106:	fab2 f282 	clz	r2, r2
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	f042 0220 	orr.w	r2, r2, #32
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	f002 021f 	and.w	r2, r2, #31
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00a      	beq.n	8001138 <HAL_RCC_OscConfig+0x410>
 8001122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d002      	beq.n	8001138 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f000 be2e 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b75      	ldr	r3, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	21f8      	movs	r1, #248	; 0xf8
 800114e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001156:	fa91 f1a1 	rbit	r1, r1
 800115a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800115e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001162:	fab1 f181 	clz	r1, r1
 8001166:	b2c9      	uxtb	r1, r1
 8001168:	408b      	lsls	r3, r1
 800116a:	4969      	ldr	r1, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001170:	e0fd      	b.n	800136e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8088 	beq.w	8001294 <HAL_RCC_OscConfig+0x56c>
 8001184:	2301      	movs	r3, #1
 8001186:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001196:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	2301      	movs	r3, #1
 80011ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb10 	bl	80007d4 <HAL_GetTick>
 80011b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fb0b 	bl	80007d4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d902      	bls.n	80011d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f000 bde2 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x4d8>
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	e013      	b.n	8001228 <HAL_RCC_OscConfig+0x500>
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001218:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	2202      	movs	r2, #2
 800122a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800122e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800123a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	f002 021f 	and.w	r2, r2, #31
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0af      	beq.n	80011ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	21f8      	movs	r1, #248	; 0xf8
 8001270:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001278:	fa91 f1a1 	rbit	r1, r1
 800127c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001280:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001284:	fab1 f181 	clz	r1, r1
 8001288:	b2c9      	uxtb	r1, r1
 800128a:	408b      	lsls	r3, r1
 800128c:	4920      	ldr	r1, [pc, #128]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
 8001292:	e06c      	b.n	800136e <HAL_RCC_OscConfig+0x646>
 8001294:	2301      	movs	r3, #1
 8001296:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	461a      	mov	r2, r3
 80012bc:	2300      	movs	r3, #0
 80012be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fa88 	bl	80007d4 <HAL_GetTick>
 80012c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fa83 	bl	80007d4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d902      	bls.n	80012e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	f000 bd5a 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d104      	bne.n	8001314 <HAL_RCC_OscConfig+0x5ec>
 800130a:	4b01      	ldr	r3, [pc, #4]	; (8001310 <HAL_RCC_OscConfig+0x5e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x614>
 8001310:	40021000 	.word	0x40021000
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800132c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001338:	4bc8      	ldr	r3, [pc, #800]	; (800165c <HAL_RCC_OscConfig+0x934>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2202      	movs	r2, #2
 800133e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001342:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001346:	fa92 f2a2 	rbit	r2, r2
 800134a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800134e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ad      	bne.n	80012ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8110 	beq.w	80015a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d079      	beq.n	8001488 <HAL_RCC_OscConfig+0x760>
 8001394:	2301      	movs	r3, #1
 8001396:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4bab      	ldr	r3, [pc, #684]	; (8001660 <HAL_RCC_OscConfig+0x938>)
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	461a      	mov	r2, r3
 80013ba:	2301      	movs	r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fa09 	bl	80007d4 <HAL_GetTick>
 80013c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fa04 	bl	80007d4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d902      	bls.n	80013de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	f000 bcdb 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013f8:	2202      	movs	r2, #2
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fa93 f2a3 	rbit	r2, r3
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800141c:	2202      	movs	r2, #2
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fa93 f2a3 	rbit	r2, r3
 800142e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001432:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001436:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x934>)
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001444:	2102      	movs	r1, #2
 8001446:	6019      	str	r1, [r3, #0]
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fa93 f1a3 	rbit	r1, r3
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800145e:	6019      	str	r1, [r3, #0]
  return result;
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0a0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x6a0>
 8001486:	e08d      	b.n	80015a4 <HAL_RCC_OscConfig+0x87c>
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014aa:	601a      	str	r2, [r3, #0]
  return result;
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <HAL_RCC_OscConfig+0x938>)
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	461a      	mov	r2, r3
 80014c6:	2300      	movs	r3, #0
 80014c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff f983 	bl	80007d4 <HAL_GetTick>
 80014ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff f97e 	bl	80007d4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d902      	bls.n	80014ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f000 bc55 	b.w	8001d94 <HAL_RCC_OscConfig+0x106c>
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001516:	2202      	movs	r2, #2
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001554:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x934>)
 8001558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001562:	2102      	movs	r1, #2
 8001564:	6019      	str	r1, [r3, #0]
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f1a3 	rbit	r1, r3
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800157c:	6019      	str	r1, [r3, #0]
  return result;
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d197      	bne.n	80014d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 81a1 	beq.w	80018fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x934>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d116      	bne.n	80015fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_OscConfig+0x934>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_RCC_OscConfig+0x934>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	61d3      	str	r3, [r2, #28]
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_RCC_OscConfig+0x934>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_RCC_OscConfig+0x93c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d11a      	bne.n	800163c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_RCC_OscConfig+0x93c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x93c>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff f8df 	bl	80007d4 <HAL_GetTick>
 8001616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	e009      	b.n	8001630 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff f8da 	bl	80007d4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e3b1      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_OscConfig+0x93c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ef      	beq.n	800161c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10d      	bne.n	8001668 <HAL_RCC_OscConfig+0x940>
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_RCC_OscConfig+0x934>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a02      	ldr	r2, [pc, #8]	; (800165c <HAL_RCC_OscConfig+0x934>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e03c      	b.n	80016d4 <HAL_RCC_OscConfig+0x9ac>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	10908120 	.word	0x10908120
 8001664:	40007000 	.word	0x40007000
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x96a>
 8001678:	4bc1      	ldr	r3, [pc, #772]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4ac0      	ldr	r2, [pc, #768]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	4bbe      	ldr	r3, [pc, #760]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4abd      	ldr	r2, [pc, #756]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 800168a:	f023 0304 	bic.w	r3, r3, #4
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e020      	b.n	80016d4 <HAL_RCC_OscConfig+0x9ac>
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x994>
 80016a2:	4bb7      	ldr	r3, [pc, #732]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4ab6      	ldr	r2, [pc, #728]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4bb4      	ldr	r3, [pc, #720]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4ab3      	ldr	r2, [pc, #716]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x9ac>
 80016bc:	4bb0      	ldr	r3, [pc, #704]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4aaf      	ldr	r2, [pc, #700]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4bad      	ldr	r3, [pc, #692]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4aac      	ldr	r2, [pc, #688]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8081 	beq.w	80017e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff f875 	bl	80007d4 <HAL_GetTick>
 80016ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff f870 	bl	80007d4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e345      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001710:	2202      	movs	r2, #2
 8001712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001734:	2202      	movs	r2, #2
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fa93 f2a3 	rbit	r2, r3
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800174e:	601a      	str	r2, [r3, #0]
  return result;
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001758:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d102      	bne.n	8001774 <HAL_RCC_OscConfig+0xa4c>
 800176e:	4b84      	ldr	r3, [pc, #528]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	e013      	b.n	800179c <HAL_RCC_OscConfig+0xa74>
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	4b79      	ldr	r3, [pc, #484]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017a4:	2102      	movs	r1, #2
 80017a6:	6011      	str	r1, [r2, #0]
 80017a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fa92 f1a2 	rbit	r1, r2
 80017b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017be:	6011      	str	r1, [r2, #0]
  return result;
 80017c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	fab2 f282 	clz	r2, r2
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f002 021f 	and.w	r2, r2, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d084      	beq.n	80016f0 <HAL_RCC_OscConfig+0x9c8>
 80017e6:	e07f      	b.n	80018e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7fe fff4 	bl	80007d4 <HAL_GetTick>
 80017ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7fe ffef 	bl	80007d4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e2c4      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001832:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001836:	2202      	movs	r2, #2
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001850:	601a      	str	r2, [r3, #0]
  return result;
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800185a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0xb4e>
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	e013      	b.n	800189e <HAL_RCC_OscConfig+0xb76>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018a6:	2102      	movs	r1, #2
 80018a8:	6011      	str	r1, [r2, #0]
 80018aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	fa92 f1a2 	rbit	r1, r2
 80018b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018c0:	6011      	str	r1, [r2, #0]
  return result;
 80018c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	fab2 f282 	clz	r2, r2
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f002 021f 	and.w	r2, r2, #31
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d184      	bne.n	80017f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8242 	beq.w	8001d92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_RCC_OscConfig+0xc58>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	f000 8213 	beq.w	8001d42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	f040 8162 	bne.w	8001bf2 <HAL_RCC_OscConfig+0xeca>
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001952:	601a      	str	r2, [r3, #0]
  return result;
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800195c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001968:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7fe ff2e 	bl	80007d4 <HAL_GetTick>
 8001978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	e00c      	b.n	8001998 <HAL_RCC_OscConfig+0xc70>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe ff26 	bl	80007d4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1fd      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019bc:	601a      	str	r2, [r3, #0]
  return result;
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_OscConfig+0xcba>
 80019dc:	4bb0      	ldr	r3, [pc, #704]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	e027      	b.n	8001a32 <HAL_RCC_OscConfig+0xd0a>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a36:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a3e:	6011      	str	r1, [r2, #0]
 8001a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a44:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	fa92 f1a2 	rbit	r1, r2
 8001a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a52:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a56:	6011      	str	r1, [r2, #0]
  return result;
 8001a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d182      	bne.n	8001984 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	497f      	ldr	r1, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ad4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2301      	movs	r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe fe72 	bl	80007d4 <HAL_GetTick>
 8001af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe fe6d 	bl	80007d4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e144      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b2e:	601a      	str	r2, [r3, #0]
  return result;
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_OscConfig+0xe2c>
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e027      	b.n	8001ba4 <HAL_RCC_OscConfig+0xe7c>
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bb0:	6011      	str	r1, [r2, #0]
 8001bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	fa92 f1a2 	rbit	r1, r2
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bc8:	6011      	str	r1, [r2, #0]
  return result;
 8001bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d082      	beq.n	8001af6 <HAL_RCC_OscConfig+0xdce>
 8001bf0:	e0cf      	b.n	8001d92 <HAL_RCC_OscConfig+0x106a>
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c16:	601a      	str	r2, [r3, #0]
  return result;
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	461a      	mov	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe fdcc 	bl	80007d4 <HAL_GetTick>
 8001c3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7fe fdc7 	bl	80007d4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e09e      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c7a:	601a      	str	r2, [r3, #0]
  return result;
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d104      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xf7c>
 8001c9a:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_RCC_OscConfig+0xf78>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e029      	b.n	8001cf4 <HAL_RCC_OscConfig+0xfcc>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_OscConfig+0x1078>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d00:	6011      	str	r1, [r2, #0]
 8001d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d06:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fa92 f1a2 	rbit	r1, r2
 8001d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d14:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d18:	6011      	str	r1, [r2, #0]
  return result;
 8001d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d180      	bne.n	8001c42 <HAL_RCC_OscConfig+0xf1a>
 8001d40:	e027      	b.n	8001d92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e01e      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCC_OscConfig+0x1078>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b09e      	sub	sp, #120	; 0x78
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e162      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b90      	ldr	r3, [pc, #576]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d910      	bls.n	8001dec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b8d      	ldr	r3, [pc, #564]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	498b      	ldr	r1, [pc, #556]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e14a      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	497f      	ldr	r1, [pc, #508]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80dc 	beq.w	8001fd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d13c      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xf6>
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xa6>
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e00f      	b.n	8001e6a <HAL_RCC_ClockConfig+0xc6>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	667b      	str	r3, [r7, #100]	; 0x64
 8001e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e72:	fa92 f2a2 	rbit	r2, r2
 8001e76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d17b      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0f3      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d13c      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x178>
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x128>
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_ClockConfig+0x148>
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13a      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b2      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x1a0>
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1bc>
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2202      	movs	r2, #2
 8001f62:	61ba      	str	r2, [r7, #24]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	fa92 f2a2 	rbit	r2, r2
 8001f6a:	617a      	str	r2, [r7, #20]
  return result;
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	fab2 f282 	clz	r2, r2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f042 0220 	orr.w	r2, r2, #32
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e079      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	491a      	ldr	r1, [pc, #104]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fc18 	bl	80007d4 <HAL_GetTick>
 8001fa4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7fe fc14 	bl	80007d4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e061      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d214      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4906      	ldr	r1, [pc, #24]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e040      	b.n	8002082 <HAL_RCC_ClockConfig+0x2de>
 8002000:	40022000 	.word	0x40022000
 8002004:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	491a      	ldr	r1, [pc, #104]	; (800208c <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x2e8>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4912      	ldr	r1, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x2e8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002046:	f000 f829 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800204a:	4601      	mov	r1, r0
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCC_ClockConfig+0x2e8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	22f0      	movs	r2, #240	; 0xf0
 8002056:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	fa92 f2a2 	rbit	r2, r2
 800205e:	60fa      	str	r2, [r7, #12]
  return result;
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	40d3      	lsrs	r3, r2
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x2ec>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	fa21 f303 	lsr.w	r3, r1, r3
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_RCC_ClockConfig+0x2f0>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_RCC_ClockConfig+0x2f4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe faaa 	bl	80005d4 <HAL_InitTick>
  
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3778      	adds	r7, #120	; 0x78
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	08004838 	.word	0x08004838
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x30>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ca:	e03c      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	e03c      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	fa92 f2a2 	rbit	r2, r2
 80020e4:	607a      	str	r2, [r7, #4]
  return result;
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	40d3      	lsrs	r3, r2
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	220f      	movs	r2, #15
 8002100:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	fa92 f2a2 	rbit	r2, r2
 8002108:	60fa      	str	r2, [r7, #12]
  return result;
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	40d3      	lsrs	r3, r2
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	fbb2 f2f3 	udiv	r2, r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
 8002134:	e004      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_RCC_GetSysClockFreq+0xd0>)
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	623b      	str	r3, [r7, #32]
      break;
 8002144:	e002      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002148:	623b      	str	r3, [r7, #32]
      break;
 800214a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214c:	6a3b      	ldr	r3, [r7, #32]
}
 800214e:	4618      	mov	r0, r3
 8002150:	372c      	adds	r7, #44	; 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	08004850 	.word	0x08004850
 8002168:	08004860 	.word	0x08004860
 800216c:	003d0900 	.word	0x003d0900

08002170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCC_GetHCLKFreq+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000

08002188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800218e:	f7ff ffef 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 8002192:	4601      	mov	r1, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800219c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	603a      	str	r2, [r7, #0]
  return result;
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004848 	.word	0x08004848

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021d2:	f7ff ffcd 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 80021d6:	4601      	mov	r1, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	603a      	str	r2, [r7, #0]
  return result;
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_RCC_GetPCLK2Freq+0x40>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08004848 	.word	0x08004848

08002210 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	220f      	movs	r2, #15
 800221e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_RCC_GetClockConfig+0x60>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b092      	sub	sp, #72	; 0x48
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80cd 	beq.w	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10e      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a8a      	ldr	r2, [pc, #552]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b85      	ldr	r3, [pc, #532]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7fe fa7b 	bl	80007d4 <HAL_GetTick>
 80022de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe fa77 	bl	80007d4 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0ea      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002300:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800230a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d07d      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231a:	429a      	cmp	r2, r3
 800231c:	d076      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	461a      	mov	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002374:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d045      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fa28 	bl	80007d4 <HAL_GetTick>
 8002384:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fa24 	bl	80007d4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e095      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x256>
 800239e:	2302      	movs	r3, #2
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	2302      	movs	r3, #2
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61fb      	str	r3, [r7, #28]
  return result;
 80023b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d102      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	e007      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2202      	movs	r2, #2
 80023e4:	613a      	str	r2, [r7, #16]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	60fa      	str	r2, [r7, #12]
  return result;
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f002 021f 	and.w	r2, r2, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0bd      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	492e      	ldr	r1, [pc, #184]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	4313      	orrs	r3, r2
 800241c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800241e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f023 0210 	bic.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	491a      	ldr	r1, [pc, #104]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4913      	ldr	r1, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	4313      	orrs	r3, r2
 800248a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	490b      	ldr	r1, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4904      	ldr	r1, [pc, #16]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3748      	adds	r7, #72	; 0x48
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	10908100 	.word	0x10908100

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e049      	b.n	8002586 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f841 	bl	800258e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 f9e4 	bl	80028ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e040      	b.n	800263e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_TIM_Base_Start_IT+0xa8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d009      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_TIM_Base_Start_IT+0xac>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_TIM_Base_Start_IT+0xb0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d115      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_TIM_Base_Start_IT+0xb4>)
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d015      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x96>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d011      	beq.n	800263a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e008      	b.n	800263a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e000      	b.n	800263c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40014000 	.word	0x40014000
 8002658:	00010007 	.word	0x00010007

0800265c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d122      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0202 	mvn.w	r2, #2
 8002688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f905 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8f7 	bl	800289a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f908 	bl	80028c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0204 	mvn.w	r2, #4
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8db 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8cd 	bl	800289a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f8de 	bl	80028c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b08      	cmp	r3, #8
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0208 	mvn.w	r2, #8
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2204      	movs	r2, #4
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8b1 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f8a3 	bl	800289a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f8b4 	bl	80028c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b10      	cmp	r3, #16
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b10      	cmp	r3, #16
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0210 	mvn.w	r2, #16
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2208      	movs	r2, #8
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f887 	bl	80028ae <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f879 	bl	800289a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f88a 	bl	80028c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10e      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0201 	mvn.w	r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fd fe76 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d10e      	bne.n	800280c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d107      	bne.n	800280c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8f2 	bl	80029f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281a:	d10e      	bne.n	800283a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8e5 	bl	8002a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d10e      	bne.n	8002866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f838 	bl	80028d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d10e      	bne.n	8002892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d107      	bne.n	8002892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0220 	mvn.w	r2, #32
 800288a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f8a5 	bl	80029dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <TIM_Base_SetConfig+0xdc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x28>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x28>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <TIM_Base_SetConfig+0xe0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <TIM_Base_SetConfig+0xdc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <TIM_Base_SetConfig+0x6a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d00f      	beq.n	8002956 <TIM_Base_SetConfig+0x6a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <TIM_Base_SetConfig+0xe0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00b      	beq.n	8002956 <TIM_Base_SetConfig+0x6a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <TIM_Base_SetConfig+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <TIM_Base_SetConfig+0x6a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <TIM_Base_SetConfig+0xe8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d003      	beq.n	8002956 <TIM_Base_SetConfig+0x6a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <TIM_Base_SetConfig+0xec>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <TIM_Base_SetConfig+0xdc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0xc0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <TIM_Base_SetConfig+0xe4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0xc0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <TIM_Base_SetConfig+0xe8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0xc0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <TIM_Base_SetConfig+0xec>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40014000 	.word	0x40014000
 80029d4:	40014400 	.word	0x40014400
 80029d8:	40014800 	.word	0x40014800

080029dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e040      	b.n	8002aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd fd86 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	; 0x24
 8002a44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8b6 	bl	8002bc8 <UART_SetConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e022      	b.n	8002aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9e0 	bl	8002e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fa67 	bl	8002f78 <UART_CheckIdleState>
 8002aaa:	4603      	mov	r3, r0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d178      	bne.n	8002bbe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_UART_Transmit+0x24>
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e071      	b.n	8002bc0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2221      	movs	r2, #33	; 0x21
 8002ae8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aea:	f7fd fe73 	bl	80007d4 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d108      	bne.n	8002b1c <HAL_UART_Transmit+0x68>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b24:	e030      	b.n	8002b88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fac9 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e03c      	b.n	8002bc0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e008      	b.n	8002b76 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1c8      	bne.n	8002b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2140      	movs	r1, #64	; 0x40
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fa92 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e005      	b.n	8002bc0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b8a      	ldr	r3, [pc, #552]	; (8002e1c <UART_SetConfig+0x254>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	6979      	ldr	r1, [r7, #20]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <UART_SetConfig+0x258>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d120      	bne.n	8002c86 <UART_SetConfig+0xbe>
 8002c44:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <UART_SetConfig+0x25c>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d817      	bhi.n	8002c80 <UART_SetConfig+0xb8>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x90>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c75 	.word	0x08002c75
 8002c60:	08002c7b 	.word	0x08002c7b
 8002c64:	08002c6f 	.word	0x08002c6f
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e01d      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e01a      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c74:	2304      	movs	r3, #4
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e017      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	77fb      	strb	r3, [r7, #31]
 8002c7e:	e014      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c80:	2310      	movs	r3, #16
 8002c82:	77fb      	strb	r3, [r7, #31]
 8002c84:	e011      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <UART_SetConfig+0x260>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <UART_SetConfig+0xce>
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	e009      	b.n	8002caa <UART_SetConfig+0xe2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a64      	ldr	r2, [pc, #400]	; (8002e2c <UART_SetConfig+0x264>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <UART_SetConfig+0xde>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e001      	b.n	8002caa <UART_SetConfig+0xe2>
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d15a      	bne.n	8002d6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d827      	bhi.n	8002d0a <UART_SetConfig+0x142>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <UART_SetConfig+0xf8>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002ce5 	.word	0x08002ce5
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002cf5 	.word	0x08002cf5
 8002ccc:	08002d0b 	.word	0x08002d0b
 8002cd0:	08002cfb 	.word	0x08002cfb
 8002cd4:	08002d0b 	.word	0x08002d0b
 8002cd8:	08002d0b 	.word	0x08002d0b
 8002cdc:	08002d0b 	.word	0x08002d0b
 8002ce0:	08002d03 	.word	0x08002d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f7ff fa50 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	61b8      	str	r0, [r7, #24]
        break;
 8002cea:	e013      	b.n	8002d14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7ff fa6e 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8002cf0:	61b8      	str	r0, [r7, #24]
        break;
 8002cf2:	e00f      	b.n	8002d14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <UART_SetConfig+0x268>)
 8002cf6:	61bb      	str	r3, [r7, #24]
        break;
 8002cf8:	e00c      	b.n	8002d14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfa:	f7ff f9cf 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8002cfe:	61b8      	str	r0, [r7, #24]
        break;
 8002d00:	e008      	b.n	8002d14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	61bb      	str	r3, [r7, #24]
        break;
 8002d08:	e004      	b.n	8002d14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	77bb      	strb	r3, [r7, #30]
        break;
 8002d12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d074      	beq.n	8002e04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	005a      	lsls	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d916      	bls.n	8002d64 <UART_SetConfig+0x19c>
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d212      	bcs.n	8002d64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f023 030f 	bic.w	r3, r3, #15
 8002d46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	89fa      	ldrh	r2, [r7, #14]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e04f      	b.n	8002e04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77bb      	strb	r3, [r7, #30]
 8002d68:	e04c      	b.n	8002e04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d828      	bhi.n	8002dc2 <UART_SetConfig+0x1fa>
 8002d70:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0x1b0>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002dc3 	.word	0x08002dc3
 8002d88:	08002db3 	.word	0x08002db3
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
 8002d98:	08002dbb 	.word	0x08002dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7ff f9f4 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 8002da0:	61b8      	str	r0, [r7, #24]
        break;
 8002da2:	e013      	b.n	8002dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da4:	f7ff fa12 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8002da8:	61b8      	str	r0, [r7, #24]
        break;
 8002daa:	e00f      	b.n	8002dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <UART_SetConfig+0x268>)
 8002dae:	61bb      	str	r3, [r7, #24]
        break;
 8002db0:	e00c      	b.n	8002dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	f7ff f973 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8002db6:	61b8      	str	r0, [r7, #24]
        break;
 8002db8:	e008      	b.n	8002dcc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbe:	61bb      	str	r3, [r7, #24]
        break;
 8002dc0:	e004      	b.n	8002dcc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002dca:	bf00      	nop
    }

    if (pclk != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	085a      	lsrs	r2, r3, #1
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	441a      	add	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d909      	bls.n	8002e00 <UART_SetConfig+0x238>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df2:	d205      	bcs.n	8002e00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	e001      	b.n	8002e04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e10:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	efff69f3 	.word	0xefff69f3
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	40004800 	.word	0x40004800
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01a      	beq.n	8002f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f32:	d10a      	bne.n	8002f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b098      	sub	sp, #96	; 0x60
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f88:	f7fd fc24 	bl	80007d4 <HAL_GetTick>
 8002f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d12e      	bne.n	8002ffa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f88c 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d021      	beq.n	8002ffa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e6      	bne.n	8002fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e062      	b.n	80030c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d149      	bne.n	800309c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f856 	bl	80030c8 <UART_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d03c      	beq.n	800309c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	623b      	str	r3, [r7, #32]
   return(result);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
 8003042:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e6      	bne.n	8003022 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	60fb      	str	r3, [r7, #12]
   return(result);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3308      	adds	r3, #8
 8003072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003074:	61fa      	str	r2, [r7, #28]
 8003076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	617b      	str	r3, [r7, #20]
   return(result);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e011      	b.n	80030c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3758      	adds	r7, #88	; 0x58
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d8:	e049      	b.n	800316e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e0:	d045      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fd fb77 	bl	80007d4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e048      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d031      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d110      	bne.n	800313a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2208      	movs	r2, #8
 800311e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f838 	bl	8003196 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2208      	movs	r2, #8
 800312a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e029      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d111      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f81e 	bl	8003196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e00f      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	429a      	cmp	r2, r3
 800318a:	d0a6      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003196:	b480      	push	{r7}
 8003198:	b095      	sub	sp, #84	; 0x54
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
 80031be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e6      	bne.n	800319e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3308      	adds	r3, #8
 80031ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e5      	bne.n	80031d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003208:	2b01      	cmp	r3, #1
 800320a:	d118      	bne.n	800323e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	60bb      	str	r3, [r7, #8]
   return(result);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f023 0310 	bic.w	r3, r3, #16
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	613b      	str	r3, [r7, #16]
   return(result);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e6      	bne.n	800320c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003252:	bf00      	nop
 8003254:	3754      	adds	r7, #84	; 0x54
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f103 0208 	add.w	r2, r3, #8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003276:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f103 0208 	add.w	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0208 	add.w	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003316:	d103      	bne.n	8003320 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e00c      	b.n	800333a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3308      	adds	r3, #8
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e002      	b.n	800332e <vListInsert+0x2e>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d2f6      	bcs.n	8003328 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6852      	ldr	r2, [r2, #4]
 8003392:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d103      	bne.n	80033a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1e5a      	subs	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08e      	sub	sp, #56	; 0x38
 80033ca:	af04      	add	r7, sp, #16
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xTaskCreateStatic+0x46>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61fb      	str	r3, [r7, #28]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800340c:	2354      	movs	r3, #84	; 0x54
 800340e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b54      	cmp	r3, #84	; 0x54
 8003414:	d00a      	beq.n	800342c <xTaskCreateStatic+0x66>
	__asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	61bb      	str	r3, [r7, #24]
}
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01e      	beq.n	8003470 <xTaskCreateStatic+0xaa>
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003440:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800344a:	2300      	movs	r3, #0
 800344c:	9303      	str	r3, [sp, #12]
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	9302      	str	r3, [sp, #8]
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f850 	bl	8003508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800346a:	f000 f8cd 	bl	8003608 <prvAddNewTaskToReadyList>
 800346e:	e001      	b.n	8003474 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003474:	697b      	ldr	r3, [r7, #20]
	}
 8003476:	4618      	mov	r0, r3
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08c      	sub	sp, #48	; 0x30
 8003482:	af04      	add	r7, sp, #16
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ffa8 	bl	80043e8 <pvPortMalloc>
 8003498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034a0:	2054      	movs	r0, #84	; 0x54
 80034a2:	f000 ffa1 	bl	80043e8 <pvPortMalloc>
 80034a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
 80034b4:	e005      	b.n	80034c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f001 f85a 	bl	8004570 <vPortFree>
 80034bc:	e001      	b.n	80034c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9303      	str	r3, [sp, #12]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f80e 	bl	8003508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ec:	69f8      	ldr	r0, [r7, #28]
 80034ee:	f000 f88b 	bl	8003608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034f2:	2301      	movs	r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e002      	b.n	80034fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003520:	3b01      	subs	r3, #1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <prvInitialiseNewTask+0x48>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	617b      	str	r3, [r7, #20]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	e012      	b.n	800357c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	7819      	ldrb	r1, [r3, #0]
 800355e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	3334      	adds	r3, #52	; 0x34
 8003566:	460a      	mov	r2, r1
 8003568:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d9e9      	bls.n	8003556 <prvInitialiseNewTask+0x4e>
 8003582:	e000      	b.n	8003586 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003584:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	2b06      	cmp	r3, #6
 8003592:	d901      	bls.n	8003598 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003594:	2306      	movs	r3, #6
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	2200      	movs	r2, #0
 80035a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	3304      	adds	r3, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fe75 	bl	800329e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	3318      	adds	r3, #24
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fe70 	bl	800329e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	f1c3 0207 	rsb	r2, r3, #7
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	69b8      	ldr	r0, [r7, #24]
 80035e8:	f000 fcec 	bl	8003fc4 <pxPortInitialiseStack>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035fe:	bf00      	nop
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003610:	f000 fe08 	bl	8004224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003614:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <prvAddNewTaskToReadyList+0xb8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a29      	ldr	r2, [pc, #164]	; (80036c0 <prvAddNewTaskToReadyList+0xb8>)
 800361c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <prvAddNewTaskToReadyList+0xbc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003626:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <prvAddNewTaskToReadyList+0xbc>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <prvAddNewTaskToReadyList+0xb8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d110      	bne.n	8003656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003634:	f000 fa9e 	bl	8003b74 <prvInitialiseTaskLists>
 8003638:	e00d      	b.n	8003656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <prvAddNewTaskToReadyList+0xc0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <prvAddNewTaskToReadyList+0xbc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	429a      	cmp	r2, r3
 800364e:	d802      	bhi.n	8003656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <prvAddNewTaskToReadyList+0xbc>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <prvAddNewTaskToReadyList+0xc4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <prvAddNewTaskToReadyList+0xc4>)
 800365e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <prvAddNewTaskToReadyList+0xc8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4313      	orrs	r3, r2
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <prvAddNewTaskToReadyList+0xc8>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <prvAddNewTaskToReadyList+0xcc>)
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7ff fe15 	bl	80032b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800368e:	f000 fdf9 	bl	8004284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <prvAddNewTaskToReadyList+0xc0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <prvAddNewTaskToReadyList+0xbc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <prvAddNewTaskToReadyList+0xd0>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000460 	.word	0x20000460
 80036c4:	20000360 	.word	0x20000360
 80036c8:	2000046c 	.word	0x2000046c
 80036cc:	2000047c 	.word	0x2000047c
 80036d0:	20000468 	.word	0x20000468
 80036d4:	20000364 	.word	0x20000364
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ea:	463a      	mov	r2, r7
 80036ec:	1d39      	adds	r1, r7, #4
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fd6c 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	460a      	mov	r2, r1
 800370a:	491e      	ldr	r1, [pc, #120]	; (8003784 <vTaskStartScheduler+0xa8>)
 800370c:	481e      	ldr	r0, [pc, #120]	; (8003788 <vTaskStartScheduler+0xac>)
 800370e:	f7ff fe5a 	bl	80033c6 <xTaskCreateStatic>
 8003712:	4603      	mov	r3, r0
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <vTaskStartScheduler+0xb0>)
 8003716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <vTaskStartScheduler+0xb0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e001      	b.n	800372a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d116      	bne.n	800375e <vTaskStartScheduler+0x82>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
}
 8003742:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <vTaskStartScheduler+0xb4>)
 8003746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800374a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <vTaskStartScheduler+0xb8>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <vTaskStartScheduler+0xbc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003758:	f000 fcc2 	bl	80040e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800375c:	e00e      	b.n	800377c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003764:	d10a      	bne.n	800377c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60fb      	str	r3, [r7, #12]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskStartScheduler+0x9e>
}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08004830 	.word	0x08004830
 8003788:	08003b45 	.word	0x08003b45
 800378c:	20000484 	.word	0x20000484
 8003790:	20000480 	.word	0x20000480
 8003794:	2000046c 	.word	0x2000046c
 8003798:	20000464 	.word	0x20000464

0800379c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <vTaskSuspendAll+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <vTaskSuspendAll+0x18>)
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000488 	.word	0x20000488

080037b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <xTaskResumeAll+0x114>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037e4:	f000 fd1e 	bl	8004224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037e8:	4b38      	ldr	r3, [pc, #224]	; (80038cc <xTaskResumeAll+0x114>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	4a37      	ldr	r2, [pc, #220]	; (80038cc <xTaskResumeAll+0x114>)
 80037f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <xTaskResumeAll+0x114>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d161      	bne.n	80038be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037fa:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <xTaskResumeAll+0x118>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d05d      	beq.n	80038be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003802:	e02e      	b.n	8003862 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <xTaskResumeAll+0x11c>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3318      	adds	r3, #24
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fdae 	bl	8003372 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fda9 	bl	8003372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	2201      	movs	r2, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <xTaskResumeAll+0x120>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <xTaskResumeAll+0x120>)
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4a27      	ldr	r2, [pc, #156]	; (80038dc <xTaskResumeAll+0x124>)
 8003840:	441a      	add	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7ff fd35 	bl	80032b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <xTaskResumeAll+0x128>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <xTaskResumeAll+0x12c>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <xTaskResumeAll+0x11c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1cc      	bne.n	8003804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003870:	f000 fa1e 	bl	8003cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <xTaskResumeAll+0x130>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003880:	f000 f846 	bl	8003910 <xTaskIncrementTick>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <xTaskResumeAll+0x12c>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f1      	bne.n	8003880 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <xTaskResumeAll+0x130>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <xTaskResumeAll+0x12c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038aa:	2301      	movs	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <xTaskResumeAll+0x134>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038be:	f000 fce1 	bl	8004284 <vPortExitCritical>

	return xAlreadyYielded;
 80038c2:	68bb      	ldr	r3, [r7, #8]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000488 	.word	0x20000488
 80038d0:	20000460 	.word	0x20000460
 80038d4:	20000420 	.word	0x20000420
 80038d8:	20000468 	.word	0x20000468
 80038dc:	20000364 	.word	0x20000364
 80038e0:	20000360 	.word	0x20000360
 80038e4:	20000474 	.word	0x20000474
 80038e8:	20000470 	.word	0x20000470
 80038ec:	e000ed04 	.word	0xe000ed04

080038f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <xTaskGetTickCount+0x1c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000464 	.word	0x20000464

08003910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391a:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <xTaskIncrementTick+0x150>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 808d 	bne.w	8003a3e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003924:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <xTaskIncrementTick+0x154>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800392c:	4a4d      	ldr	r2, [pc, #308]	; (8003a64 <xTaskIncrementTick+0x154>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d120      	bne.n	800397a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <xTaskIncrementTick+0x158>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <xTaskIncrementTick+0x48>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	603b      	str	r3, [r7, #0]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <xTaskIncrementTick+0x46>
 8003958:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <xTaskIncrementTick+0x158>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <xTaskIncrementTick+0x15c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <xTaskIncrementTick+0x158>)
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4a41      	ldr	r2, [pc, #260]	; (8003a6c <xTaskIncrementTick+0x15c>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <xTaskIncrementTick+0x160>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a3f      	ldr	r2, [pc, #252]	; (8003a70 <xTaskIncrementTick+0x160>)
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	f000 f99b 	bl	8003cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800397a:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <xTaskIncrementTick+0x164>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	429a      	cmp	r2, r3
 8003982:	d34d      	bcc.n	8003a20 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <xTaskIncrementTick+0x158>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xTaskIncrementTick+0x82>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xTaskIncrementTick+0x84>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <xTaskIncrementTick+0x164>)
 800399a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399e:	601a      	str	r2, [r3, #0]
					break;
 80039a0:	e03e      	b.n	8003a20 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <xTaskIncrementTick+0x158>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d203      	bcs.n	80039c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039ba:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <xTaskIncrementTick+0x164>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6013      	str	r3, [r2, #0]
						break;
 80039c0:	e02e      	b.n	8003a20 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fcd3 	bl	8003372 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fcca 	bl	8003372 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <xTaskIncrementTick+0x168>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <xTaskIncrementTick+0x168>)
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <xTaskIncrementTick+0x16c>)
 80039fe:	441a      	add	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7ff fc56 	bl	80032b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <xTaskIncrementTick+0x170>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3b4      	bcc.n	8003984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a1e:	e7b1      	b.n	8003984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <xTaskIncrementTick+0x170>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	4915      	ldr	r1, [pc, #84]	; (8003a7c <xTaskIncrementTick+0x16c>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d907      	bls.n	8003a48 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e004      	b.n	8003a48 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <xTaskIncrementTick+0x174>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <xTaskIncrementTick+0x174>)
 8003a46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <xTaskIncrementTick+0x178>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a54:	697b      	ldr	r3, [r7, #20]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000488 	.word	0x20000488
 8003a64:	20000464 	.word	0x20000464
 8003a68:	20000418 	.word	0x20000418
 8003a6c:	2000041c 	.word	0x2000041c
 8003a70:	20000478 	.word	0x20000478
 8003a74:	20000480 	.word	0x20000480
 8003a78:	20000468 	.word	0x20000468
 8003a7c:	20000364 	.word	0x20000364
 8003a80:	20000360 	.word	0x20000360
 8003a84:	20000470 	.word	0x20000470
 8003a88:	20000474 	.word	0x20000474

08003a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <vTaskSwitchContext+0xa4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <vTaskSwitchContext+0xa8>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003aa0:	e03f      	b.n	8003b22 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <vTaskSwitchContext+0xa8>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <vTaskSwitchContext+0xac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	f1c3 031f 	rsb	r3, r3, #31
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	491f      	ldr	r1, [pc, #124]	; (8003b3c <vTaskSwitchContext+0xb0>)
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	607b      	str	r3, [r7, #4]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <vTaskSwitchContext+0x5a>
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <vTaskSwitchContext+0xb0>)
 8003af4:	4413      	add	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3308      	adds	r3, #8
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d104      	bne.n	8003b18 <vTaskSwitchContext+0x8c>
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <vTaskSwitchContext+0xb4>)
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000488 	.word	0x20000488
 8003b34:	20000474 	.word	0x20000474
 8003b38:	20000468 	.word	0x20000468
 8003b3c:	20000364 	.word	0x20000364
 8003b40:	20000360 	.word	0x20000360

08003b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b4c:	f000 f852 	bl	8003bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <prvIdleTask+0x28>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d9f9      	bls.n	8003b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <prvIdleTask+0x2c>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b68:	e7f0      	b.n	8003b4c <prvIdleTask+0x8>
 8003b6a:	bf00      	nop
 8003b6c:	20000364 	.word	0x20000364
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	e00c      	b.n	8003b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <prvInitialiseTaskLists+0x60>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fb65 	bl	800325e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3301      	adds	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d9ef      	bls.n	8003b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003ba2:	f7ff fb5c 	bl	800325e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ba6:	480d      	ldr	r0, [pc, #52]	; (8003bdc <prvInitialiseTaskLists+0x68>)
 8003ba8:	f7ff fb59 	bl	800325e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bac:	480c      	ldr	r0, [pc, #48]	; (8003be0 <prvInitialiseTaskLists+0x6c>)
 8003bae:	f7ff fb56 	bl	800325e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bb2:	480c      	ldr	r0, [pc, #48]	; (8003be4 <prvInitialiseTaskLists+0x70>)
 8003bb4:	f7ff fb53 	bl	800325e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bb8:	480b      	ldr	r0, [pc, #44]	; (8003be8 <prvInitialiseTaskLists+0x74>)
 8003bba:	f7ff fb50 	bl	800325e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <prvInitialiseTaskLists+0x78>)
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <prvInitialiseTaskLists+0x64>)
 8003bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <prvInitialiseTaskLists+0x7c>)
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <prvInitialiseTaskLists+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000364 	.word	0x20000364
 8003bd8:	200003f0 	.word	0x200003f0
 8003bdc:	20000404 	.word	0x20000404
 8003be0:	20000420 	.word	0x20000420
 8003be4:	20000434 	.word	0x20000434
 8003be8:	2000044c 	.word	0x2000044c
 8003bec:	20000418 	.word	0x20000418
 8003bf0:	2000041c 	.word	0x2000041c

08003bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bfa:	e019      	b.n	8003c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bfc:	f000 fb12 	bl	8004224 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <prvCheckTasksWaitingTermination+0x50>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fbb0 	bl	8003372 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <prvCheckTasksWaitingTermination+0x54>)
 8003c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c26:	f000 fb2d 	bl	8004284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f810 	bl	8003c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <prvCheckTasksWaitingTermination+0x58>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e1      	bne.n	8003bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000434 	.word	0x20000434
 8003c48:	20000460 	.word	0x20000460
 8003c4c:	20000448 	.word	0x20000448

08003c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fc82 	bl	8004570 <vPortFree>
				vPortFree( pxTCB );
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fc7f 	bl	8004570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c72:	e018      	b.n	8003ca6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d103      	bne.n	8003c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fc76 	bl	8004570 <vPortFree>
	}
 8003c84:	e00f      	b.n	8003ca6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d00a      	beq.n	8003ca6 <prvDeleteTCB+0x56>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <prvDeleteTCB+0x54>
	}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <prvResetNextTaskUnblockTime+0x44>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <prvResetNextTaskUnblockTime+0x14>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <prvResetNextTaskUnblockTime+0x16>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <prvResetNextTaskUnblockTime+0x48>)
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cd2:	e008      	b.n	8003ce6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <prvResetNextTaskUnblockTime+0x44>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <prvResetNextTaskUnblockTime+0x48>)
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000418 	.word	0x20000418
 8003cf8:	20000480 	.word	0x20000480

08003cfc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003d0a:	f000 fa8b 	bl	8004224 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003d0e:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d01a      	beq.n	8003d52 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	43d2      	mvns	r2, r2
 8003d26:	400a      	ands	r2, r1
 8003d28:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f000 f8db 	bl	8003ef8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <xTaskNotifyWait+0xb0>)
 8003d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003d52:	f000 fa97 	bl	8004284 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003d56:	f000 fa65 	bl	8004224 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d002      	beq.n	8003d7e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e008      	b.n	8003d90 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	43d2      	mvns	r2, r2
 8003d88:	400a      	ands	r2, r1
 8003d8a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <xTaskNotifyWait+0xac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8003d9a:	f000 fa73 	bl	8004284 <vPortExitCritical>

		return xReturn;
 8003d9e:	697b      	ldr	r3, [r7, #20]
	}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000360 	.word	0x20000360
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <xTaskGenericNotify+0x30>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61bb      	str	r3, [r7, #24]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003de4:	f000 fa1e 	bl	8004224 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dfc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d828      	bhi.n	8003e5e <xTaskGenericNotify+0xae>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <xTaskGenericNotify+0x64>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e5f 	.word	0x08003e5f
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e37 	.word	0x08003e37
 8003e20:	08003e43 	.word	0x08003e43
 8003e24:	08003e4b 	.word	0x08003e4b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003e34:	e013      	b.n	8003e5e <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003e40:	e00d      	b.n	8003e5e <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003e48:	e009      	b.n	8003e5e <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d003      	beq.n	8003e58 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003e56:	e001      	b.n	8003e5c <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003e5c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d139      	bne.n	8003ed8 <xTaskGenericNotify+0x128>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fa82 	bl	8003372 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <xTaskGenericNotify+0x138>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <xTaskGenericNotify+0x138>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <xTaskGenericNotify+0x13c>)
 8003e8e:	441a      	add	r2, r3
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7ff fa0e 	bl	80032b8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <xTaskGenericNotify+0x10a>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	617b      	str	r3, [r7, #20]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <xTaskGenericNotify+0x108>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <xTaskGenericNotify+0x140>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d907      	bls.n	8003ed8 <xTaskGenericNotify+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <xTaskGenericNotify+0x144>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003ed8:	f000 f9d4 	bl	8004284 <vPortExitCritical>

		return xReturn;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3728      	adds	r7, #40	; 0x28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000468 	.word	0x20000468
 8003eec:	20000364 	.word	0x20000364
 8003ef0:	20000360 	.word	0x20000360
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fa2f 	bl	8003372 <uxListRemove>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	2201      	movs	r2, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43da      	mvns	r2, r3
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d10a      	bne.n	8003f50 <prvAddCurrentTaskToDelayedList+0x58>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f40:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	481a      	ldr	r0, [pc, #104]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f4a:	f7ff f9b5 	bl	80032b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f4e:	e026      	b.n	8003f9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d209      	bcs.n	8003f7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7ff f9c3 	bl	8003300 <vListInsert>
}
 8003f7a:	e010      	b.n	8003f9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3304      	adds	r3, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f7ff f9b9 	bl	8003300 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d202      	bcs.n	8003f9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6013      	str	r3, [r2, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000464 	.word	0x20000464
 8003fac:	20000360 	.word	0x20000360
 8003fb0:	20000468 	.word	0x20000468
 8003fb4:	2000044c 	.word	0x2000044c
 8003fb8:	2000041c 	.word	0x2000041c
 8003fbc:	20000418 	.word	0x20000418
 8003fc0:	20000480 	.word	0x20000480

08003fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ff4:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <pxPortInitialiseStack+0x64>)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3b14      	subs	r3, #20
 8003ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f06f 0202 	mvn.w	r2, #2
 8004012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b20      	subs	r3, #32
 8004018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	0800402d 	.word	0x0800402d

0800402c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <prvTaskExitError+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403e:	d00a      	beq.n	8004056 <prvTaskExitError+0x2a>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60fb      	str	r3, [r7, #12]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <prvTaskExitError+0x28>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
}
 8004068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800406a:	bf00      	nop
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0fc      	beq.n	800406c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	2000000c 	.word	0x2000000c
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040da:	bf00      	nop
 80040dc:	e000ed08 	.word	0xe000ed08

080040e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <xPortStartScheduler+0x120>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a46      	ldr	r2, [pc, #280]	; (8004204 <xPortStartScheduler+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10a      	bne.n	8004106 <xPortStartScheduler+0x26>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	613b      	str	r3, [r7, #16]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004106:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <xPortStartScheduler+0x120>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <xPortStartScheduler+0x128>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d10a      	bne.n	8004126 <xPortStartScheduler+0x46>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004126:	4b39      	ldr	r3, [pc, #228]	; (800420c <xPortStartScheduler+0x12c>)
 8004128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b31      	ldr	r3, [pc, #196]	; (8004210 <xPortStartScheduler+0x130>)
 800414c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xPortStartScheduler+0x134>)
 8004150:	2207      	movs	r2, #7
 8004152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004154:	e009      	b.n	800416a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <xPortStartScheduler+0x134>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3b01      	subs	r3, #1
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <xPortStartScheduler+0x134>)
 800415e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d0ef      	beq.n	8004156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004176:	4b27      	ldr	r3, [pc, #156]	; (8004214 <xPortStartScheduler+0x134>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1c3 0307 	rsb	r3, r3, #7
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00a      	beq.n	8004198 <xPortStartScheduler+0xb8>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <xPortStartScheduler+0x134>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <xPortStartScheduler+0x134>)
 80041a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <xPortStartScheduler+0x134>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <xPortStartScheduler+0x134>)
 80041ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <xPortStartScheduler+0x138>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <xPortStartScheduler+0x138>)
 80041bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <xPortStartScheduler+0x138>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <xPortStartScheduler+0x138>)
 80041c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041ce:	f000 f8dd 	bl	800438c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <xPortStartScheduler+0x13c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041d8:	f000 f8fc 	bl	80043d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <xPortStartScheduler+0x140>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <xPortStartScheduler+0x140>)
 80041e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041e8:	f7ff ff66 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041ec:	f7ff fc4e 	bl	8003a8c <vTaskSwitchContext>
	prvTaskExitError();
 80041f0:	f7ff ff1c 	bl	800402c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00
 8004204:	410fc271 	.word	0x410fc271
 8004208:	410fc270 	.word	0x410fc270
 800420c:	e000e400 	.word	0xe000e400
 8004210:	2000048c 	.word	0x2000048c
 8004214:	20000490 	.word	0x20000490
 8004218:	e000ed20 	.word	0xe000ed20
 800421c:	2000000c 	.word	0x2000000c
 8004220:	e000ef34 	.word	0xe000ef34

08004224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800423e:	4b0f      	ldr	r3, [pc, #60]	; (800427c <vPortEnterCritical+0x58>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a0d      	ldr	r2, [pc, #52]	; (800427c <vPortEnterCritical+0x58>)
 8004246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <vPortEnterCritical+0x58>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10f      	bne.n	8004270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortEnterCritical+0x5c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <vPortEnterCritical+0x4c>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	603b      	str	r3, [r7, #0]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <vPortEnterCritical+0x4a>
	}
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	2000000c 	.word	0x2000000c
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <vPortExitCritical+0x50>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <vPortExitCritical+0x24>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	607b      	str	r3, [r7, #4]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <vPortExitCritical+0x50>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <vPortExitCritical+0x50>)
 80042b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <vPortExitCritical+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <vPortExitCritical+0x42>
 80042ba:	2300      	movs	r3, #0
 80042bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c
	...

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f01e 0f10 	tst.w	lr, #16
 80042f0:	bf08      	it	eq
 80042f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004304:	f380 8811 	msr	BASEPRI, r0
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f7ff fbbc 	bl	8003a8c <vTaskSwitchContext>
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f380 8811 	msr	BASEPRI, r0
 800431c:	bc09      	pop	{r0, r3}
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004326:	f01e 0f10 	tst.w	lr, #16
 800432a:	bf08      	it	eq
 800432c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004330:	f380 8809 	msr	PSP, r0
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst>:
 8004340:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
}
 8004360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004362:	f7ff fad5 	bl	8003910 <xTaskIncrementTick>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SysTick_Handler+0x40>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <vPortSetupTimerInterrupt+0x38>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <vPortSetupTimerInterrupt+0x3c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <vPortSetupTimerInterrupt+0x40>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <vPortSetupTimerInterrupt+0x44>)
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <vPortSetupTimerInterrupt+0x34>)
 80043b0:	2207      	movs	r2, #7
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e010 	.word	0xe000e010
 80043c4:	e000e018 	.word	0xe000e018
 80043c8:	20000000 	.word	0x20000000
 80043cc:	10624dd3 	.word	0x10624dd3
 80043d0:	e000e014 	.word	0xe000e014

080043d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043e4 <vPortEnableVFP+0x10>
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043de:	6001      	str	r1, [r0, #0]
 80043e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043e2:	bf00      	nop
 80043e4:	e000ed88 	.word	0xe000ed88

080043e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043f4:	f7ff f9d2 	bl	800379c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043f8:	4b58      	ldr	r3, [pc, #352]	; (800455c <pvPortMalloc+0x174>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004400:	f000 f910 	bl	8004624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004404:	4b56      	ldr	r3, [pc, #344]	; (8004560 <pvPortMalloc+0x178>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 808e 	bne.w	800452e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01d      	beq.n	8004454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004418:	2208      	movs	r2, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	2b00      	cmp	r3, #0
 8004428:	d014      	beq.n	8004454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f023 0307 	bic.w	r3, r3, #7
 8004430:	3308      	adds	r3, #8
 8004432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <pvPortMalloc+0x6c>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d069      	beq.n	800452e <pvPortMalloc+0x146>
 800445a:	4b42      	ldr	r3, [pc, #264]	; (8004564 <pvPortMalloc+0x17c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	d864      	bhi.n	800452e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004464:	4b40      	ldr	r3, [pc, #256]	; (8004568 <pvPortMalloc+0x180>)
 8004466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004468:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <pvPortMalloc+0x180>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800446e:	e004      	b.n	800447a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d903      	bls.n	800448c <pvPortMalloc+0xa4>
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <pvPortMalloc+0x174>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	429a      	cmp	r2, r3
 8004494:	d04b      	beq.n	800452e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2208      	movs	r2, #8
 800449c:	4413      	add	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	2308      	movs	r3, #8
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d91f      	bls.n	80044f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <pvPortMalloc+0xf8>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	613b      	str	r3, [r7, #16]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f000 f8f8 	bl	80046e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <pvPortMalloc+0x17c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <pvPortMalloc+0x17c>)
 8004504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <pvPortMalloc+0x17c>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <pvPortMalloc+0x184>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d203      	bcs.n	800451a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <pvPortMalloc+0x17c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <pvPortMalloc+0x184>)
 8004518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <pvPortMalloc+0x178>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	431a      	orrs	r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800452e:	f7ff f943 	bl	80037b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <pvPortMalloc+0x16a>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <pvPortMalloc+0x168>
	return pvReturn;
 8004552:	69fb      	ldr	r3, [r7, #28]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2000109c 	.word	0x2000109c
 8004560:	200010a8 	.word	0x200010a8
 8004564:	200010a0 	.word	0x200010a0
 8004568:	20001094 	.word	0x20001094
 800456c:	200010a4 	.word	0x200010a4

08004570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d048      	beq.n	8004614 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004582:	2308      	movs	r3, #8
 8004584:	425b      	negs	r3, r3
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <vPortFree+0xac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <vPortFree+0x44>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60fb      	str	r3, [r7, #12]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <vPortFree+0x62>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60bb      	str	r3, [r7, #8]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <vPortFree+0xac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d019      	beq.n	8004614 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <vPortFree+0xac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045f8:	f7ff f8d0 	bl	800379c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <vPortFree+0xb0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4413      	add	r3, r2
 8004606:	4a06      	ldr	r2, [pc, #24]	; (8004620 <vPortFree+0xb0>)
 8004608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800460a:	6938      	ldr	r0, [r7, #16]
 800460c:	f000 f86c 	bl	80046e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004610:	f7ff f8d2 	bl	80037b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004614:	bf00      	nop
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	200010a8 	.word	0x200010a8
 8004620:	200010a0 	.word	0x200010a0

08004624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800462a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800462e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <prvHeapInit+0xac>)
 8004632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3307      	adds	r3, #7
 8004642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0307 	bic.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <prvHeapInit+0xac>)
 8004654:	4413      	add	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <prvHeapInit+0xb0>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <prvHeapInit+0xb0>)
 8004664:	2200      	movs	r2, #0
 8004666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4413      	add	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004670:	2208      	movs	r2, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <prvHeapInit+0xb4>)
 8004684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <prvHeapInit+0xb4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <prvHeapInit+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <prvHeapInit+0xb4>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <prvHeapInit+0xb8>)
 80046b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <prvHeapInit+0xbc>)
 80046ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <prvHeapInit+0xc0>)
 80046be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000494 	.word	0x20000494
 80046d4:	20001094 	.word	0x20001094
 80046d8:	2000109c 	.word	0x2000109c
 80046dc:	200010a4 	.word	0x200010a4
 80046e0:	200010a0 	.word	0x200010a0
 80046e4:	200010a8 	.word	0x200010a8

080046e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046f0:	4b28      	ldr	r3, [pc, #160]	; (8004794 <prvInsertBlockIntoFreeList+0xac>)
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e002      	b.n	80046fc <prvInsertBlockIntoFreeList+0x14>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d8f7      	bhi.n	80046f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d108      	bne.n	800472a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	441a      	add	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	441a      	add	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d118      	bne.n	8004770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <prvInsertBlockIntoFreeList+0xb0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d00d      	beq.n	8004766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	441a      	add	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e008      	b.n	8004778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <prvInsertBlockIntoFreeList+0xb0>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e003      	b.n	8004778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d002      	beq.n	8004786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20001094 	.word	0x20001094
 8004798:	2000109c 	.word	0x2000109c

0800479c <memset>:
 800479c:	4402      	add	r2, r0
 800479e:	4603      	mov	r3, r0
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d100      	bne.n	80047a6 <memset+0xa>
 80047a4:	4770      	bx	lr
 80047a6:	f803 1b01 	strb.w	r1, [r3], #1
 80047aa:	e7f9      	b.n	80047a0 <memset+0x4>

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 f818 	bl	80047f4 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	08004870 	.word	0x08004870
 80047e8:	08004870 	.word	0x08004870
 80047ec:	08004870 	.word	0x08004870
 80047f0:	08004874 	.word	0x08004874

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr


08_Button_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080065a8  080065a8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a8  080065a8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080065b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00001810  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001870  20001870  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000148d8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ec2  00000000  00000000  000349ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d07  00000000  00000000  00038928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021d38  00000000  00000000  0003962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014590  00000000  00000000  0005b367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb075  00000000  00000000  0006f8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004818  00000000  00000000  0013a96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0013f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064b0 	.word	0x080064b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080064b0 	.word	0x080064b0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fb5d 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f851 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f8d9 	bl	8000394 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f8a7 	bl	8000334 <MX_USART1_UART_Init>
  /* definition and creation of defaultTask */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(Task1_Handler, "Task-1", 128, NULL, 3, &Task1_Handle);
 80001e6:	4b19      	ldr	r3, [pc, #100]	; (800024c <main+0x7c>)
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2303      	movs	r3, #3
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	4917      	ldr	r1, [pc, #92]	; (8000250 <main+0x80>)
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <main+0x84>)
 80001f6:	f004 f8d3 	bl	80043a0 <xTaskCreate>
  xTaskCreate(Task2_Handler, "Task-2", 128, NULL, 3, &Task2_Handle);
 80001fa:	4b17      	ldr	r3, [pc, #92]	; (8000258 <main+0x88>)
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2303      	movs	r3, #3
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2280      	movs	r2, #128	; 0x80
 8000206:	4915      	ldr	r1, [pc, #84]	; (800025c <main+0x8c>)
 8000208:	4815      	ldr	r0, [pc, #84]	; (8000260 <main+0x90>)
 800020a:	f004 f8c9 	bl	80043a0 <xTaskCreate>
  xTaskCreate(Task3_Handler, "Task-3", 128, NULL, 5, &Task3_Handle);
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <main+0x94>)
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2305      	movs	r3, #5
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2280      	movs	r2, #128	; 0x80
 800021a:	4913      	ldr	r1, [pc, #76]	; (8000268 <main+0x98>)
 800021c:	4813      	ldr	r0, [pc, #76]	; (800026c <main+0x9c>)
 800021e:	f004 f8bf 	bl	80043a0 <xTaskCreate>
  xTaskCreate(Task4_Handler, "Task-4", 128, NULL, 3, &Task4_Handle);
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <main+0xa0>)
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2303      	movs	r3, #3
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2300      	movs	r3, #0
 800022c:	2280      	movs	r2, #128	; 0x80
 800022e:	4911      	ldr	r1, [pc, #68]	; (8000274 <main+0xa4>)
 8000230:	4811      	ldr	r0, [pc, #68]	; (8000278 <main+0xa8>)
 8000232:	f004 f8b5 	bl	80043a0 <xTaskCreate>
  sem=xSemaphoreCreateCounting(4,0);
 8000236:	2100      	movs	r1, #0
 8000238:	2004      	movs	r0, #4
 800023a:	f003 fa8b 	bl	8003754 <xQueueCreateCountingSemaphore>
 800023e:	4603      	mov	r3, r0
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <main+0xac>)
 8000242:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 8000244:	f004 fa84 	bl	8004750 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x78>
 800024a:	bf00      	nop
 800024c:	20000108 	.word	0x20000108
 8000250:	080064c8 	.word	0x080064c8
 8000254:	08000441 	.word	0x08000441
 8000258:	2000010c 	.word	0x2000010c
 800025c:	080064d0 	.word	0x080064d0
 8000260:	08000475 	.word	0x08000475
 8000264:	20000110 	.word	0x20000110
 8000268:	080064d8 	.word	0x080064d8
 800026c:	080004a9 	.word	0x080004a9
 8000270:	20000114 	.word	0x20000114
 8000274:	080064e0 	.word	0x080064e0
 8000278:	080004e1 	.word	0x080004e1
 800027c:	20000104 	.word	0x20000104

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f006 f824 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fdb1 	bl	8000e3c <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002e0:	f000 f954 	bl	800058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	2302      	movs	r3, #2
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fa:	f107 031c 	add.w	r3, r7, #28
 80002fe:	2101      	movs	r1, #1
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fdd9 	bl	8001eb8 <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800030c:	f000 f93e 	bl	800058c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000310:	2301      	movs	r3, #1
 8000312:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	463b      	mov	r3, r7
 800031a:	4618      	mov	r0, r3
 800031c:	f002 f834 	bl	8002388 <HAL_RCCEx_PeriphCLKConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000326:	f000 f931 	bl	800058c <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	; 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_USART1_UART_Init+0x58>)
 800033a:	4a15      	ldr	r2, [pc, #84]	; (8000390 <MX_USART1_UART_Init+0x5c>)
 800033c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_USART1_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART1_UART_Init+0x58>)
 800035a:	220c      	movs	r2, #12
 800035c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART1_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART1_UART_Init+0x58>)
 8000378:	f002 fbd8 	bl	8002b2c <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000382:	f000 f903 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000007c 	.word	0x2000007c
 8000390:	40013800 	.word	0x40013800

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003aa:	4b23      	ldr	r3, [pc, #140]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a22      	ldr	r2, [pc, #136]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_GPIO_Init+0xa4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <MX_GPIO_Init+0xa8>)
 80003e2:	f000 fce1 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4619      	mov	r1, r3
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f000 fb61 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : green_Pin */
  GPIO_InitStruct.Pin = green_Pin;
 8000402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(green_GPIO_Port, &GPIO_InitStruct);
 8000414:	f107 030c 	add.w	r3, r7, #12
 8000418:	4619      	mov	r1, r3
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <MX_GPIO_Init+0xa8>)
 800041c:	f000 fb52 	bl	8000ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2105      	movs	r1, #5
 8000424:	2006      	movs	r0, #6
 8000426:	f000 fb23 	bl	8000a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800042a:	2006      	movs	r0, #6
 800042c:	f000 fb3c 	bl	8000aa8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40021000 	.word	0x40021000
 800043c:	48000400 	.word	0x48000400

08000440 <Task1_Handler>:

/* USER CODE BEGIN 4 */

void Task1_Handler(void *param)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(sem,portMAX_DELAY);
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <Task1_Handler+0x28>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000450:	4618      	mov	r0, r3
 8000452:	f003 fcb7 	bl	8003dc4 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task1:Aquired Semaphore\r\n", strlen("Task1:Aquired Semaphore\r\n"), HAL_MAX_DELAY);
 8000456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045a:	2219      	movs	r2, #25
 800045c:	4903      	ldr	r1, [pc, #12]	; (800046c <Task1_Handler+0x2c>)
 800045e:	4804      	ldr	r0, [pc, #16]	; (8000470 <Task1_Handler+0x30>)
 8000460:	f002 fbb2 	bl	8002bc8 <HAL_UART_Transmit>
		xSemaphoreTake(sem,portMAX_DELAY);
 8000464:	e7f0      	b.n	8000448 <Task1_Handler+0x8>
 8000466:	bf00      	nop
 8000468:	20000104 	.word	0x20000104
 800046c:	080064e8 	.word	0x080064e8
 8000470:	2000007c 	.word	0x2000007c

08000474 <Task2_Handler>:
//		vTaskSuspend(NULL);
	}
}
void Task2_Handler(void *param)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(sem,portMAX_DELAY);
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <Task2_Handler+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fc9d 	bl	8003dc4 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task2:Aquired Semaphore\r\n", strlen("Task2:Aquired Semaphore\r\n"), HAL_MAX_DELAY);
 800048a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800048e:	2219      	movs	r2, #25
 8000490:	4903      	ldr	r1, [pc, #12]	; (80004a0 <Task2_Handler+0x2c>)
 8000492:	4804      	ldr	r0, [pc, #16]	; (80004a4 <Task2_Handler+0x30>)
 8000494:	f002 fb98 	bl	8002bc8 <HAL_UART_Transmit>
		xSemaphoreTake(sem,portMAX_DELAY);
 8000498:	e7f0      	b.n	800047c <Task2_Handler+0x8>
 800049a:	bf00      	nop
 800049c:	20000104 	.word	0x20000104
 80004a0:	08006504 	.word	0x08006504
 80004a4:	2000007c 	.word	0x2000007c

080004a8 <Task3_Handler>:
//		vTaskSuspend(NULL);
	}
}
void Task3_Handler(void *param)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(sem,portMAX_DELAY);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <Task3_Handler+0x2c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004b8:	4618      	mov	r0, r3
 80004ba:	f003 fc83 	bl	8003dc4 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task3:Aquired Semaphore\r\n", strlen("Task3:Aquired Semaphore\r\n"), HAL_MAX_DELAY);
 80004be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004c2:	2219      	movs	r2, #25
 80004c4:	4904      	ldr	r1, [pc, #16]	; (80004d8 <Task3_Handler+0x30>)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <Task3_Handler+0x34>)
 80004c8:	f002 fb7e 	bl	8002bc8 <HAL_UART_Transmit>
		vTaskSuspend(NULL);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f004 f8ad 	bl	800462c <vTaskSuspend>
		xSemaphoreTake(sem,portMAX_DELAY);
 80004d2:	e7ed      	b.n	80004b0 <Task3_Handler+0x8>
 80004d4:	20000104 	.word	0x20000104
 80004d8:	08006520 	.word	0x08006520
 80004dc:	2000007c 	.word	0x2000007c

080004e0 <Task4_Handler>:
	}
}
void Task4_Handler(void *param)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(sem,portMAX_DELAY);
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <Task4_Handler+0x28>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 fc67 	bl	8003dc4 <xQueueSemaphoreTake>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Task4:Aquired Semaphore\r\n", strlen("Task4:Aquired Semaphore\r\n"), HAL_MAX_DELAY);
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	2219      	movs	r2, #25
 80004fc:	4903      	ldr	r1, [pc, #12]	; (800050c <Task4_Handler+0x2c>)
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <Task4_Handler+0x30>)
 8000500:	f002 fb62 	bl	8002bc8 <HAL_UART_Transmit>
		xSemaphoreTake(sem,portMAX_DELAY);
 8000504:	e7f0      	b.n	80004e8 <Task4_Handler+0x8>
 8000506:	bf00      	nop
 8000508:	20000104 	.word	0x20000104
 800050c:	0800653c 	.word	0x0800653c
 8000510:	2000007c 	.word	0x2000007c

08000514 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d117      	bne.n	8000554 <HAL_GPIO_EXTI_Callback+0x40>
	{
		HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <HAL_GPIO_EXTI_Callback+0x48>)
 800052a:	f000 fc55 	bl	8000dd8 <HAL_GPIO_TogglePin>
		BaseType_t CheckYieldRequired;
		xSemaphoreGiveFromISR(sem,&CheckYieldRequired);
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f107 020c 	add.w	r2, r7, #12
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fad5 	bl	8003ae8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(CheckYieldRequired);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d007      	beq.n	8000554 <HAL_GPIO_EXTI_Callback+0x40>
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <HAL_GPIO_EXTI_Callback+0x50>)
 8000546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	f3bf 8f6f 	isb	sy

	}

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000400 	.word	0x48000400
 8000560:	20000104 	.word	0x20000104
 8000564:	e000ed04 	.word	0xe000ed04

08000568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800057a:	f000 f9a1 	bl	80008c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40001000 	.word	0x40001000

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
}
 8000592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000594:	e7fe      	b.n	8000594 <Error_Handler+0x8>
	...

08000598 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000118 	.word	0x20000118
 80005c8:	200001b8 	.word	0x200001b8

080005cc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <vApplicationGetTimerTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ea:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	200003b8 	.word	0x200003b8
 80005fc:	20000458 	.word	0x20000458

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_MspInit+0x4c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_MspInit+0x4c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_MspInit+0x4c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_MspInit+0x4c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_MspInit+0x4c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_MspInit+0x4c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	210f      	movs	r1, #15
 800063a:	f06f 0001 	mvn.w	r0, #1
 800063e:	f000 fa17 	bl	8000a70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <HAL_UART_MspInit+0x7c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d127      	bne.n	80006c2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <HAL_UART_MspInit+0x80>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <HAL_UART_MspInit+0x80>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_UART_MspInit+0x80>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_MspInit+0x80>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_UART_MspInit+0x80>)
 8000690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_UART_MspInit+0x80>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a2:	23c0      	movs	r3, #192	; 0xc0
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006b2:	2307      	movs	r3, #7
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_UART_MspInit+0x84>)
 80006be:	f000 fa01 	bl	8000ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400

080006d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006e8:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <HAL_InitTick+0xe0>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <HAL_InitTick+0xe0>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <HAL_InitTick+0xe0>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000700:	f107 0210 	add.w	r2, r7, #16
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fe0a 	bl	8002324 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000716:	2b00      	cmp	r3, #0
 8000718:	d103      	bne.n	8000722 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800071a:	f001 fdbf 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 800071e:	6378      	str	r0, [r7, #52]	; 0x34
 8000720:	e004      	b.n	800072c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000722:	f001 fdbb 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8000726:	4603      	mov	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <HAL_InitTick+0xe4>)
 8000730:	fba2 2303 	umull	r2, r3, r2, r3
 8000734:	0c9b      	lsrs	r3, r3, #18
 8000736:	3b01      	subs	r3, #1
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <HAL_InitTick+0xe8>)
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <HAL_InitTick+0xec>)
 800073e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_InitTick+0xe8>)
 8000742:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000746:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <HAL_InitTick+0xe8>)
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_InitTick+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_InitTick+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_InitTick+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <HAL_InitTick+0xe8>)
 8000762:	f001 ff47 	bl	80025f4 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800076c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000770:	2b00      	cmp	r3, #0
 8000772:	d11b      	bne.n	80007ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <HAL_InitTick+0xe8>)
 8000776:	f001 ff9f 	bl	80026b8 <HAL_TIM_Base_Start_IT>
 800077a:	4603      	mov	r3, r0
 800077c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000784:	2b00      	cmp	r3, #0
 8000786:	d111      	bne.n	80007ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000788:	2036      	movs	r0, #54	; 0x36
 800078a:	f000 f98d 	bl	8000aa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d808      	bhi.n	80007a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	2036      	movs	r0, #54	; 0x36
 800079a:	f000 f969 	bl	8000a70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_InitTick+0xf0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e002      	b.n	80007ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	431bde83 	.word	0x431bde83
 80007c0:	20000858 	.word	0x20000858
 80007c4:	40001000 	.word	0x40001000
 80007c8:	20000004 	.word	0x20000004

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 fb05 	bl	8000e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <TIM6_DAC1_IRQHandler+0x10>)
 800080e:	f001 ffaf 	bl	8002770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000858 	.word	0x20000858

0800081c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff ffea 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f005 fd93 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fcad 	bl	80001d0 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000884:	080065b0 	.word	0x080065b0
  ldr r2, =_sbss
 8000888:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800088c:	20001870 	.word	0x20001870

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f8d8 	bl	8000a5a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f7ff ff14 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fea6 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200008a4 	.word	0x200008a4

080008e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200008a4 	.word	0x200008a4

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ff4c 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a82:	f7ff ff61 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000a86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	6978      	ldr	r0, [r7, #20]
 8000a8e:	f7ff ffb1 	bl	80009f4 <NVIC_EncodePriority>
 8000a92:	4602      	mov	r2, r0
 8000a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff80 	bl	80009a0 <__NVIC_SetPriority>
}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff54 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e14e      	b.n	8000d72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8140 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 809a 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b52      	ldr	r3, [pc, #328]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2d4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1d4>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb6:	4937      	ldr	r1, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f47f aea9 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	041a      	lsls	r2, r3, #16
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43d9      	mvns	r1, r3
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	400b      	ands	r3, r1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e18:	695a      	ldr	r2, [r3, #20]
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fb72 	bl	8000514 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f001 b823 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 817d 	beq.w	8001172 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e78:	4bbc      	ldr	r3, [pc, #752]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d00c      	beq.n	8000e9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e84:	4bb9      	ldr	r3, [pc, #740]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d15c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x10e>
 8000e90:	4bb6      	ldr	r3, [pc, #728]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9c:	d155      	bne.n	8000f4a <HAL_RCC_OscConfig+0x10e>
 8000e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	fab3 f383 	clz	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	095b      	lsrs	r3, r3, #5
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d102      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x94>
 8000eca:	4ba8      	ldr	r3, [pc, #672]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0xc0>
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000eec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ef8:	4b9c      	ldr	r3, [pc, #624]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f08:	fa92 f2a2 	rbit	r2, r2
 8000f0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f14:	fab2 f282 	clz	r2, r2
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	f042 0220 	orr.w	r2, r2, #32
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	f002 021f 	and.w	r2, r2, #31
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 811f 	beq.w	8001170 <HAL_RCC_OscConfig+0x334>
 8000f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f040 8116 	bne.w	8001170 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f000 bfaf 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12e>
 8000f5c:	4b83      	ldr	r3, [pc, #524]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a82      	ldr	r2, [pc, #520]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e036      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x158>
 8000f7a:	4b7c      	ldr	r3, [pc, #496]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7b      	ldr	r2, [pc, #492]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b79      	ldr	r3, [pc, #484]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a78      	ldr	r2, [pc, #480]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e021      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x184>
 8000fa6:	4b71      	ldr	r3, [pc, #452]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a70      	ldr	r2, [pc, #448]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6d      	ldr	r2, [pc, #436]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x19c>
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a66      	ldr	r2, [pc, #408]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f023 020f 	bic.w	r2, r3, #15
 8000fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	495f      	ldr	r1, [pc, #380]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d059      	beq.n	80010b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fc71 	bl	80008e8 <HAL_GetTick>
 8001006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	e00a      	b.n	8001022 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc6c 	bl	80008e8 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	; 0x64
 800101a:	d902      	bls.n	8001022 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	f000 bf43 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 8001022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001026:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001036:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	095b      	lsrs	r3, r3, #5
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d102      	bne.n	8001054 <HAL_RCC_OscConfig+0x218>
 800104e:	4b47      	ldr	r3, [pc, #284]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	e015      	b.n	8001080 <HAL_RCC_OscConfig+0x244>
 8001054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001058:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001070:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_RCC_OscConfig+0x330>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001084:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001088:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800108c:	fa92 f2a2 	rbit	r2, r2
 8001090:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001094:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	f042 0220 	orr.w	r2, r2, #32
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ab      	beq.n	800100c <HAL_RCC_OscConfig+0x1d0>
 80010b4:	e05d      	b.n	8001172 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc17 	bl	80008e8 <HAL_GetTick>
 80010ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fc12 	bl	80008e8 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d902      	bls.n	80010d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	f000 bee9 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 80010d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x2cc>
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e015      	b.n	8001134 <HAL_RCC_OscConfig+0x2f8>
 8001108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001124:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_RCC_OscConfig+0x330>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001138:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800113c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001140:	fa92 f2a2 	rbit	r2, r2
 8001144:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001148:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800114c:	fab2 f282 	clz	r2, r2
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f002 021f 	and.w	r2, r2, #31
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ab      	bne.n	80010c0 <HAL_RCC_OscConfig+0x284>
 8001168:	e003      	b.n	8001172 <HAL_RCC_OscConfig+0x336>
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 817d 	beq.w	8001482 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001188:	4ba6      	ldr	r3, [pc, #664]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001194:	4ba3      	ldr	r3, [pc, #652]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d172      	bne.n	8001286 <HAL_RCC_OscConfig+0x44a>
 80011a0:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d16c      	bne.n	8001286 <HAL_RCC_OscConfig+0x44a>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x3a0>
 80011d6:	4b93      	ldr	r3, [pc, #588]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e013      	b.n	8001204 <HAL_RCC_OscConfig+0x3c8>
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001200:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2202      	movs	r2, #2
 8001206:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800120a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001216:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f002 021f 	and.w	r2, r2, #31
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <HAL_RCC_OscConfig+0x410>
 8001236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d002      	beq.n	800124c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 be2e 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b75      	ldr	r3, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	21f8      	movs	r1, #248	; 0xf8
 8001262:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800126a:	fa91 f1a1 	rbit	r1, r1
 800126e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001272:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001276:	fab1 f181 	clz	r1, r1
 800127a:	b2c9      	uxtb	r1, r1
 800127c:	408b      	lsls	r3, r1
 800127e:	4969      	ldr	r1, [pc, #420]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	e0fd      	b.n	8001482 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8088 	beq.w	80013a8 <HAL_RCC_OscConfig+0x56c>
 8001298:	2301      	movs	r3, #1
 800129a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	461a      	mov	r2, r3
 80012c0:	2301      	movs	r3, #1
 80012c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb10 	bl	80008e8 <HAL_GetTick>
 80012c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fb0b 	bl	80008e8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d902      	bls.n	80012e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	f000 bde2 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d102      	bne.n	8001314 <HAL_RCC_OscConfig+0x4d8>
 800130e:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	e013      	b.n	800133c <HAL_RCC_OscConfig+0x500>
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800132c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2202      	movs	r2, #2
 800133e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001342:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001346:	fa92 f2a2 	rbit	r2, r2
 800134a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800134e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0af      	beq.n	80012ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	21f8      	movs	r1, #248	; 0xf8
 8001384:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800138c:	fa91 f1a1 	rbit	r1, r1
 8001390:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001394:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001398:	fab1 f181 	clz	r1, r1
 800139c:	b2c9      	uxtb	r1, r1
 800139e:	408b      	lsls	r3, r1
 80013a0:	4920      	ldr	r1, [pc, #128]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
 80013a6:	e06c      	b.n	8001482 <HAL_RCC_OscConfig+0x646>
 80013a8:	2301      	movs	r3, #1
 80013aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fa88 	bl	80008e8 <HAL_GetTick>
 80013d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa83 	bl	80008e8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d902      	bls.n	80013f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	f000 bd5a 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d104      	bne.n	8001428 <HAL_RCC_OscConfig+0x5ec>
 800141e:	4b01      	ldr	r3, [pc, #4]	; (8001424 <HAL_RCC_OscConfig+0x5e8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x614>
 8001424:	40021000 	.word	0x40021000
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001440:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800144c:	4bc8      	ldr	r3, [pc, #800]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2202      	movs	r2, #2
 8001452:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001456:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800145a:	fa92 f2a2 	rbit	r2, r2
 800145e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001462:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001466:	fab2 f282 	clz	r2, r2
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	f042 0220 	orr.w	r2, r2, #32
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f002 021f 	and.w	r2, r2, #31
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ad      	bne.n	80013de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8110 	beq.w	80016b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d079      	beq.n	800159c <HAL_RCC_OscConfig+0x760>
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	4bab      	ldr	r3, [pc, #684]	; (8001774 <HAL_RCC_OscConfig+0x938>)
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	461a      	mov	r2, r3
 80014ce:	2301      	movs	r3, #1
 80014d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fa09 	bl	80008e8 <HAL_GetTick>
 80014d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fa04 	bl	80008e8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d902      	bls.n	80014f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f000 bcdb 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800154a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154c:	4b88      	ldr	r3, [pc, #544]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 800154e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001558:	2102      	movs	r1, #2
 800155a:	6019      	str	r1, [r3, #0]
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f1a3 	rbit	r1, r3
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001572:	6019      	str	r1, [r3, #0]
  return result;
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0a0      	beq.n	80014dc <HAL_RCC_OscConfig+0x6a0>
 800159a:	e08d      	b.n	80016b8 <HAL_RCC_OscConfig+0x87c>
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fa93 f2a3 	rbit	r2, r3
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015be:	601a      	str	r2, [r3, #0]
  return result;
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x938>)
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	2300      	movs	r3, #0
 80015dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f983 	bl	80008e8 <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff f97e 	bl	80008e8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d902      	bls.n	80015fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	f000 bc55 	b.w	8001ea8 <HAL_RCC_OscConfig+0x106c>
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	fa93 f2a3 	rbit	r2, r3
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800164e:	2202      	movs	r2, #2
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001668:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 800166c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001676:	2102      	movs	r1, #2
 8001678:	6019      	str	r1, [r3, #0]
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f1a3 	rbit	r1, r3
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001690:	6019      	str	r1, [r3, #0]
  return result;
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d197      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 81a1 	beq.w	8001a10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d116      	bne.n	800170e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	61d3      	str	r3, [r2, #28]
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001706:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001708:	2301      	movs	r3, #1
 800170a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x93c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x93c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_RCC_OscConfig+0x93c>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001726:	f7ff f8df 	bl	80008e8 <HAL_GetTick>
 800172a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	e009      	b.n	8001744 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff f8da 	bl	80008e8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e3b1      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x93c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ef      	beq.n	8001730 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x940>
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a02      	ldr	r2, [pc, #8]	; (8001770 <HAL_RCC_OscConfig+0x934>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e03c      	b.n	80017e8 <HAL_RCC_OscConfig+0x9ac>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	10908120 	.word	0x10908120
 8001778:	40007000 	.word	0x40007000
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x96a>
 800178c:	4bc1      	ldr	r3, [pc, #772]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4ac0      	ldr	r2, [pc, #768]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	4bbe      	ldr	r3, [pc, #760]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4abd      	ldr	r2, [pc, #756]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	6213      	str	r3, [r2, #32]
 80017a4:	e020      	b.n	80017e8 <HAL_RCC_OscConfig+0x9ac>
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x994>
 80017b6:	4bb7      	ldr	r3, [pc, #732]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4ab6      	ldr	r2, [pc, #728]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4bb4      	ldr	r3, [pc, #720]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4ab3      	ldr	r2, [pc, #716]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0x9ac>
 80017d0:	4bb0      	ldr	r3, [pc, #704]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4aaf      	ldr	r2, [pc, #700]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	4bad      	ldr	r3, [pc, #692]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4aac      	ldr	r2, [pc, #688]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8081 	beq.w	80018fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff f875 	bl	80008e8 <HAL_GetTick>
 80017fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff f870 	bl	80008e8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e345      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001848:	2202      	movs	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001862:	601a      	str	r2, [r3, #0]
  return result;
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800186c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d102      	bne.n	8001888 <HAL_RCC_OscConfig+0xa4c>
 8001882:	4b84      	ldr	r3, [pc, #528]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	e013      	b.n	80018b0 <HAL_RCC_OscConfig+0xa74>
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001890:	2202      	movs	r2, #2
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018b8:	2102      	movs	r1, #2
 80018ba:	6011      	str	r1, [r2, #0]
 80018bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	fa92 f1a2 	rbit	r1, r2
 80018ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018d2:	6011      	str	r1, [r2, #0]
  return result;
 80018d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d084      	beq.n	8001804 <HAL_RCC_OscConfig+0x9c8>
 80018fa:	e07f      	b.n	80019fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7fe fff4 	bl	80008e8 <HAL_GetTick>
 8001900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe ffef 	bl	80008e8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e2c4      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	fa93 f2a3 	rbit	r2, r3
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800194a:	2202      	movs	r2, #2
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001964:	601a      	str	r2, [r3, #0]
  return result;
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800196e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0xb4e>
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	e013      	b.n	80019b2 <HAL_RCC_OscConfig+0xb76>
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001992:	2202      	movs	r2, #2
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fa93 f2a3 	rbit	r2, r3
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ba:	2102      	movs	r1, #2
 80019bc:	6011      	str	r1, [r2, #0]
 80019be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019d4:	6011      	str	r1, [r2, #0]
  return result;
 80019d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fab2 f282 	clz	r2, r2
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f002 021f 	and.w	r2, r2, #31
 80019f0:	2101      	movs	r1, #1
 80019f2:	fa01 f202 	lsl.w	r2, r1, r2
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d184      	bne.n	8001906 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8242 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_RCC_OscConfig+0xc58>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	f000 8213 	beq.w	8001e56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	f040 8162 	bne.w	8001d06 <HAL_RCC_OscConfig+0xeca>
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a66:	601a      	str	r2, [r3, #0]
  return result;
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	461a      	mov	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe ff2e 	bl	80008e8 <HAL_GetTick>
 8001a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	e00c      	b.n	8001aac <HAL_RCC_OscConfig+0xc70>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe ff26 	bl	80008e8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1fd      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ad0:	601a      	str	r2, [r3, #0]
  return result;
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_OscConfig+0xcba>
 8001af0:	4bb0      	ldr	r3, [pc, #704]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e027      	b.n	8001b46 <HAL_RCC_OscConfig+0xd0a>
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b52:	6011      	str	r1, [r2, #0]
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fa92 f1a2 	rbit	r1, r2
 8001b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b6a:	6011      	str	r1, [r2, #0]
  return result;
 8001b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d182      	bne.n	8001a98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	497f      	ldr	r1, [pc, #508]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bde:	601a      	str	r2, [r3, #0]
  return result;
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001be8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fe72 	bl	80008e8 <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe fe6d 	bl	80008e8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e144      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c42:	601a      	str	r2, [r3, #0]
  return result;
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_OscConfig+0xe2c>
 8001c62:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e027      	b.n	8001cb8 <HAL_RCC_OscConfig+0xe7c>
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fa92 f1a2 	rbit	r1, r2
 8001cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cdc:	6011      	str	r1, [r2, #0]
  return result;
 8001cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d082      	beq.n	8001c0a <HAL_RCC_OscConfig+0xdce>
 8001d04:	e0cf      	b.n	8001ea6 <HAL_RCC_OscConfig+0x106a>
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d2a:	601a      	str	r2, [r3, #0]
  return result;
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fdcc 	bl	80008e8 <HAL_GetTick>
 8001d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d54:	e009      	b.n	8001d6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d56:	f7fe fdc7 	bl	80008e8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e09e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d8e:	601a      	str	r2, [r3, #0]
  return result;
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d104      	bne.n	8001db8 <HAL_RCC_OscConfig+0xf7c>
 8001dae:	4b01      	ldr	r3, [pc, #4]	; (8001db4 <HAL_RCC_OscConfig+0xf78>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e029      	b.n	8001e08 <HAL_RCC_OscConfig+0xfcc>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCC_OscConfig+0x1078>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e14:	6011      	str	r1, [r2, #0]
 8001e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fa92 f1a2 	rbit	r1, r2
 8001e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e2c:	6011      	str	r1, [r2, #0]
  return result;
 8001e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f002 021f 	and.w	r2, r2, #31
 8001e48:	2101      	movs	r1, #1
 8001e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d180      	bne.n	8001d56 <HAL_RCC_OscConfig+0xf1a>
 8001e54:	e027      	b.n	8001ea6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01e      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_OscConfig+0x1078>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09e      	sub	sp, #120	; 0x78
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e162      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b8d      	ldr	r3, [pc, #564]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0207 	bic.w	r2, r3, #7
 8001ee6:	498b      	ldr	r1, [pc, #556]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e14a      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	497f      	ldr	r1, [pc, #508]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80dc 	beq.w	80020e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d13c      	bne.n	8001fae <HAL_RCC_ClockConfig+0xf6>
 8001f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xa6>
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	e00f      	b.n	8001f7e <HAL_RCC_ClockConfig+0xc6>
 8001f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
 8001f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f002 021f 	and.w	r2, r2, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d17b      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0f3      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d13c      	bne.n	8002030 <HAL_RCC_ClockConfig+0x178>
 8001fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d102      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x128>
 8001fda:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_ClockConfig+0x148>
 8001fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
 8001fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002004:	63ba      	str	r2, [r7, #56]	; 0x38
 8002006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800200e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002010:	fab2 f282 	clz	r2, r2
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f042 0220 	orr.w	r2, r2, #32
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	f002 021f 	and.w	r2, r2, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d13a      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b2      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
 8002030:	2302      	movs	r3, #2
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_RCC_ClockConfig+0x1a0>
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e00d      	b.n	8002074 <HAL_RCC_ClockConfig+0x1bc>
 8002058:	2302      	movs	r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2202      	movs	r2, #2
 8002076:	61ba      	str	r2, [r7, #24]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	617a      	str	r2, [r7, #20]
  return result;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e079      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	491a      	ldr	r1, [pc, #104]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fc18 	bl	80008e8 <HAL_GetTick>
 80020b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe fc14 	bl	80008e8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e061      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d214      	bcs.n	800211c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4906      	ldr	r1, [pc, #24]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_RCC_ClockConfig+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e040      	b.n	8002196 <HAL_RCC_ClockConfig+0x2de>
 8002114:	40022000 	.word	0x40022000
 8002118:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_ClockConfig+0x2e8>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4912      	ldr	r1, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800215a:	f000 f829 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800215e:	4601      	mov	r1, r0
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_RCC_ClockConfig+0x2e8>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002168:	22f0      	movs	r2, #240	; 0xf0
 800216a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	60fa      	str	r2, [r7, #12]
  return result;
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	40d3      	lsrs	r3, r2
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x2ec>)
 8002180:	5cd3      	ldrb	r3, [r2, r3]
 8002182:	fa21 f303 	lsr.w	r3, r1, r3
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_RCC_ClockConfig+0x2f0>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_RCC_ClockConfig+0x2f4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe faa2 	bl	80006d8 <HAL_InitTick>
  
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3778      	adds	r7, #120	; 0x78
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08006570 	.word	0x08006570
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x30>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x36>
 80021de:	e03c      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e2:	623b      	str	r3, [r7, #32]
      break;
 80021e4:	e03c      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	fa92 f2a2 	rbit	r2, r2
 80021f8:	607a      	str	r2, [r7, #4]
  return result;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	40d3      	lsrs	r3, r2
 8002204:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc0>)
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	220f      	movs	r2, #15
 8002214:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	60fa      	str	r2, [r7, #12]
  return result;
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	40d3      	lsrs	r3, r2
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_RCC_GetSysClockFreq+0xcc>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
 8002248:	e004      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <HAL_RCC_GetSysClockFreq+0xd0>)
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e002      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800225c:	623b      	str	r3, [r7, #32]
      break;
 800225e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002260:	6a3b      	ldr	r3, [r7, #32]
}
 8002262:	4618      	mov	r0, r3
 8002264:	372c      	adds	r7, #44	; 0x2c
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	007a1200 	.word	0x007a1200
 8002278:	08006588 	.word	0x08006588
 800227c:	08006598 	.word	0x08006598
 8002280:	003d0900 	.word	0x003d0900

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_GetHCLKFreq+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022a2:	f7ff ffef 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a6:	4601      	mov	r1, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	603a      	str	r2, [r7, #0]
  return result;
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08006580 	.word	0x08006580

080022e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022e6:	f7ff ffcd 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022ea:	4601      	mov	r1, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	603a      	str	r2, [r7, #0]
  return result;
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x40>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	08006580 	.word	0x08006580

08002324 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	220f      	movs	r2, #15
 8002332:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_GetClockConfig+0x5c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_RCC_GetClockConfig+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0207 	and.w	r2, r3, #7
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40022000 	.word	0x40022000

08002388 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b092      	sub	sp, #72	; 0x48
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80cd 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ac:	4b8e      	ldr	r3, [pc, #568]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10e      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	61d3      	str	r3, [r2, #28]
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fa7b 	bl	80008e8 <HAL_GetTick>
 80023f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fa77 	bl	80008e8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0ea      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002414:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d07d      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242e:	429a      	cmp	r2, r3
 8002430:	d076      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002432:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	461a      	mov	r2, r3
 800245c:	2301      	movs	r3, #1
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d045      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fa28 	bl	80008e8 <HAL_GetTick>
 8002498:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe fa24 	bl	80008e8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e095      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x256>
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	2302      	movs	r3, #2
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	61fb      	str	r3, [r7, #28]
  return result;
 80024ca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d102      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	e007      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2202      	movs	r2, #2
 80024f8:	613a      	str	r2, [r7, #16]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	60fa      	str	r2, [r7, #12]
  return result;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0bd      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	492e      	ldr	r1, [pc, #184]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	4313      	orrs	r3, r2
 8002530:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	f023 0210 	bic.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	491a      	ldr	r1, [pc, #104]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	4313      	orrs	r3, r2
 8002580:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4913      	ldr	r1, [pc, #76]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3748      	adds	r7, #72	; 0x48
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	10908100 	.word	0x10908100

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e049      	b.n	800269a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f841 	bl	80026a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 f9e4 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d001      	beq.n	80026d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e040      	b.n	8002752 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2202      	movs	r2, #2
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_TIM_Base_Start_IT+0xa8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d009      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_TIM_Base_Start_IT+0xac>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_Base_Start_IT+0x58>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_TIM_Base_Start_IT+0xb0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d115      	bne.n	800273c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_TIM_Base_Start_IT+0xb4>)
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d015      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x96>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d011      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	e008      	b.n	800274e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e000      	b.n	8002750 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400
 8002768:	40014000 	.word	0x40014000
 800276c:	00010007 	.word	0x00010007

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0202 	mvn.w	r2, #2
 800279c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f905 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8f7 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f908 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0204 	mvn.w	r2, #4
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8db 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8cd 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f8de 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b08      	cmp	r3, #8
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0208 	mvn.w	r2, #8
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2204      	movs	r2, #4
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8b1 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8a3 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f8b4 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b10      	cmp	r3, #16
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b10      	cmp	r3, #16
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0210 	mvn.w	r2, #16
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2208      	movs	r2, #8
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f887 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f879 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f88a 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0201 	mvn.w	r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd fe3a 	bl	8000568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b80      	cmp	r3, #128	; 0x80
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8f2 	bl	8002b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d10e      	bne.n	800294e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b80      	cmp	r3, #128	; 0x80
 800293c:	d107      	bne.n	800294e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8e5 	bl	8002b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f838 	bl	80029ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b20      	cmp	r3, #32
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b20      	cmp	r3, #32
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0220 	mvn.w	r2, #32
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8a5 	bl	8002af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a32      	ldr	r2, [pc, #200]	; (8002adc <TIM_Base_SetConfig+0xdc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0x28>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0x28>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a2f      	ldr	r2, [pc, #188]	; (8002ae0 <TIM_Base_SetConfig+0xe0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	; (8002adc <TIM_Base_SetConfig+0xdc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <TIM_Base_SetConfig+0x6a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d00f      	beq.n	8002a6a <TIM_Base_SetConfig+0x6a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <TIM_Base_SetConfig+0xe0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <TIM_Base_SetConfig+0x6a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <TIM_Base_SetConfig+0x6a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_Base_SetConfig+0x6a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a21      	ldr	r2, [pc, #132]	; (8002aec <TIM_Base_SetConfig+0xec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d108      	bne.n	8002a7c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <TIM_Base_SetConfig+0xdc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0xc0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <TIM_Base_SetConfig+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0xc0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <TIM_Base_SetConfig+0xe8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0xc0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <TIM_Base_SetConfig+0xec>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40014000 	.word	0x40014000
 8002ae8:	40014400 	.word	0x40014400
 8002aec:	40014800 	.word	0x40014800

08002af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e040      	b.n	8002bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fd7e 	bl	8000650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8b6 	bl	8002cdc <UART_SetConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e022      	b.n	8002bc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9e0 	bl	8002f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa67 	bl	800308c <UART_CheckIdleState>
 8002bbe:	4603      	mov	r3, r0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d178      	bne.n	8002cd2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_UART_Transmit+0x24>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e071      	b.n	8002cd4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2221      	movs	r2, #33	; 0x21
 8002bfc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfe:	f7fd fe73 	bl	80008e8 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d108      	bne.n	8002c30 <HAL_UART_Transmit+0x68>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e003      	b.n	8002c38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c38:	e030      	b.n	8002c9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fac9 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e03c      	b.n	8002cd4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	881a      	ldrh	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	3302      	adds	r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e008      	b.n	8002c8a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b292      	uxth	r2, r2
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1c8      	bne.n	8002c3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa92 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e005      	b.n	8002cd4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <UART_SetConfig+0x254>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <UART_SetConfig+0x258>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d120      	bne.n	8002d9a <UART_SetConfig+0xbe>
 8002d58:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <UART_SetConfig+0x25c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d817      	bhi.n	8002d94 <UART_SetConfig+0xb8>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x90>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d89 	.word	0x08002d89
 8002d74:	08002d8f 	.word	0x08002d8f
 8002d78:	08002d83 	.word	0x08002d83
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e01d      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002d82:	2302      	movs	r3, #2
 8002d84:	77fb      	strb	r3, [r7, #31]
 8002d86:	e01a      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e017      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	77fb      	strb	r3, [r7, #31]
 8002d92:	e014      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002d94:	2310      	movs	r3, #16
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e011      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a67      	ldr	r2, [pc, #412]	; (8002f3c <UART_SetConfig+0x260>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d102      	bne.n	8002daa <UART_SetConfig+0xce>
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e009      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a64      	ldr	r2, [pc, #400]	; (8002f40 <UART_SetConfig+0x264>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <UART_SetConfig+0xde>
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e001      	b.n	8002dbe <UART_SetConfig+0xe2>
 8002dba:	2310      	movs	r3, #16
 8002dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d15a      	bne.n	8002e7e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d827      	bhi.n	8002e1e <UART_SetConfig+0x142>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0xf8>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e1f 	.word	0x08002e1f
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e1f 	.word	0x08002e1f
 8002dec:	08002e1f 	.word	0x08002e1f
 8002df0:	08002e1f 	.word	0x08002e1f
 8002df4:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7ff fa50 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8002dfc:	61b8      	str	r0, [r7, #24]
        break;
 8002dfe:	e013      	b.n	8002e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff fa6e 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 8002e04:	61b8      	str	r0, [r7, #24]
        break;
 8002e06:	e00f      	b.n	8002e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b4e      	ldr	r3, [pc, #312]	; (8002f44 <UART_SetConfig+0x268>)
 8002e0a:	61bb      	str	r3, [r7, #24]
        break;
 8002e0c:	e00c      	b.n	8002e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff f9cf 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002e12:	61b8      	str	r0, [r7, #24]
        break;
 8002e14:	e008      	b.n	8002e28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	61bb      	str	r3, [r7, #24]
        break;
 8002e1c:	e004      	b.n	8002e28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	77bb      	strb	r3, [r7, #30]
        break;
 8002e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d074      	beq.n	8002f18 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	005a      	lsls	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	d916      	bls.n	8002e78 <UART_SetConfig+0x19c>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d212      	bcs.n	8002e78 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f023 030f 	bic.w	r3, r3, #15
 8002e5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	89fa      	ldrh	r2, [r7, #14]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	e04f      	b.n	8002f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77bb      	strb	r3, [r7, #30]
 8002e7c:	e04c      	b.n	8002f18 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e7e:	7ffb      	ldrb	r3, [r7, #31]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d828      	bhi.n	8002ed6 <UART_SetConfig+0x1fa>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <UART_SetConfig+0x1b0>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08002eb9 	.word	0x08002eb9
 8002e94:	08002ec1 	.word	0x08002ec1
 8002e98:	08002ed7 	.word	0x08002ed7
 8002e9c:	08002ec7 	.word	0x08002ec7
 8002ea0:	08002ed7 	.word	0x08002ed7
 8002ea4:	08002ed7 	.word	0x08002ed7
 8002ea8:	08002ed7 	.word	0x08002ed7
 8002eac:	08002ecf 	.word	0x08002ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f7ff f9f4 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8002eb4:	61b8      	str	r0, [r7, #24]
        break;
 8002eb6:	e013      	b.n	8002ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb8:	f7ff fa12 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	61b8      	str	r0, [r7, #24]
        break;
 8002ebe:	e00f      	b.n	8002ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <UART_SetConfig+0x268>)
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e00c      	b.n	8002ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec6:	f7ff f973 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002eca:	61b8      	str	r0, [r7, #24]
        break;
 8002ecc:	e008      	b.n	8002ee0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed2:	61bb      	str	r3, [r7, #24]
        break;
 8002ed4:	e004      	b.n	8002ee0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	77bb      	strb	r3, [r7, #30]
        break;
 8002ede:	bf00      	nop
    }

    if (pclk != 0U)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085a      	lsrs	r2, r3, #1
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d909      	bls.n	8002f14 <UART_SetConfig+0x238>
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f06:	d205      	bcs.n	8002f14 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	e001      	b.n	8002f18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f24:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	efff69f3 	.word	0xefff69f3
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40004400 	.word	0x40004400
 8002f40:	40004800 	.word	0x40004800
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01a      	beq.n	800305e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d10a      	bne.n	800305e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b098      	sub	sp, #96	; 0x60
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800309c:	f7fd fc24 	bl	80008e8 <HAL_GetTick>
 80030a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d12e      	bne.n	800310e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f88c 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d021      	beq.n	800310e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030de:	653b      	str	r3, [r7, #80]	; 0x50
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e6      	bne.n	80030ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e062      	b.n	80031d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d149      	bne.n	80031b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f856 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d03c      	beq.n	80031b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	623b      	str	r3, [r7, #32]
   return(result);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
 8003156:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e6      	bne.n	8003136 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	60fb      	str	r3, [r7, #12]
   return(result);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3308      	adds	r3, #8
 8003186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003188:	61fa      	str	r2, [r7, #28]
 800318a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	617b      	str	r3, [r7, #20]
   return(result);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e011      	b.n	80031d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3758      	adds	r7, #88	; 0x58
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e049      	b.n	8003282 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d045      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fd fb77 	bl	80008e8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <UART_WaitOnFlagUntilTimeout+0x30>
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e048      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d031      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b08      	cmp	r3, #8
 800322a:	d110      	bne.n	800324e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f838 	bl	80032aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2208      	movs	r2, #8
 800323e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e029      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325c:	d111      	bne.n	8003282 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f81e 	bl	80032aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e00f      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d0a6      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b095      	sub	sp, #84	; 0x54
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d0:	643b      	str	r3, [r7, #64]	; 0x40
 80032d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e6      	bne.n	80032b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3308      	adds	r3, #8
 80032ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3308      	adds	r3, #8
 8003302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	2b01      	cmp	r3, #1
 800331e:	d118      	bne.n	8003352 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	60bb      	str	r3, [r7, #8]
   return(result);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f023 0310 	bic.w	r3, r3, #16
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	613b      	str	r3, [r7, #16]
   return(result);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e6      	bne.n	8003320 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003366:	bf00      	nop
 8003368:	3754      	adds	r7, #84	; 0x54
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f103 0208 	add.w	r2, r3, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800338a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f103 0208 	add.w	r2, r3, #8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342a:	d103      	bne.n	8003434 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	e00c      	b.n	800344e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3308      	adds	r3, #8
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e002      	b.n	8003442 <vListInsert+0x2e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d2f6      	bcs.n	800343c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6852      	ldr	r2, [r2, #4]
 80034a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d103      	bne.n	80034ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003506:	f002 fbed 	bl	8005ce4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	441a      	add	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	3b01      	subs	r3, #1
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d114      	bne.n	8003586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01a      	beq.n	800359a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3310      	adds	r3, #16
 8003568:	4618      	mov	r0, r3
 800356a:	f001 fb8b 	bl	8004c84 <xTaskRemoveFromEventList>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <xQueueGenericReset+0xcc>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	e009      	b.n	800359a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3310      	adds	r3, #16
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fef1 	bl	8003372 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3324      	adds	r3, #36	; 0x24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff feec 	bl	8003372 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800359a:	f002 fbd3 	bl	8005d44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <xQueueGenericCreateStatic+0x52>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <xQueueGenericCreateStatic+0x56>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <xQueueGenericCreateStatic+0x58>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <xQueueGenericCreateStatic+0x7e>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <xQueueGenericCreateStatic+0x82>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericCreateStatic+0x84>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	61fb      	str	r3, [r7, #28]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800364a:	2348      	movs	r3, #72	; 0x48
 800364c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b48      	cmp	r3, #72	; 0x48
 8003652:	d00a      	beq.n	800366a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61bb      	str	r3, [r7, #24]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800367c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f843 	bl	8003716 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003692:	4618      	mov	r0, r3
 8003694:	3730      	adds	r7, #48	; 0x30
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800369a:	b580      	push	{r7, lr}
 800369c:	b08a      	sub	sp, #40	; 0x28
 800369e:	af02      	add	r7, sp, #8
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	613b      	str	r3, [r7, #16]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e004      	b.n	80036da <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3348      	adds	r3, #72	; 0x48
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fc22 	bl	8005f28 <pvPortMalloc>
 80036e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00f      	beq.n	800370c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3348      	adds	r3, #72	; 0x48
 80036f0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f805 	bl	8003716 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800370c:	69bb      	ldr	r3, [r7, #24]
	}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e002      	b.n	8003738 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003744:	2101      	movs	r1, #1
 8003746:	69b8      	ldr	r0, [r7, #24]
 8003748:	f7ff fec8 	bl	80034dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	613b      	str	r3, [r7, #16]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	d90a      	bls.n	8003798 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	60fb      	str	r3, [r7, #12]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003798:	2202      	movs	r2, #2
 800379a:	2100      	movs	r1, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff7c 	bl	800369a <xQueueGenericCreate>
 80037a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80037b0:	697b      	ldr	r3, [r7, #20]
	}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSend+0x32>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <xQueueGenericSend+0x40>
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <xQueueGenericSend+0x44>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <xQueueGenericSend+0x46>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <xQueueGenericSend+0x60>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x6e>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0x72>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0x74>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <xQueueGenericSend+0x8e>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384a:	f001 fbe1 	bl	8005010 <xTaskGetSchedulerState>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <xQueueGenericSend+0x9e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <xQueueGenericSend+0xa2>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueGenericSend+0xa4>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xQueueGenericSend+0xbe>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61fb      	str	r3, [r7, #28]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800387a:	f002 fa33 	bl	8005ce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <xQueueGenericSend+0xd4>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d129      	bne.n	80038e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003896:	f000 fbb9 	bl	800400c <prvCopyDataToQueue>
 800389a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f9eb 	bl	8004c84 <xTaskRemoveFromEventList>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b4:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <xQueueGenericSend+0x1f8>)
 80038b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	e00a      	b.n	80038dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <xQueueGenericSend+0x1f8>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038dc:	f002 fa32 	bl	8005d44 <vPortExitCritical>
				return pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e063      	b.n	80039ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ea:	f002 fa2b 	bl	8005d44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e05c      	b.n	80039ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 fa23 	bl	8004d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003902:	2301      	movs	r3, #1
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003906:	f002 fa1d 	bl	8005d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390a:	f000 ff91 	bl	8004830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800390e:	f002 f9e9 	bl	8005ce4 <vPortEnterCritical>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003918:	b25b      	sxtb	r3, r3
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391e:	d103      	bne.n	8003928 <xQueueGenericSend+0x16c>
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003934:	d103      	bne.n	800393e <xQueueGenericSend+0x182>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393e:	f002 fa01 	bl	8005d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f001 fa12 	bl	8004d74 <xTaskCheckForTimeOut>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d124      	bne.n	80039a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003958:	f000 fc50 	bl	80041fc <prvIsQueueFull>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	3310      	adds	r3, #16
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f93a 	bl	8004be4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 fbdb 	bl	800412c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003976:	f000 ff69 	bl	800484c <xTaskResumeAll>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af7c 	bne.w	800387a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <xQueueGenericSend+0x1f8>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	e772      	b.n	800387a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f000 fbc9 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399a:	f000 ff57 	bl	800484c <xTaskResumeAll>
 800399e:	e76c      	b.n	800387a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a2:	f000 fbc3 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a6:	f000 ff51 	bl	800484c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039aa:	2300      	movs	r3, #0
		}
	}
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3738      	adds	r7, #56	; 0x38
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	; 0x38
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <xQueueGenericSendFromISR+0x3c>
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <xQueueGenericSendFromISR+0x40>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <xQueueGenericSendFromISR+0x42>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	623b      	str	r3, [r7, #32]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSendFromISR+0x6a>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSendFromISR+0x6e>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSendFromISR+0x70>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61fb      	str	r3, [r7, #28]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a42:	f002 fa31 	bl	8005ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a46:	f3ef 8211 	mrs	r2, BASEPRI
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	61ba      	str	r2, [r7, #24]
 8003a5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <xQueueGenericSendFromISR+0xbc>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d12c      	bne.n	8003ace <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a84:	f000 fac2 	bl	800400c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d112      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f8f0 	bl	8004c84 <xTaskRemoveFromEventList>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e007      	b.n	8003ac8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003abc:	3301      	adds	r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003acc:	e001      	b.n	8003ad2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003adc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	; 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	; 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	61fb      	str	r3, [r7, #28]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <xQueueGiveFromISR+0x58>
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <xQueueGiveFromISR+0x5c>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <xQueueGiveFromISR+0x5e>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	61bb      	str	r3, [r7, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b60:	f002 f9a2 	bl	8005ea8 <vPortValidateInterruptPriority>
	__asm volatile
 8003b64:	f3ef 8211 	mrs	r2, BASEPRI
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	617a      	str	r2, [r7, #20]
 8003b7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d22b      	bcs.n	8003be8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003baa:	d112      	bne.n	8003bd2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d016      	beq.n	8003be2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f863 	bl	8004c84 <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b25a      	sxtb	r2, r3
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003be2:	2301      	movs	r3, #1
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
 8003be6:	e001      	b.n	8003bec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f383 8811 	msr	BASEPRI, r3
}
 8003bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3738      	adds	r7, #56	; 0x38
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xQueueReceive+0x30>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	623b      	str	r3, [r7, #32]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <xQueueReceive+0x3e>
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <xQueueReceive+0x42>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueReceive+0x44>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xQueueReceive+0x5e>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61fb      	str	r3, [r7, #28]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c62:	f001 f9d5 	bl	8005010 <xTaskGetSchedulerState>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <xQueueReceive+0x6e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <xQueueReceive+0x72>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueReceive+0x74>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueReceive+0x8e>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61bb      	str	r3, [r7, #24]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c92:	f002 f827 	bl	8005ce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01f      	beq.n	8003ce2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca6:	f000 fa1b 	bl	80040e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1e5a      	subs	r2, r3, #1
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00f      	beq.n	8003cda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ffe0 	bl	8004c84 <xTaskRemoveFromEventList>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <xQueueReceive+0x1bc>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cda:	f002 f833 	bl	8005d44 <vPortExitCritical>
				return pdPASS;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e069      	b.n	8003db6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ce8:	f002 f82c 	bl	8005d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e062      	b.n	8003db6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f824 	bl	8004d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d04:	f002 f81e 	bl	8005d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d08:	f000 fd92 	bl	8004830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d0c:	f001 ffea 	bl	8005ce4 <vPortEnterCritical>
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1c:	d103      	bne.n	8003d26 <xQueueReceive+0x122>
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d32:	d103      	bne.n	8003d3c <xQueueReceive+0x138>
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3c:	f002 f802 	bl	8005d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d40:	1d3a      	adds	r2, r7, #4
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 f813 	bl	8004d74 <xTaskCheckForTimeOut>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d123      	bne.n	8003d9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d56:	f000 fa3b 	bl	80041d0 <prvIsQueueEmpty>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d017      	beq.n	8003d90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 ff3b 	bl	8004be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d70:	f000 f9dc 	bl	800412c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d74:	f000 fd6a 	bl	800484c <xTaskResumeAll>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d189      	bne.n	8003c92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <xQueueReceive+0x1bc>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	e780      	b.n	8003c92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d92:	f000 f9cb 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d96:	f000 fd59 	bl	800484c <xTaskResumeAll>
 8003d9a:	e77a      	b.n	8003c92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	f000 f9c5 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003da2:	f000 fd53 	bl	800484c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da8:	f000 fa12 	bl	80041d0 <prvIsQueueEmpty>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f43f af6f 	beq.w	8003c92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3730      	adds	r7, #48	; 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	61fb      	str	r3, [r7, #28]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e14:	f001 f8fc 	bl	8005010 <xTaskGetSchedulerState>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <xQueueSemaphoreTake+0x60>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <xQueueSemaphoreTake+0x64>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <xQueueSemaphoreTake+0x66>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61bb      	str	r3, [r7, #24]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e44:	f001 ff4e 	bl	8005ce4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d024      	beq.n	8003e9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003e64:	f001 fa9e 	bl	80053a4 <pvTaskIncrementMutexHeldCount>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00f      	beq.n	8003e96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	3310      	adds	r3, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 ff02 	bl	8004c84 <xTaskRemoveFromEventList>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e86:	4b54      	ldr	r3, [pc, #336]	; (8003fd8 <xQueueSemaphoreTake+0x214>)
 8003e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e96:	f001 ff55 	bl	8005d44 <vPortExitCritical>
				return pdPASS;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e097      	b.n	8003fce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	617b      	str	r3, [r7, #20]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ec0:	f001 ff40 	bl	8005d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e082      	b.n	8003fce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ff38 	bl	8004d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003edc:	f001 ff32 	bl	8005d44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee0:	f000 fca6 	bl	8004830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee4:	f001 fefe 	bl	8005ce4 <vPortEnterCritical>
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef4:	d103      	bne.n	8003efe <xQueueSemaphoreTake+0x13a>
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0a:	d103      	bne.n	8003f14 <xQueueSemaphoreTake+0x150>
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f14:	f001 ff16 	bl	8005d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f18:	463a      	mov	r2, r7
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ff27 	bl	8004d74 <xTaskCheckForTimeOut>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d132      	bne.n	8003f92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f2e:	f000 f94f 	bl	80041d0 <prvIsQueueEmpty>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d026      	beq.n	8003f86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003f40:	f001 fed0 	bl	8005ce4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f87f 	bl	800504c <xTaskPriorityInherit>
 8003f4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f50:	f001 fef8 	bl	8005d44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fe41 	bl	8004be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f64:	f000 f8e2 	bl	800412c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f68:	f000 fc70 	bl	800484c <xTaskResumeAll>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f47f af68 	bne.w	8003e44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <xQueueSemaphoreTake+0x214>)
 8003f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	e75e      	b.n	8003e44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f88:	f000 f8d0 	bl	800412c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f8c:	f000 fc5e 	bl	800484c <xTaskResumeAll>
 8003f90:	e758      	b.n	8003e44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f94:	f000 f8ca 	bl	800412c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f98:	f000 fc58 	bl	800484c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f9e:	f000 f917 	bl	80041d0 <prvIsQueueEmpty>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f43f af4d 	beq.w	8003e44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003fb0:	f001 fe98 	bl	8005ce4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fb6:	f000 f811 	bl	8003fdc <prvGetDisinheritPriorityAfterTimeout>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f94e 	bl	8005264 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003fc8:	f001 febc 	bl	8005d44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3738      	adds	r7, #56	; 0x38
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1c3 0307 	rsb	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e001      	b.n	8003ffe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d14d      	bne.n	80040ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f88e 	bl	8005158 <xTaskPriorityDisinherit>
 800403c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	e043      	b.n	80040ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d119      	bne.n	8004080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6898      	ldr	r0, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	461a      	mov	r2, r3
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	f002 f9c4 	bl	80063e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d32b      	bcc.n	80040ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e026      	b.n	80040ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68d8      	ldr	r0, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	461a      	mov	r2, r3
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	f002 f9aa 	bl	80063e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	425b      	negs	r3, r3
 800409a:	441a      	add	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d207      	bcs.n	80040bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	425b      	negs	r3, r3
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d105      	bne.n	80040ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d303      	bcc.n	8004114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68d9      	ldr	r1, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	461a      	mov	r2, r3
 800411e:	6838      	ldr	r0, [r7, #0]
 8004120:	f002 f960 	bl	80063e4 <memcpy>
	}
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004134:	f001 fdd6 	bl	8005ce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800413e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004140:	e011      	b.n	8004166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fd98 	bl	8004c84 <xTaskRemoveFromEventList>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800415a:	f000 fe6d 	bl	8004e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3b01      	subs	r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	dce9      	bgt.n	8004142 <prvUnlockQueue+0x16>
 800416e:	e000      	b.n	8004172 <prvUnlockQueue+0x46>
					break;
 8004170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800417a:	f001 fde3 	bl	8005d44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800417e:	f001 fdb1 	bl	8005ce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800418a:	e011      	b.n	80041b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3310      	adds	r3, #16
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fd73 	bl	8004c84 <xTaskRemoveFromEventList>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041a4:	f000 fe48 	bl	8004e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dce9      	bgt.n	800418c <prvUnlockQueue+0x60>
 80041b8:	e000      	b.n	80041bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041c4:	f001 fdbe 	bl	8005d44 <vPortExitCritical>
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d8:	f001 fd84 	bl	8005ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e001      	b.n	80041ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ee:	f001 fda9 	bl	8005d44 <vPortExitCritical>

	return xReturn;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004204:	f001 fd6e 	bl	8005ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	429a      	cmp	r2, r3
 8004212:	d102      	bne.n	800421a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e001      	b.n	800421e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800421e:	f001 fd91 	bl	8005d44 <vPortExitCritical>

	return xReturn;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e014      	b.n	8004266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <vQueueAddToRegistry+0x50>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <vQueueAddToRegistry+0x50>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <vQueueAddToRegistry+0x50>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800425e:	e006      	b.n	800426e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b07      	cmp	r3, #7
 800426a:	d9e7      	bls.n	800423c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	200008a8 	.word	0x200008a8

08004280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004290:	f001 fd28 	bl	8005ce4 <vPortEnterCritical>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800429a:	b25b      	sxtb	r3, r3
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a0:	d103      	bne.n	80042aa <vQueueWaitForMessageRestricted+0x2a>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b0:	b25b      	sxtb	r3, r3
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b6:	d103      	bne.n	80042c0 <vQueueWaitForMessageRestricted+0x40>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c0:	f001 fd40 	bl	8005d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fca9 	bl	8004c2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042da:	6978      	ldr	r0, [r7, #20]
 80042dc:	f7ff ff26 	bl	800412c <prvUnlockQueue>
	}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	623b      	str	r3, [r7, #32]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <xTaskCreateStatic+0x46>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	61fb      	str	r3, [r7, #28]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800432e:	23a0      	movs	r3, #160	; 0xa0
 8004330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2ba0      	cmp	r3, #160	; 0xa0
 8004336:	d00a      	beq.n	800434e <xTaskCreateStatic+0x66>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61bb      	str	r3, [r7, #24]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01e      	beq.n	8004392 <xTaskCreateStatic+0xaa>
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01b      	beq.n	8004392 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004362:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	2202      	movs	r2, #2
 8004368:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800436c:	2300      	movs	r3, #0
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	9302      	str	r3, [sp, #8]
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f851 	bl	800442c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800438a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800438c:	f000 f8e4 	bl	8004558 <prvAddNewTaskToReadyList>
 8004390:	e001      	b.n	8004396 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004396:	697b      	ldr	r3, [r7, #20]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af04      	add	r7, sp, #16
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f001 fdb7 	bl	8005f28 <pvPortMalloc>
 80043ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00e      	beq.n	80043e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80043c2:	20a0      	movs	r0, #160	; 0xa0
 80043c4:	f001 fdb0 	bl	8005f28 <pvPortMalloc>
 80043c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
 80043d6:	e005      	b.n	80043e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f001 fe69 	bl	80060b0 <vPortFree>
 80043de:	e001      	b.n	80043e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9303      	str	r3, [sp, #12]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	9302      	str	r3, [sp, #8]
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f80f 	bl	800442c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800440e:	69f8      	ldr	r0, [r7, #28]
 8004410:	f000 f8a2 	bl	8004558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	e002      	b.n	8004420 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800441e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004420:	69bb      	ldr	r3, [r7, #24]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004444:	3b01      	subs	r3, #1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f023 0307 	bic.w	r3, r3, #7
 8004452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <prvInitialiseNewTask+0x48>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	617b      	str	r3, [r7, #20]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e012      	b.n	80044a0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	7819      	ldrb	r1, [r3, #0]
 8004482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	3334      	adds	r3, #52	; 0x34
 800448a:	460a      	mov	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3301      	adds	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b0f      	cmp	r3, #15
 80044a4:	d9e9      	bls.n	800447a <prvInitialiseNewTask+0x4e>
 80044a6:	e000      	b.n	80044aa <prvInitialiseNewTask+0x7e>
		{
			break;
 80044a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d901      	bls.n	80044bc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044b8:	2306      	movs	r3, #6
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	2200      	movs	r2, #0
 80044cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe ff6d 	bl	80033b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	3318      	adds	r3, #24
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe ff68 	bl	80033b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f1c3 0207 	rsb	r2, r3, #7
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	334c      	adds	r3, #76	; 0x4c
 800450c:	224c      	movs	r2, #76	; 0x4c
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f001 fee3 	bl	80062dc <memset>
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <prvInitialiseNewTask+0x120>)
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <prvInitialiseNewTask+0x124>)
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <prvInitialiseNewTask+0x128>)
 8004526:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	69b8      	ldr	r0, [r7, #24]
 800452e:	f001 faab 	bl	8005a88 <pxPortInitialiseStack>
 8004532:	4602      	mov	r2, r0
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20001730 	.word	0x20001730
 8004550:	20001798 	.word	0x20001798
 8004554:	20001800 	.word	0x20001800

08004558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004560:	f001 fbc0 	bl	8005ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 800456c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004576:	4a27      	ldr	r2, [pc, #156]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d110      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004584:	f000 fc7c 	bl	8004e80 <prvInitialiseTaskLists>
 8004588:	e00d      	b.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <prvAddNewTaskToReadyList+0xc0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d802      	bhi.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <prvAddNewTaskToReadyList+0xc4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <prvAddNewTaskToReadyList+0xc4>)
 80045ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <prvAddNewTaskToReadyList+0xcc>)
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fe fef7 	bl	80033cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045de:	f001 fbb1 	bl	8005d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <prvAddNewTaskToReadyList+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d207      	bcs.n	8004608 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvAddNewTaskToReadyList+0xd0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200009e8 	.word	0x200009e8
 8004614:	200008e8 	.word	0x200008e8
 8004618:	200009f4 	.word	0x200009f4
 800461c:	20000a04 	.word	0x20000a04
 8004620:	200009f0 	.word	0x200009f0
 8004624:	200008ec 	.word	0x200008ec
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004634:	f001 fb56 	bl	8005ce4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <vTaskSuspend+0x18>
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <vTaskSuspend+0x104>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	e000      	b.n	8004646 <vTaskSuspend+0x1a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ff1a 	bl	8003486 <uxListRemove>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	4935      	ldr	r1, [pc, #212]	; (8004734 <vTaskSuspend+0x108>)
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <vTaskSuspend+0x58>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	2201      	movs	r2, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43da      	mvns	r2, r3
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <vTaskSuspend+0x10c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4013      	ands	r3, r2
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <vTaskSuspend+0x10c>)
 8004682:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3318      	adds	r3, #24
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fef8 	bl	8003486 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4827      	ldr	r0, [pc, #156]	; (800473c <vTaskSuspend+0x110>)
 800469e:	f7fe fe95 	bl	80033cc <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d103      	bne.n	80046b6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80046b6:	f001 fb45 	bl	8005d44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80046ba:	4b21      	ldr	r3, [pc, #132]	; (8004740 <vTaskSuspend+0x114>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80046c2:	f001 fb0f 	bl	8005ce4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80046c6:	f000 fc7d 	bl	8004fc4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80046ca:	f001 fb3b 	bl	8005d44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80046ce:	4b18      	ldr	r3, [pc, #96]	; (8004730 <vTaskSuspend+0x104>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d127      	bne.n	8004728 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80046d8:	4b19      	ldr	r3, [pc, #100]	; (8004740 <vTaskSuspend+0x114>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d017      	beq.n	8004710 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <vTaskSuspend+0x118>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <vTaskSuspend+0xd2>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60bb      	str	r3, [r7, #8]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <vTaskSuspend+0x11c>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800470e:	e00b      	b.n	8004728 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <vTaskSuspend+0x110>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <vTaskSuspend+0x120>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d103      	bne.n	8004724 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <vTaskSuspend+0x104>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
	}
 8004722:	e001      	b.n	8004728 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004724:	f000 f9fc 	bl	8004b20 <vTaskSwitchContext>
	}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200008e8 	.word	0x200008e8
 8004734:	200008ec 	.word	0x200008ec
 8004738:	200009f0 	.word	0x200009f0
 800473c:	200009d4 	.word	0x200009d4
 8004740:	200009f4 	.word	0x200009f4
 8004744:	20000a10 	.word	0x20000a10
 8004748:	e000ed04 	.word	0xe000ed04
 800474c:	200009e8 	.word	0x200009e8

08004750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800475e:	463a      	mov	r2, r7
 8004760:	1d39      	adds	r1, r7, #4
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb ff16 	bl	8000598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	460a      	mov	r2, r1
 800477e:	4924      	ldr	r1, [pc, #144]	; (8004810 <vTaskStartScheduler+0xc0>)
 8004780:	4824      	ldr	r0, [pc, #144]	; (8004814 <vTaskStartScheduler+0xc4>)
 8004782:	f7ff fdb1 	bl	80042e8 <xTaskCreateStatic>
 8004786:	4603      	mov	r3, r0
 8004788:	4a23      	ldr	r2, [pc, #140]	; (8004818 <vTaskStartScheduler+0xc8>)
 800478a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <vTaskStartScheduler+0xc8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e001      	b.n	800479e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047a4:	f000 fe78 	bl	8005498 <xTimerCreateTimerTask>
 80047a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d11b      	bne.n	80047e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <vTaskStartScheduler+0xcc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	334c      	adds	r3, #76	; 0x4c
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <vTaskStartScheduler+0xd0>)
 80047cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <vTaskStartScheduler+0xd4>)
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <vTaskStartScheduler+0xd8>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <vTaskStartScheduler+0xdc>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047e2:	f001 f9dd 	bl	8005ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047e6:	e00e      	b.n	8004806 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ee:	d10a      	bne.n	8004806 <vTaskStartScheduler+0xb6>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <vTaskStartScheduler+0xb4>
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	08006558 	.word	0x08006558
 8004814:	08004e51 	.word	0x08004e51
 8004818:	20000a0c 	.word	0x20000a0c
 800481c:	200008e8 	.word	0x200008e8
 8004820:	2000005c 	.word	0x2000005c
 8004824:	20000a08 	.word	0x20000a08
 8004828:	200009f4 	.word	0x200009f4
 800482c:	200009ec 	.word	0x200009ec

08004830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <vTaskSuspendAll+0x18>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	4a03      	ldr	r2, [pc, #12]	; (8004848 <vTaskSuspendAll+0x18>)
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000a10 	.word	0x20000a10

0800484c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <xTaskResumeAll+0x114>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <xTaskResumeAll+0x2c>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	603b      	str	r3, [r7, #0]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004878:	f001 fa34 	bl	8005ce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800487c:	4b38      	ldr	r3, [pc, #224]	; (8004960 <xTaskResumeAll+0x114>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3b01      	subs	r3, #1
 8004882:	4a37      	ldr	r2, [pc, #220]	; (8004960 <xTaskResumeAll+0x114>)
 8004884:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <xTaskResumeAll+0x114>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d161      	bne.n	8004952 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800488e:	4b35      	ldr	r3, [pc, #212]	; (8004964 <xTaskResumeAll+0x118>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d05d      	beq.n	8004952 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004896:	e02e      	b.n	80048f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004898:	4b33      	ldr	r3, [pc, #204]	; (8004968 <xTaskResumeAll+0x11c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3318      	adds	r3, #24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fdee 	bl	8003486 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fde9 	bl	8003486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	4b2b      	ldr	r3, [pc, #172]	; (800496c <xTaskResumeAll+0x120>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	4a2a      	ldr	r2, [pc, #168]	; (800496c <xTaskResumeAll+0x120>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a27      	ldr	r2, [pc, #156]	; (8004970 <xTaskResumeAll+0x124>)
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fe fd75 	bl	80033cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <xTaskResumeAll+0x128>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048f0:	4b21      	ldr	r3, [pc, #132]	; (8004978 <xTaskResumeAll+0x12c>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <xTaskResumeAll+0x11c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1cc      	bne.n	8004898 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004904:	f000 fb5e 	bl	8004fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004908:	4b1c      	ldr	r3, [pc, #112]	; (800497c <xTaskResumeAll+0x130>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004914:	f000 f846 	bl	80049a4 <xTaskIncrementTick>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <xTaskResumeAll+0x12c>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f1      	bne.n	8004914 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <xTaskResumeAll+0x130>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <xTaskResumeAll+0x12c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <xTaskResumeAll+0x134>)
 8004944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004952:	f001 f9f7 	bl	8005d44 <vPortExitCritical>

	return xAlreadyYielded;
 8004956:	68bb      	ldr	r3, [r7, #8]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000a10 	.word	0x20000a10
 8004964:	200009e8 	.word	0x200009e8
 8004968:	200009a8 	.word	0x200009a8
 800496c:	200009f0 	.word	0x200009f0
 8004970:	200008ec 	.word	0x200008ec
 8004974:	200008e8 	.word	0x200008e8
 8004978:	200009fc 	.word	0x200009fc
 800497c:	200009f8 	.word	0x200009f8
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <xTaskGetTickCount+0x1c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004990:	687b      	ldr	r3, [r7, #4]
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	200009ec 	.word	0x200009ec

080049a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <xTaskIncrementTick+0x150>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 808d 	bne.w	8004ad2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049b8:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <xTaskIncrementTick+0x154>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049c0:	4a4d      	ldr	r2, [pc, #308]	; (8004af8 <xTaskIncrementTick+0x154>)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d120      	bne.n	8004a0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <xTaskIncrementTick+0x158>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <xTaskIncrementTick+0x48>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	603b      	str	r3, [r7, #0]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <xTaskIncrementTick+0x46>
 80049ec:	4b43      	ldr	r3, [pc, #268]	; (8004afc <xTaskIncrementTick+0x158>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <xTaskIncrementTick+0x15c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a41      	ldr	r2, [pc, #260]	; (8004afc <xTaskIncrementTick+0x158>)
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <xTaskIncrementTick+0x15c>)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <xTaskIncrementTick+0x160>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a3f      	ldr	r2, [pc, #252]	; (8004b04 <xTaskIncrementTick+0x160>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	f000 fadb 	bl	8004fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <xTaskIncrementTick+0x164>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d34d      	bcc.n	8004ab4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a18:	4b38      	ldr	r3, [pc, #224]	; (8004afc <xTaskIncrementTick+0x158>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xTaskIncrementTick+0x82>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xTaskIncrementTick+0x84>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2c:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <xTaskIncrementTick+0x164>)
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a32:	601a      	str	r2, [r3, #0]
					break;
 8004a34:	e03e      	b.n	8004ab4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <xTaskIncrementTick+0x158>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d203      	bcs.n	8004a56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a4e:	4a2e      	ldr	r2, [pc, #184]	; (8004b08 <xTaskIncrementTick+0x164>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6013      	str	r3, [r2, #0]
						break;
 8004a54:	e02e      	b.n	8004ab4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fd13 	bl	8003486 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fd0a 	bl	8003486 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	2201      	movs	r2, #1
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <xTaskIncrementTick+0x168>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <xTaskIncrementTick+0x168>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <xTaskIncrementTick+0x16c>)
 8004a92:	441a      	add	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fc96 	bl	80033cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <xTaskIncrementTick+0x170>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3b4      	bcc.n	8004a18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab2:	e7b1      	b.n	8004a18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <xTaskIncrementTick+0x170>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4915      	ldr	r1, [pc, #84]	; (8004b10 <xTaskIncrementTick+0x16c>)
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d907      	bls.n	8004adc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e004      	b.n	8004adc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <xTaskIncrementTick+0x174>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <xTaskIncrementTick+0x174>)
 8004ada:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <xTaskIncrementTick+0x178>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000a10 	.word	0x20000a10
 8004af8:	200009ec 	.word	0x200009ec
 8004afc:	200009a0 	.word	0x200009a0
 8004b00:	200009a4 	.word	0x200009a4
 8004b04:	20000a00 	.word	0x20000a00
 8004b08:	20000a08 	.word	0x20000a08
 8004b0c:	200009f0 	.word	0x200009f0
 8004b10:	200008ec 	.word	0x200008ec
 8004b14:	200008e8 	.word	0x200008e8
 8004b18:	200009f8 	.word	0x200009f8
 8004b1c:	200009fc 	.word	0x200009fc

08004b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b26:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <vTaskSwitchContext+0xac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b2e:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <vTaskSwitchContext+0xb0>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b34:	e044      	b.n	8004bc0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <vTaskSwitchContext+0xb0>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <vTaskSwitchContext+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	f1c3 031f 	rsb	r3, r3, #31
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	4921      	ldr	r1, [pc, #132]	; (8004bd8 <vTaskSwitchContext+0xb8>)
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	607b      	str	r3, [r7, #4]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <vTaskSwitchContext+0x5a>
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <vTaskSwitchContext+0xb8>)
 8004b88:	4413      	add	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d104      	bne.n	8004bac <vTaskSwitchContext+0x8c>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <vTaskSwitchContext+0xbc>)
 8004bb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <vTaskSwitchContext+0xbc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	334c      	adds	r3, #76	; 0x4c
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <vTaskSwitchContext+0xc0>)
 8004bbe:	6013      	str	r3, [r2, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20000a10 	.word	0x20000a10
 8004bd0:	200009fc 	.word	0x200009fc
 8004bd4:	200009f0 	.word	0x200009f0
 8004bd8:	200008ec 	.word	0x200008ec
 8004bdc:	200008e8 	.word	0x200008e8
 8004be0:	2000005c 	.word	0x2000005c

08004be4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60fb      	str	r3, [r7, #12]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c0a:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <vTaskPlaceOnEventList+0x44>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fe fbfe 	bl	8003414 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c18:	2101      	movs	r1, #1
 8004c1a:	6838      	ldr	r0, [r7, #0]
 8004c1c:	f000 fbd6 	bl	80053cc <prvAddCurrentTaskToDelayedList>
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200008e8 	.word	0x200008e8

08004c2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	617b      	str	r3, [r7, #20]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3318      	adds	r3, #24
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7fe fbb5 	bl	80033cc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f000 fbab 	bl	80053cc <prvAddCurrentTaskToDelayedList>
	}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	200008e8 	.word	0x200008e8

08004c84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3318      	adds	r3, #24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe fbe6 	bl	8003486 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <xTaskRemoveFromEventList+0xac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11c      	bne.n	8004cfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fbdd 	bl	8003486 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <xTaskRemoveFromEventList+0xb0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <xTaskRemoveFromEventList+0xb0>)
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <xTaskRemoveFromEventList+0xb4>)
 8004cec:	441a      	add	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7fe fb69 	bl	80033cc <vListInsertEnd>
 8004cfa:	e005      	b.n	8004d08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3318      	adds	r3, #24
 8004d00:	4619      	mov	r1, r3
 8004d02:	480e      	ldr	r0, [pc, #56]	; (8004d3c <xTaskRemoveFromEventList+0xb8>)
 8004d04:	f7fe fb62 	bl	80033cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <xTaskRemoveFromEventList+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d905      	bls.n	8004d22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <xTaskRemoveFromEventList+0xc0>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e001      	b.n	8004d26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d26:	697b      	ldr	r3, [r7, #20]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000a10 	.word	0x20000a10
 8004d34:	200009f0 	.word	0x200009f0
 8004d38:	200008ec 	.word	0x200008ec
 8004d3c:	200009a8 	.word	0x200009a8
 8004d40:	200008e8 	.word	0x200008e8
 8004d44:	200009fc 	.word	0x200009fc

08004d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <vTaskInternalSetTimeOutState+0x24>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <vTaskInternalSetTimeOutState+0x28>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000a00 	.word	0x20000a00
 8004d70:	200009ec 	.word	0x200009ec

08004d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004db6:	f000 ff95 	bl	8005ce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <xTaskCheckForTimeOut+0xbc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd2:	d102      	bne.n	8004dda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e023      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <xTaskCheckForTimeOut+0xc0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d007      	beq.n	8004df6 <xTaskCheckForTimeOut+0x82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e015      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d20b      	bcs.n	8004e18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff9b 	bl	8004d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e004      	b.n	8004e22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f000 ff8f 	bl	8005d44 <vPortExitCritical>

	return xReturn;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	200009ec 	.word	0x200009ec
 8004e34:	20000a00 	.word	0x20000a00

08004e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <vTaskMissedYield+0x14>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	200009fc 	.word	0x200009fc

08004e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e58:	f000 f852 	bl	8004f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvIdleTask+0x28>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d9f9      	bls.n	8004e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <prvIdleTask+0x2c>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e74:	e7f0      	b.n	8004e58 <prvIdleTask+0x8>
 8004e76:	bf00      	nop
 8004e78:	200008ec 	.word	0x200008ec
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	e00c      	b.n	8004ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <prvInitialiseTaskLists+0x60>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fa69 	bl	8003372 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d9ef      	bls.n	8004e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eac:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004eae:	f7fe fa60 	bl	8003372 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eb2:	480d      	ldr	r0, [pc, #52]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004eb4:	f7fe fa5d 	bl	8003372 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eb8:	480c      	ldr	r0, [pc, #48]	; (8004eec <prvInitialiseTaskLists+0x6c>)
 8004eba:	f7fe fa5a 	bl	8003372 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <prvInitialiseTaskLists+0x70>)
 8004ec0:	f7fe fa57 	bl	8003372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <prvInitialiseTaskLists+0x74>)
 8004ec6:	f7fe fa54 	bl	8003372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <prvInitialiseTaskLists+0x78>)
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <prvInitialiseTaskLists+0x64>)
 8004ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvInitialiseTaskLists+0x7c>)
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <prvInitialiseTaskLists+0x68>)
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200008ec 	.word	0x200008ec
 8004ee4:	20000978 	.word	0x20000978
 8004ee8:	2000098c 	.word	0x2000098c
 8004eec:	200009a8 	.word	0x200009a8
 8004ef0:	200009bc 	.word	0x200009bc
 8004ef4:	200009d4 	.word	0x200009d4
 8004ef8:	200009a0 	.word	0x200009a0
 8004efc:	200009a4 	.word	0x200009a4

08004f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f06:	e019      	b.n	8004f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f08:	f000 feec 	bl	8005ce4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <prvCheckTasksWaitingTermination+0x50>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fab4 	bl	8003486 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a0b      	ldr	r2, [pc, #44]	; (8004f54 <prvCheckTasksWaitingTermination+0x54>)
 8004f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f32:	f000 ff07 	bl	8005d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f810 	bl	8004f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <prvCheckTasksWaitingTermination+0x58>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e1      	bne.n	8004f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200009bc 	.word	0x200009bc
 8004f54:	200009e8 	.word	0x200009e8
 8004f58:	200009d0 	.word	0x200009d0

08004f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	334c      	adds	r3, #76	; 0x4c
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 f9bf 	bl	80062ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f897 	bl	80060b0 <vPortFree>
				vPortFree( pxTCB );
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f894 	bl	80060b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f88:	e018      	b.n	8004fbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d103      	bne.n	8004f9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 f88b 	bl	80060b0 <vPortFree>
	}
 8004f9a:	e00f      	b.n	8004fbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d00a      	beq.n	8004fbc <prvDeleteTCB+0x60>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <prvDeleteTCB+0x5e>
	}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <prvResetNextTaskUnblockTime+0x44>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <prvResetNextTaskUnblockTime+0x14>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <prvResetNextTaskUnblockTime+0x16>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <prvResetNextTaskUnblockTime+0x48>)
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fe4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fe6:	e008      	b.n	8004ffa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <prvResetNextTaskUnblockTime+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <prvResetNextTaskUnblockTime+0x48>)
 8004ff8:	6013      	str	r3, [r2, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	200009a0 	.word	0x200009a0
 800500c:	20000a08 	.word	0x20000a08

08005010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <xTaskGetSchedulerState+0x34>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800501e:	2301      	movs	r3, #1
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	e008      	b.n	8005036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <xTaskGetSchedulerState+0x38>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800502c:	2302      	movs	r3, #2
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	e001      	b.n	8005036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005032:	2300      	movs	r3, #0
 8005034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005036:	687b      	ldr	r3, [r7, #4]
	}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	200009f4 	.word	0x200009f4
 8005048:	20000a10 	.word	0x20000a10

0800504c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d06e      	beq.n	8005140 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <xTaskPriorityInherit+0x100>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	429a      	cmp	r2, r3
 800506e:	d25e      	bcs.n	800512e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	db06      	blt.n	8005086 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005078:	4b34      	ldr	r3, [pc, #208]	; (800514c <xTaskPriorityInherit+0x100>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f1c3 0207 	rsb	r2, r3, #7
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6959      	ldr	r1, [r3, #20]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <xTaskPriorityInherit+0x104>)
 8005098:	4413      	add	r3, r2
 800509a:	4299      	cmp	r1, r3
 800509c:	d101      	bne.n	80050a2 <xTaskPriorityInherit+0x56>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xTaskPriorityInherit+0x58>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d03a      	beq.n	800511e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe f9ea 	bl	8003486 <uxListRemove>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	4924      	ldr	r1, [pc, #144]	; (8005150 <xTaskPriorityInherit+0x104>)
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <xTaskPriorityInherit+0x98>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	2201      	movs	r2, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43da      	mvns	r2, r3
 80050da:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <xTaskPriorityInherit+0x108>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <xTaskPriorityInherit+0x108>)
 80050e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050e4:	4b19      	ldr	r3, [pc, #100]	; (800514c <xTaskPriorityInherit+0x100>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <xTaskPriorityInherit+0x108>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <xTaskPriorityInherit+0x108>)
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4a10      	ldr	r2, [pc, #64]	; (8005150 <xTaskPriorityInherit+0x104>)
 800510e:	441a      	add	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f7fe f958 	bl	80033cc <vListInsertEnd>
 800511c:	e004      	b.n	8005128 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <xTaskPriorityInherit+0x100>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e008      	b.n	8005140 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <xTaskPriorityInherit+0x100>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	429a      	cmp	r2, r3
 800513a:	d201      	bcs.n	8005140 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800513c:	2301      	movs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005140:	68fb      	ldr	r3, [r7, #12]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200008e8 	.word	0x200008e8
 8005150:	200008ec 	.word	0x200008ec
 8005154:	200009f0 	.word	0x200009f0

08005158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d06e      	beq.n	800524c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800516e:	4b3a      	ldr	r3, [pc, #232]	; (8005258 <xTaskPriorityDisinherit+0x100>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	429a      	cmp	r2, r3
 8005176:	d00a      	beq.n	800518e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60fb      	str	r3, [r7, #12]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60bb      	str	r3, [r7, #8]
}
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b0:	1e5a      	subs	r2, r3, #1
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	429a      	cmp	r2, r3
 80051c0:	d044      	beq.n	800524c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d140      	bne.n	800524c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe f959 	bl	8003486 <uxListRemove>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d115      	bne.n	8005206 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	491f      	ldr	r1, [pc, #124]	; (800525c <xTaskPriorityDisinherit+0x104>)
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xTaskPriorityDisinherit+0xae>
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <xTaskPriorityDisinherit+0x108>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4013      	ands	r3, r2
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <xTaskPriorityDisinherit+0x108>)
 8005204:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	f1c3 0207 	rsb	r2, r3, #7
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	2201      	movs	r2, #1
 8005220:	409a      	lsls	r2, r3
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <xTaskPriorityDisinherit+0x108>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <xTaskPriorityDisinherit+0x108>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <xTaskPriorityDisinherit+0x104>)
 800523a:	441a      	add	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe f8c2 	bl	80033cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
	}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200008e8 	.word	0x200008e8
 800525c:	200008ec 	.word	0x200008ec
 8005260:	200009f0 	.word	0x200009f0

08005264 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005272:	2301      	movs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8088 	beq.w	800538e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60fb      	str	r3, [r7, #12]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d902      	bls.n	80052ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	e002      	b.n	80052b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d068      	beq.n	800538e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d163      	bne.n	800538e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d10a      	bne.n	80052e6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60bb      	str	r3, [r7, #8]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	db04      	blt.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f1c3 0207 	rsb	r2, r3, #7
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6959      	ldr	r1, [r3, #20]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4a22      	ldr	r2, [pc, #136]	; (800539c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005314:	4413      	add	r3, r2
 8005316:	4299      	cmp	r1, r3
 8005318:	d101      	bne.n	800531e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d034      	beq.n	800538e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	3304      	adds	r3, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe f8ac 	bl	8003486 <uxListRemove>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d115      	bne.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4918      	ldr	r1, [pc, #96]	; (800539c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	2201      	movs	r2, #1
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43da      	mvns	r2, r3
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4013      	ands	r3, r2
 800535c:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800535e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	2201      	movs	r2, #1
 8005366:	409a      	lsls	r2, r3
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4313      	orrs	r3, r2
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4a07      	ldr	r2, [pc, #28]	; (800539c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005380:	441a      	add	r2, r3
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	3304      	adds	r3, #4
 8005386:	4619      	mov	r1, r3
 8005388:	4610      	mov	r0, r2
 800538a:	f7fe f81f 	bl	80033cc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800538e:	bf00      	nop
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200008e8 	.word	0x200008e8
 800539c:	200008ec 	.word	0x200008ec
 80053a0:	200009f0 	.word	0x200009f0

080053a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053a8:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b6:	3201      	adds	r2, #1
 80053b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80053ba:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053bc:	681b      	ldr	r3, [r3, #0]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	200008e8 	.word	0x200008e8

080053cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <prvAddCurrentTaskToDelayedList+0xb0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053dc:	4b28      	ldr	r3, [pc, #160]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe f84f 	bl	8003486 <uxListRemove>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43da      	mvns	r2, r3
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	4a20      	ldr	r2, [pc, #128]	; (8005484 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800540c:	d10a      	bne.n	8005424 <prvAddCurrentTaskToDelayedList+0x58>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3304      	adds	r3, #4
 800541a:	4619      	mov	r1, r3
 800541c:	481a      	ldr	r0, [pc, #104]	; (8005488 <prvAddCurrentTaskToDelayedList+0xbc>)
 800541e:	f7fd ffd5 	bl	80033cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005422:	e026      	b.n	8005472 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d209      	bcs.n	8005450 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <prvAddCurrentTaskToDelayedList+0xc0>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fd ffe3 	bl	8003414 <vListInsert>
}
 800544e:	e010      	b.n	8005472 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fd ffd9 	bl	8003414 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d202      	bcs.n	8005472 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6013      	str	r3, [r2, #0]
}
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200009ec 	.word	0x200009ec
 8005480:	200008e8 	.word	0x200008e8
 8005484:	200009f0 	.word	0x200009f0
 8005488:	200009d4 	.word	0x200009d4
 800548c:	200009a4 	.word	0x200009a4
 8005490:	200009a0 	.word	0x200009a0
 8005494:	20000a08 	.word	0x20000a08

08005498 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054a2:	f000 fab1 	bl	8005a08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054a6:	4b1c      	ldr	r3, [pc, #112]	; (8005518 <xTimerCreateTimerTask+0x80>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d021      	beq.n	80054f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	f107 0108 	add.w	r1, r7, #8
 80054bc:	f107 030c 	add.w	r3, r7, #12
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f883 	bl	80005cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	9202      	str	r2, [sp, #8]
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	2302      	movs	r3, #2
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	460a      	mov	r2, r1
 80054d8:	4910      	ldr	r1, [pc, #64]	; (800551c <xTimerCreateTimerTask+0x84>)
 80054da:	4811      	ldr	r0, [pc, #68]	; (8005520 <xTimerCreateTimerTask+0x88>)
 80054dc:	f7fe ff04 	bl	80042e8 <xTaskCreateStatic>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <xTimerCreateTimerTask+0x8c>)
 80054e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054e6:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <xTimerCreateTimerTask+0x8c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054ee:	2301      	movs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	613b      	str	r3, [r7, #16]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000a44 	.word	0x20000a44
 800551c:	08006560 	.word	0x08006560
 8005520:	08005645 	.word	0x08005645
 8005524:	20000a48 	.word	0x20000a48

08005528 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	623b      	str	r3, [r7, #32]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <xTimerGenericCommand+0x98>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02a      	beq.n	80055b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b05      	cmp	r3, #5
 800556e:	dc18      	bgt.n	80055a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005570:	f7ff fd4e 	bl	8005010 <xTaskGetSchedulerState>
 8005574:	4603      	mov	r3, r0
 8005576:	2b02      	cmp	r3, #2
 8005578:	d109      	bne.n	800558e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <xTimerGenericCommand+0x98>)
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f107 0114 	add.w	r1, r7, #20
 8005582:	2300      	movs	r3, #0
 8005584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005586:	f7fe f919 	bl	80037bc <xQueueGenericSend>
 800558a:	6278      	str	r0, [r7, #36]	; 0x24
 800558c:	e012      	b.n	80055b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <xTimerGenericCommand+0x98>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f107 0114 	add.w	r1, r7, #20
 8005596:	2300      	movs	r3, #0
 8005598:	2200      	movs	r2, #0
 800559a:	f7fe f90f 	bl	80037bc <xQueueGenericSend>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24
 80055a0:	e008      	b.n	80055b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <xTimerGenericCommand+0x98>)
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	f107 0114 	add.w	r1, r7, #20
 80055aa:	2300      	movs	r3, #0
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	f7fe fa03 	bl	80039b8 <xQueueGenericSendFromISR>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000a44 	.word	0x20000a44

080055c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ce:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <prvProcessExpiredTimer+0x7c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3304      	adds	r3, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fd ff52 	bl	8003486 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d122      	bne.n	8005630 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	18d1      	adds	r1, r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f000 f8c8 	bl	800578c <prvInsertTimerInActiveList>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	2100      	movs	r1, #0
 800560c:	6978      	ldr	r0, [r7, #20]
 800560e:	f7ff ff8b 	bl	8005528 <xTimerGenericCommand>
 8005612:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60fb      	str	r3, [r7, #12]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	6978      	ldr	r0, [r7, #20]
 8005636:	4798      	blx	r3
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000a3c 	.word	0x20000a3c

08005644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f857 	bl	8005704 <prvGetNextExpireTime>
 8005656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4619      	mov	r1, r3
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f803 	bl	8005668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005662:	f000 f8d5 	bl	8005810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005666:	e7f1      	b.n	800564c <prvTimerTask+0x8>

08005668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005672:	f7ff f8dd 	bl	8004830 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f866 	bl	800574c <prvSampleTimeNow>
 8005680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d130      	bne.n	80056ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <prvProcessTimerOrBlockTask+0x3c>
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d806      	bhi.n	80056a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005696:	f7ff f8d9 	bl	800484c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff91 	bl	80055c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056a2:	e024      	b.n	80056ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056aa:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <prvProcessTimerOrBlockTask+0x90>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <prvProcessTimerOrBlockTask+0x94>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f7fe fdd9 	bl	8004280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056ce:	f7ff f8bd 	bl	800484c <xTaskResumeAll>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <prvProcessTimerOrBlockTask+0x98>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
}
 80056e8:	e001      	b.n	80056ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ea:	f7ff f8af 	bl	800484c <xTaskResumeAll>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000a40 	.word	0x20000a40
 80056fc:	20000a44 	.word	0x20000a44
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <prvGetNextExpireTime+0x44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf0c      	ite	eq
 8005716:	2301      	moveq	r3, #1
 8005718:	2300      	movne	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <prvGetNextExpireTime+0x44>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e001      	b.n	800573a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000a3c 	.word	0x20000a3c

0800574c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005754:	f7ff f916 	bl	8004984 <xTaskGetTickCount>
 8005758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <prvSampleTimeNow+0x3c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	429a      	cmp	r2, r3
 8005762:	d205      	bcs.n	8005770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005764:	f000 f8ee 	bl	8005944 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e002      	b.n	8005776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005776:	4a04      	ldr	r2, [pc, #16]	; (8005788 <prvSampleTimeNow+0x3c>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000a4c 	.word	0x20000a4c

0800578c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d812      	bhi.n	80057d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e01b      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <prvInsertTimerInActiveList+0x7c>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fd fe1f 	bl	8003414 <vListInsert>
 80057d6:	e012      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d206      	bcs.n	80057ee <prvInsertTimerInActiveList+0x62>
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e007      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <prvInsertTimerInActiveList+0x80>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fd fe0b 	bl	8003414 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000a40 	.word	0x20000a40
 800580c:	20000a3c 	.word	0x20000a3c

08005810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005816:	e081      	b.n	800591c <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	db7e      	blt.n	800591c <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd fe29 	bl	8003486 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff88 	bl	800574c <prvSampleTimeNow>
 800583c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b09      	cmp	r3, #9
 8005842:	d86a      	bhi.n	800591a <prvProcessReceivedCommands+0x10a>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <prvProcessReceivedCommands+0x3c>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005875 	.word	0x08005875
 8005850:	08005875 	.word	0x08005875
 8005854:	08005875 	.word	0x08005875
 8005858:	0800591d 	.word	0x0800591d
 800585c:	080058d1 	.word	0x080058d1
 8005860:	08005909 	.word	0x08005909
 8005864:	08005875 	.word	0x08005875
 8005868:	08005875 	.word	0x08005875
 800586c:	0800591d 	.word	0x0800591d
 8005870:	080058d1 	.word	0x080058d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	18d1      	adds	r1, r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005882:	f7ff ff83 	bl	800578c <prvInsertTimerInActiveList>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d047      	beq.n	800591c <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d13f      	bne.n	800591c <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	441a      	add	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ae:	f7ff fe3b 	bl	8005528 <xTimerGenericCommand>
 80058b2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d130      	bne.n	800591c <prvProcessReceivedCommands+0x10c>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	61bb      	str	r3, [r7, #24]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	617b      	str	r3, [r7, #20]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	18d1      	adds	r1, r2, r3
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005902:	f7ff ff43 	bl	800578c <prvInsertTimerInActiveList>
					break;
 8005906:	e009      	b.n	800591c <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8005912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005914:	f000 fbcc 	bl	80060b0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005918:	e000      	b.n	800591c <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800591a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800591c:	4b08      	ldr	r3, [pc, #32]	; (8005940 <prvProcessReceivedCommands+0x130>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f107 0108 	add.w	r1, r7, #8
 8005924:	2200      	movs	r2, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe f96c 	bl	8003c04 <xQueueReceive>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	f47f af72 	bne.w	8005818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000a44 	.word	0x20000a44

08005944 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800594a:	e045      	b.n	80059d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005956:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7fd fd8e 	bl	8003486 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d12e      	bne.n	80059d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d90e      	bls.n	80059aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fd fd36 	bl	8003414 <vListInsert>
 80059a8:	e016      	b.n	80059d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059aa:	2300      	movs	r3, #0
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2300      	movs	r3, #0
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	2100      	movs	r1, #0
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fdb7 	bl	8005528 <xTimerGenericCommand>
 80059ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	603b      	str	r3, [r7, #0]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059d8:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1b4      	bne.n	800594c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <prvSwitchTimerLists+0xc0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <prvSwitchTimerLists+0xbc>)
 80059ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059f0:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <prvSwitchTimerLists+0xc0>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6013      	str	r3, [r2, #0]
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000a3c 	.word	0x20000a3c
 8005a04:	20000a40 	.word	0x20000a40

08005a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a0e:	f000 f969 	bl	8005ce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <prvCheckForValidListAndQueue+0x60>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d120      	bne.n	8005a5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a1a:	4814      	ldr	r0, [pc, #80]	; (8005a6c <prvCheckForValidListAndQueue+0x64>)
 8005a1c:	f7fd fca9 	bl	8003372 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a20:	4813      	ldr	r0, [pc, #76]	; (8005a70 <prvCheckForValidListAndQueue+0x68>)
 8005a22:	f7fd fca6 	bl	8003372 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a26:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <prvCheckForValidListAndQueue+0x6c>)
 8005a28:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <prvCheckForValidListAndQueue+0x64>)
 8005a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <prvCheckForValidListAndQueue+0x70>)
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <prvCheckForValidListAndQueue+0x68>)
 8005a30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a32:	2300      	movs	r3, #0
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <prvCheckForValidListAndQueue+0x74>)
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <prvCheckForValidListAndQueue+0x78>)
 8005a3a:	210c      	movs	r1, #12
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f7fd fdb5 	bl	80035ac <xQueueGenericCreateStatic>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <prvCheckForValidListAndQueue+0x60>)
 8005a46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <prvCheckForValidListAndQueue+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <prvCheckForValidListAndQueue+0x60>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	490b      	ldr	r1, [pc, #44]	; (8005a84 <prvCheckForValidListAndQueue+0x7c>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fbe8 	bl	800422c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a5c:	f000 f972 	bl	8005d44 <vPortExitCritical>
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000a44 	.word	0x20000a44
 8005a6c:	20000a14 	.word	0x20000a14
 8005a70:	20000a28 	.word	0x20000a28
 8005a74:	20000a3c 	.word	0x20000a3c
 8005a78:	20000a40 	.word	0x20000a40
 8005a7c:	20000ac8 	.word	0x20000ac8
 8005a80:	20000a50 	.word	0x20000a50
 8005a84:	08006568 	.word	0x08006568

08005a88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b04      	subs	r3, #4
 8005a98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3b04      	subs	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ab8:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <pxPortInitialiseStack+0x64>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3b14      	subs	r3, #20
 8005ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3b04      	subs	r3, #4
 8005ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f06f 0202 	mvn.w	r2, #2
 8005ad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3b20      	subs	r3, #32
 8005adc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	08005af1 	.word	0x08005af1

08005af0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <prvTaskExitError+0x54>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b02:	d00a      	beq.n	8005b1a <prvTaskExitError+0x2a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvTaskExitError+0x28>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60bb      	str	r3, [r7, #8]
}
 8005b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b2e:	bf00      	nop
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0fc      	beq.n	8005b30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	2000000c 	.word	0x2000000c
	...

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed08 	.word	0xe000ed08

08005ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ba6:	4b46      	ldr	r3, [pc, #280]	; (8005cc0 <xPortStartScheduler+0x120>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a46      	ldr	r2, [pc, #280]	; (8005cc4 <xPortStartScheduler+0x124>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10a      	bne.n	8005bc6 <xPortStartScheduler+0x26>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	613b      	str	r3, [r7, #16]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <xPortStartScheduler+0x120>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <xPortStartScheduler+0x128>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d10a      	bne.n	8005be6 <xPortStartScheduler+0x46>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005be6:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <xPortStartScheduler+0x12c>)
 8005be8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	22ff      	movs	r2, #255	; 0xff
 8005bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4b31      	ldr	r3, [pc, #196]	; (8005cd0 <xPortStartScheduler+0x130>)
 8005c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c0e:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c10:	2207      	movs	r2, #7
 8005c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c14:	e009      	b.n	8005c2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c16:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d0ef      	beq.n	8005c16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c36:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1c3 0307 	rsb	r3, r3, #7
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d00a      	beq.n	8005c58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60bb      	str	r3, [r7, #8]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c58:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c6a:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <xPortStartScheduler+0x134>)
 8005c6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c76:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <xPortStartScheduler+0x138>)
 8005c88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c8e:	f000 f8dd 	bl	8005e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c92:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <xPortStartScheduler+0x13c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c98:	f000 f8fc 	bl	8005e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c9c:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <xPortStartScheduler+0x140>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <xPortStartScheduler+0x140>)
 8005ca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ca8:	f7ff ff66 	bl	8005b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cac:	f7fe ff38 	bl	8004b20 <vTaskSwitchContext>
	prvTaskExitError();
 8005cb0:	f7ff ff1e 	bl	8005af0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000ed00 	.word	0xe000ed00
 8005cc4:	410fc271 	.word	0x410fc271
 8005cc8:	410fc270 	.word	0x410fc270
 8005ccc:	e000e400 	.word	0xe000e400
 8005cd0:	20000b10 	.word	0x20000b10
 8005cd4:	20000b14 	.word	0x20000b14
 8005cd8:	e000ed20 	.word	0xe000ed20
 8005cdc:	2000000c 	.word	0x2000000c
 8005ce0:	e000ef34 	.word	0xe000ef34

08005ce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	607b      	str	r3, [r7, #4]
}
 8005cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <vPortEnterCritical+0x58>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	4a0d      	ldr	r2, [pc, #52]	; (8005d3c <vPortEnterCritical+0x58>)
 8005d06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d08:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <vPortEnterCritical+0x58>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10f      	bne.n	8005d30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <vPortEnterCritical+0x5c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	603b      	str	r3, [r7, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	e7fe      	b.n	8005d2e <vPortEnterCritical+0x4a>
	}
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	2000000c 	.word	0x2000000c
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <vPortExitCritical+0x50>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <vPortExitCritical+0x24>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	607b      	str	r3, [r7, #4]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <vPortExitCritical+0x50>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <vPortExitCritical+0x50>)
 8005d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <vPortExitCritical+0x50>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <vPortExitCritical+0x42>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f383 8811 	msr	BASEPRI, r3
}
 8005d84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	2000000c 	.word	0x2000000c
	...

08005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005da0:	f3ef 8009 	mrs	r0, PSP
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <pxCurrentTCBConst>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f01e 0f10 	tst.w	lr, #16
 8005db0:	bf08      	it	eq
 8005db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	6010      	str	r0, [r2, #0]
 8005dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005dc4:	f380 8811 	msr	BASEPRI, r0
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f7fe fea6 	bl	8004b20 <vTaskSwitchContext>
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f380 8811 	msr	BASEPRI, r0
 8005ddc:	bc09      	pop	{r0, r3}
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	6808      	ldr	r0, [r1, #0]
 8005de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de6:	f01e 0f10 	tst.w	lr, #16
 8005dea:	bf08      	it	eq
 8005dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005df0:	f380 8809 	msr	PSP, r0
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w

08005e00 <pxCurrentTCBConst>:
 8005e00:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e22:	f7fe fdbf 	bl	80049a4 <xTaskIncrementTick>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <SysTick_Handler+0x40>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f383 8811 	msr	BASEPRI, r3
}
 8005e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <vPortSetupTimerInterrupt+0x38>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <vPortSetupTimerInterrupt+0x3c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <vPortSetupTimerInterrupt+0x40>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <vPortSetupTimerInterrupt+0x44>)
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e6e:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e010 	.word	0xe000e010
 8005e84:	e000e018 	.word	0xe000e018
 8005e88:	20000000 	.word	0x20000000
 8005e8c:	10624dd3 	.word	0x10624dd3
 8005e90:	e000e014 	.word	0xe000e014

08005e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ea4 <vPortEnableVFP+0x10>
 8005e98:	6801      	ldr	r1, [r0, #0]
 8005e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e9e:	6001      	str	r1, [r0, #0]
 8005ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	e000ed88 	.word	0xe000ed88

08005ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eae:	f3ef 8305 	mrs	r3, IPSR
 8005eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d914      	bls.n	8005ee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <vPortValidateInterruptPriority+0x70>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <vPortValidateInterruptPriority+0x74>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	7afa      	ldrb	r2, [r7, #11]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20a      	bcs.n	8005ee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <vPortValidateInterruptPriority+0x78>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eec:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <vPortValidateInterruptPriority+0x7c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d90a      	bls.n	8005f0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	603b      	str	r3, [r7, #0]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vPortValidateInterruptPriority+0x60>
	}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	e000e3f0 	.word	0xe000e3f0
 8005f1c:	20000b10 	.word	0x20000b10
 8005f20:	e000ed0c 	.word	0xe000ed0c
 8005f24:	20000b14 	.word	0x20000b14

08005f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f34:	f7fe fc7c 	bl	8004830 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f38:	4b58      	ldr	r3, [pc, #352]	; (800609c <pvPortMalloc+0x174>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f40:	f000 f910 	bl	8006164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f44:	4b56      	ldr	r3, [pc, #344]	; (80060a0 <pvPortMalloc+0x178>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 808e 	bne.w	800606e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01d      	beq.n	8005f94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f58:	2208      	movs	r2, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	3308      	adds	r3, #8
 8005f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <pvPortMalloc+0x6c>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	617b      	str	r3, [r7, #20]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d069      	beq.n	800606e <pvPortMalloc+0x146>
 8005f9a:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <pvPortMalloc+0x17c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d864      	bhi.n	800606e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fa4:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <pvPortMalloc+0x180>)
 8005fa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fa8:	4b3f      	ldr	r3, [pc, #252]	; (80060a8 <pvPortMalloc+0x180>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fae:	e004      	b.n	8005fba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d903      	bls.n	8005fcc <pvPortMalloc+0xa4>
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f1      	bne.n	8005fb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fcc:	4b33      	ldr	r3, [pc, #204]	; (800609c <pvPortMalloc+0x174>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d04b      	beq.n	800606e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4413      	add	r3, r2
 8005fde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d91f      	bls.n	8006038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <pvPortMalloc+0xf8>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	613b      	str	r3, [r7, #16]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	1ad2      	subs	r2, r2, r3
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006032:	69b8      	ldr	r0, [r7, #24]
 8006034:	f000 f8f8 	bl	8006228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <pvPortMalloc+0x17c>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <pvPortMalloc+0x17c>)
 8006044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006046:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <pvPortMalloc+0x17c>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b18      	ldr	r3, [pc, #96]	; (80060ac <pvPortMalloc+0x184>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d203      	bcs.n	800605a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006052:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <pvPortMalloc+0x17c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a15      	ldr	r2, [pc, #84]	; (80060ac <pvPortMalloc+0x184>)
 8006058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <pvPortMalloc+0x178>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	431a      	orrs	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800606e:	f7fe fbed 	bl	800484c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <pvPortMalloc+0x16a>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <pvPortMalloc+0x168>
	return pvReturn;
 8006092:	69fb      	ldr	r3, [r7, #28]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	; 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20001720 	.word	0x20001720
 80060a0:	2000172c 	.word	0x2000172c
 80060a4:	20001724 	.word	0x20001724
 80060a8:	20001718 	.word	0x20001718
 80060ac:	20001728 	.word	0x20001728

080060b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d048      	beq.n	8006154 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060c2:	2308      	movs	r3, #8
 80060c4:	425b      	negs	r3, r3
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	4b21      	ldr	r3, [pc, #132]	; (800615c <vPortFree+0xac>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <vPortFree+0x44>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60fb      	str	r3, [r7, #12]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <vPortFree+0x62>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60bb      	str	r3, [r7, #8]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <vPortFree+0xac>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d115      	bne.n	8006154 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b0b      	ldr	r3, [pc, #44]	; (800615c <vPortFree+0xac>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	43db      	mvns	r3, r3
 8006132:	401a      	ands	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006138:	f7fe fb7a 	bl	8004830 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <vPortFree+0xb0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4413      	add	r3, r2
 8006146:	4a06      	ldr	r2, [pc, #24]	; (8006160 <vPortFree+0xb0>)
 8006148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800614a:	6938      	ldr	r0, [r7, #16]
 800614c:	f000 f86c 	bl	8006228 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006150:	f7fe fb7c 	bl	800484c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006154:	bf00      	nop
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000172c 	.word	0x2000172c
 8006160:	20001724 	.word	0x20001724

08006164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800616a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800616e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006170:	4b27      	ldr	r3, [pc, #156]	; (8006210 <prvHeapInit+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00c      	beq.n	8006198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <prvHeapInit+0xac>)
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <prvHeapInit+0xb0>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <prvHeapInit+0xb0>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061b0:	2208      	movs	r2, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0307 	bic.w	r3, r3, #7
 80061be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a15      	ldr	r2, [pc, #84]	; (8006218 <prvHeapInit+0xb4>)
 80061c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <prvHeapInit+0xb4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <prvHeapInit+0xb4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	1ad2      	subs	r2, r2, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvHeapInit+0xb4>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	; (800621c <prvHeapInit+0xb8>)
 80061f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <prvHeapInit+0xbc>)
 80061fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <prvHeapInit+0xc0>)
 80061fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	20000b18 	.word	0x20000b18
 8006214:	20001718 	.word	0x20001718
 8006218:	20001720 	.word	0x20001720
 800621c:	20001728 	.word	0x20001728
 8006220:	20001724 	.word	0x20001724
 8006224:	2000172c 	.word	0x2000172c

08006228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <prvInsertBlockIntoFreeList+0xac>)
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e002      	b.n	800623c <prvInsertBlockIntoFreeList+0x14>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d8f7      	bhi.n	8006236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4413      	add	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d108      	bne.n	800626a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	441a      	add	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	441a      	add	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d118      	bne.n	80062b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d00d      	beq.n	80062a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	e008      	b.n	80062b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvInsertBlockIntoFreeList+0xb0>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e003      	b.n	80062b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d002      	beq.n	80062c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20001718 	.word	0x20001718
 80062d8:	20001720 	.word	0x20001720

080062dc <memset>:
 80062dc:	4402      	add	r2, r0
 80062de:	4603      	mov	r3, r0
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <_reclaim_reent>:
 80062ec:	4b29      	ldr	r3, [pc, #164]	; (8006394 <_reclaim_reent+0xa8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4283      	cmp	r3, r0
 80062f2:	b570      	push	{r4, r5, r6, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	d04b      	beq.n	8006390 <_reclaim_reent+0xa4>
 80062f8:	69c3      	ldr	r3, [r0, #28]
 80062fa:	b143      	cbz	r3, 800630e <_reclaim_reent+0x22>
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d144      	bne.n	800638c <_reclaim_reent+0xa0>
 8006302:	69e3      	ldr	r3, [r4, #28]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	b111      	cbz	r1, 800630e <_reclaim_reent+0x22>
 8006308:	4620      	mov	r0, r4
 800630a:	f000 f879 	bl	8006400 <_free_r>
 800630e:	6961      	ldr	r1, [r4, #20]
 8006310:	b111      	cbz	r1, 8006318 <_reclaim_reent+0x2c>
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f874 	bl	8006400 <_free_r>
 8006318:	69e1      	ldr	r1, [r4, #28]
 800631a:	b111      	cbz	r1, 8006322 <_reclaim_reent+0x36>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f86f 	bl	8006400 <_free_r>
 8006322:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006324:	b111      	cbz	r1, 800632c <_reclaim_reent+0x40>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 f86a 	bl	8006400 <_free_r>
 800632c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800632e:	b111      	cbz	r1, 8006336 <_reclaim_reent+0x4a>
 8006330:	4620      	mov	r0, r4
 8006332:	f000 f865 	bl	8006400 <_free_r>
 8006336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006338:	b111      	cbz	r1, 8006340 <_reclaim_reent+0x54>
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f860 	bl	8006400 <_free_r>
 8006340:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006342:	b111      	cbz	r1, 800634a <_reclaim_reent+0x5e>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f85b 	bl	8006400 <_free_r>
 800634a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x68>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f856 	bl	8006400 <_free_r>
 8006354:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x72>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f851 	bl	8006400 <_free_r>
 800635e:	6a23      	ldr	r3, [r4, #32]
 8006360:	b1b3      	cbz	r3, 8006390 <_reclaim_reent+0xa4>
 8006362:	4620      	mov	r0, r4
 8006364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006368:	4718      	bx	r3
 800636a:	5949      	ldr	r1, [r1, r5]
 800636c:	b941      	cbnz	r1, 8006380 <_reclaim_reent+0x94>
 800636e:	3504      	adds	r5, #4
 8006370:	69e3      	ldr	r3, [r4, #28]
 8006372:	2d80      	cmp	r5, #128	; 0x80
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	d1f8      	bne.n	800636a <_reclaim_reent+0x7e>
 8006378:	4620      	mov	r0, r4
 800637a:	f000 f841 	bl	8006400 <_free_r>
 800637e:	e7c0      	b.n	8006302 <_reclaim_reent+0x16>
 8006380:	680e      	ldr	r6, [r1, #0]
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f83c 	bl	8006400 <_free_r>
 8006388:	4631      	mov	r1, r6
 800638a:	e7ef      	b.n	800636c <_reclaim_reent+0x80>
 800638c:	2500      	movs	r5, #0
 800638e:	e7ef      	b.n	8006370 <_reclaim_reent+0x84>
 8006390:	bd70      	pop	{r4, r5, r6, pc}
 8006392:	bf00      	nop
 8006394:	2000005c 	.word	0x2000005c

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	4d0d      	ldr	r5, [pc, #52]	; (80063d0 <__libc_init_array+0x38>)
 800639c:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 800639e:	1b64      	subs	r4, r4, r5
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	2600      	movs	r6, #0
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	4d0b      	ldr	r5, [pc, #44]	; (80063d8 <__libc_init_array+0x40>)
 80063aa:	4c0c      	ldr	r4, [pc, #48]	; (80063dc <__libc_init_array+0x44>)
 80063ac:	f000 f880 	bl	80064b0 <_init>
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	2600      	movs	r6, #0
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	080065a8 	.word	0x080065a8
 80063d4:	080065a8 	.word	0x080065a8
 80063d8:	080065a8 	.word	0x080065a8
 80063dc:	080065ac 	.word	0x080065ac

080063e0 <__retarget_lock_acquire_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__retarget_lock_release_recursive>:
 80063e2:	4770      	bx	lr

080063e4 <memcpy>:
 80063e4:	440a      	add	r2, r1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	4770      	bx	lr
 80063f0:	b510      	push	{r4, lr}
 80063f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fa:	4291      	cmp	r1, r2
 80063fc:	d1f9      	bne.n	80063f2 <memcpy+0xe>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <_free_r>:
 8006400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006402:	2900      	cmp	r1, #0
 8006404:	d044      	beq.n	8006490 <_free_r+0x90>
 8006406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640a:	9001      	str	r0, [sp, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f1a1 0404 	sub.w	r4, r1, #4
 8006412:	bfb8      	it	lt
 8006414:	18e4      	addlt	r4, r4, r3
 8006416:	f000 f83f 	bl	8006498 <__malloc_lock>
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <_free_r+0x94>)
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	b933      	cbnz	r3, 8006430 <_free_r+0x30>
 8006422:	6063      	str	r3, [r4, #4]
 8006424:	6014      	str	r4, [r2, #0]
 8006426:	b003      	add	sp, #12
 8006428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800642c:	f000 b83a 	b.w	80064a4 <__malloc_unlock>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d908      	bls.n	8006446 <_free_r+0x46>
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	1961      	adds	r1, r4, r5
 8006438:	428b      	cmp	r3, r1
 800643a:	bf01      	itttt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	1949      	addeq	r1, r1, r5
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	e7ed      	b.n	8006422 <_free_r+0x22>
 8006446:	461a      	mov	r2, r3
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b10b      	cbz	r3, 8006450 <_free_r+0x50>
 800644c:	42a3      	cmp	r3, r4
 800644e:	d9fa      	bls.n	8006446 <_free_r+0x46>
 8006450:	6811      	ldr	r1, [r2, #0]
 8006452:	1855      	adds	r5, r2, r1
 8006454:	42a5      	cmp	r5, r4
 8006456:	d10b      	bne.n	8006470 <_free_r+0x70>
 8006458:	6824      	ldr	r4, [r4, #0]
 800645a:	4421      	add	r1, r4
 800645c:	1854      	adds	r4, r2, r1
 800645e:	42a3      	cmp	r3, r4
 8006460:	6011      	str	r1, [r2, #0]
 8006462:	d1e0      	bne.n	8006426 <_free_r+0x26>
 8006464:	681c      	ldr	r4, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	440c      	add	r4, r1
 800646c:	6014      	str	r4, [r2, #0]
 800646e:	e7da      	b.n	8006426 <_free_r+0x26>
 8006470:	d902      	bls.n	8006478 <_free_r+0x78>
 8006472:	230c      	movs	r3, #12
 8006474:	6003      	str	r3, [r0, #0]
 8006476:	e7d6      	b.n	8006426 <_free_r+0x26>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf04      	itt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	bf04      	itt	eq
 8006488:	1949      	addeq	r1, r1, r5
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	6054      	str	r4, [r2, #4]
 800648e:	e7ca      	b.n	8006426 <_free_r+0x26>
 8006490:	b003      	add	sp, #12
 8006492:	bd30      	pop	{r4, r5, pc}
 8006494:	2000186c 	.word	0x2000186c

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_lock+0x8>)
 800649a:	f7ff bfa1 	b.w	80063e0 <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	20001868 	.word	0x20001868

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__malloc_unlock+0x8>)
 80064a6:	f7ff bf9c 	b.w	80063e2 <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	20001868 	.word	0x20001868

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
